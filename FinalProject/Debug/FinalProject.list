
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011eb8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c88  08012098  08012098  00022098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014d20  08014d20  00030190  2**0
                  CONTENTS
  4 .ARM          00000008  08014d20  08014d20  00024d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014d28  08014d28  00030190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014d28  08014d28  00024d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014d2c  08014d2c  00024d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  08014d30  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005504  20000190  08014ec0  00030190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005694  08014ec0  00035694  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00042659  00000000  00000000  000301c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000073f2  00000000  00000000  00072819  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003138  00000000  00000000  00079c10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002e38  00000000  00000000  0007cd48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000c456  00000000  00000000  0007fb80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002c100  00000000  00000000  0008bfd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fdfd4  00000000  00000000  000b80d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b60aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d4cc  00000000  00000000  001b6128  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000190 	.word	0x20000190
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012080 	.word	0x08012080

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000194 	.word	0x20000194
 800021c:	08012080 	.word	0x08012080

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000524:	f003 fd14 	bl	8003f50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000528:	f000 f962 	bl	80007f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052c:	f000 fc6c 	bl	8000e08 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000530:	f000 fa0a 	bl	8000948 <MX_ADC1_Init>
  MX_DAC_Init();
 8000534:	f000 fa5a 	bl	80009ec <MX_DAC_Init>
  MX_DFSDM1_Init();
 8000538:	f000 fa82 	bl	8000a40 <MX_DFSDM1_Init>
  MX_DFSDM2_Init();
 800053c:	f000 fab8 	bl	8000ab0 <MX_DFSDM2_Init>
  MX_FMPI2C1_Init();
 8000540:	f000 fb20 	bl	8000b84 <MX_FMPI2C1_Init>
  MX_FSMC_Init();
 8000544:	f000 fdf2 	bl	800112c <MX_FSMC_Init>
  MX_I2S2_Init();
 8000548:	f000 fb80 	bl	8000c4c <MX_I2S2_Init>
  MX_QUADSPI_Init();
 800054c:	f000 fbac 	bl	8000ca8 <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 8000550:	f000 fbd6 	bl	8000d00 <MX_SDIO_SD_Init>
  MX_UART10_Init();
 8000554:	f000 fc04 	bl	8000d60 <MX_UART10_Init>
  MX_USART6_UART_Init();
 8000558:	f000 fc2c 	bl	8000db4 <MX_USART6_UART_Init>
  MX_I2C2_Init();
 800055c:	f000 fb48 	bl	8000bf0 <MX_I2C2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000560:	f000 f9e6 	bl	8000930 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000564:	f002 ffc1 	bl	80034ea <BSP_LCD_Init>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000568:	2000      	movs	r0, #0
 800056a:	f003 f87d 	bl	8003668 <BSP_LCD_Clear>
  BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 800056e:	2100      	movs	r1, #0
 8000570:	2000      	movs	r0, #0
 8000572:	f002 fe05 	bl	8003180 <BSP_PB_Init>
  BSP_LCD_SetFont(&Font16);
 8000576:	4867      	ldr	r0, [pc, #412]	; (8000714 <main+0x1f4>)
 8000578:	f003 f866 	bl	8003648 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800057c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000580:	f003 f842 	bl	8003608 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8000584:	2000      	movs	r0, #0
 8000586:	f003 f84f 	bl	8003628 <BSP_LCD_SetBackColor>

  //Draw Border
  BSP_LCD_DrawLine(topBorderx1, topBordery1, topBorderx2, topBordery2);
 800058a:	4b63      	ldr	r3, [pc, #396]	; (8000718 <main+0x1f8>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	b298      	uxth	r0, r3
 8000590:	4b62      	ldr	r3, [pc, #392]	; (800071c <main+0x1fc>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	b299      	uxth	r1, r3
 8000596:	4b62      	ldr	r3, [pc, #392]	; (8000720 <main+0x200>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	b29a      	uxth	r2, r3
 800059c:	4b61      	ldr	r3, [pc, #388]	; (8000724 <main+0x204>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	f003 f9a9 	bl	80038f8 <BSP_LCD_DrawLine>
  BSP_LCD_DrawLine(leftBorderx1, leftBordery1, leftBorderx2, leftBordery2);
 80005a6:	4b60      	ldr	r3, [pc, #384]	; (8000728 <main+0x208>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	b298      	uxth	r0, r3
 80005ac:	4b5f      	ldr	r3, [pc, #380]	; (800072c <main+0x20c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	b299      	uxth	r1, r3
 80005b2:	4b5f      	ldr	r3, [pc, #380]	; (8000730 <main+0x210>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	b29a      	uxth	r2, r3
 80005b8:	4b5e      	ldr	r3, [pc, #376]	; (8000734 <main+0x214>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	b29b      	uxth	r3, r3
 80005be:	f003 f99b 	bl	80038f8 <BSP_LCD_DrawLine>
  BSP_LCD_DrawLine(rightBorderx1, rightBordery1, rightBorderx2, rightBordery2);
 80005c2:	4b5d      	ldr	r3, [pc, #372]	; (8000738 <main+0x218>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	b298      	uxth	r0, r3
 80005c8:	4b5c      	ldr	r3, [pc, #368]	; (800073c <main+0x21c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	b299      	uxth	r1, r3
 80005ce:	4b5c      	ldr	r3, [pc, #368]	; (8000740 <main+0x220>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	4b5b      	ldr	r3, [pc, #364]	; (8000744 <main+0x224>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	b29b      	uxth	r3, r3
 80005da:	f003 f98d 	bl	80038f8 <BSP_LCD_DrawLine>
  BSP_LCD_DrawLine(bottomBorderx1, bottomBordery1, bottomBorderx2, bottomBordery2);
 80005de:	4b5a      	ldr	r3, [pc, #360]	; (8000748 <main+0x228>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	b298      	uxth	r0, r3
 80005e4:	4b59      	ldr	r3, [pc, #356]	; (800074c <main+0x22c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	b299      	uxth	r1, r3
 80005ea:	4b59      	ldr	r3, [pc, #356]	; (8000750 <main+0x230>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	4b58      	ldr	r3, [pc, #352]	; (8000754 <main+0x234>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	f003 f97f 	bl	80038f8 <BSP_LCD_DrawLine>

  //Draw Score
  itoa(p1Score, p1ScoreSnum, 10);
 80005fa:	4b57      	ldr	r3, [pc, #348]	; (8000758 <main+0x238>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	220a      	movs	r2, #10
 8000600:	4956      	ldr	r1, [pc, #344]	; (800075c <main+0x23c>)
 8000602:	4618      	mov	r0, r3
 8000604:	f011 fc1e 	bl	8011e44 <itoa>
  BSP_LCD_DisplayStringAt(p1ScoreX, p1ScoreY, (uint8_t*)p1ScoreSnum, LEFT_MODE);
 8000608:	4b55      	ldr	r3, [pc, #340]	; (8000760 <main+0x240>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	b298      	uxth	r0, r3
 800060e:	4b55      	ldr	r3, [pc, #340]	; (8000764 <main+0x244>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	b299      	uxth	r1, r3
 8000614:	2303      	movs	r3, #3
 8000616:	4a51      	ldr	r2, [pc, #324]	; (800075c <main+0x23c>)
 8000618:	f003 f886 	bl	8003728 <BSP_LCD_DisplayStringAt>

  itoa(p2Score, p2ScoreSnum, 10);
 800061c:	4b52      	ldr	r3, [pc, #328]	; (8000768 <main+0x248>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	220a      	movs	r2, #10
 8000622:	4952      	ldr	r1, [pc, #328]	; (800076c <main+0x24c>)
 8000624:	4618      	mov	r0, r3
 8000626:	f011 fc0d 	bl	8011e44 <itoa>
  BSP_LCD_DisplayStringAt(p2ScoreX, p2ScoreY, (uint8_t*)p2ScoreSnum, LEFT_MODE);
 800062a:	4b51      	ldr	r3, [pc, #324]	; (8000770 <main+0x250>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	b298      	uxth	r0, r3
 8000630:	4b50      	ldr	r3, [pc, #320]	; (8000774 <main+0x254>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	b299      	uxth	r1, r3
 8000636:	2303      	movs	r3, #3
 8000638:	4a4c      	ldr	r2, [pc, #304]	; (800076c <main+0x24c>)
 800063a:	f003 f875 	bl	8003728 <BSP_LCD_DisplayStringAt>

  BSP_LCD_DisplayStringAt(scoreTextX, scoreTextY, (uint8_t*)"<--Score-->", CENTER_MODE);
 800063e:	4b4e      	ldr	r3, [pc, #312]	; (8000778 <main+0x258>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	b298      	uxth	r0, r3
 8000644:	4b4d      	ldr	r3, [pc, #308]	; (800077c <main+0x25c>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	b299      	uxth	r1, r3
 800064a:	2301      	movs	r3, #1
 800064c:	4a4c      	ldr	r2, [pc, #304]	; (8000780 <main+0x260>)
 800064e:	f003 f86b 	bl	8003728 <BSP_LCD_DisplayStringAt>

  //Draw Paddles
  BSP_LCD_DrawLine(leftPaddlex1, leftPaddley1, leftPaddlex2, leftPaddley2);
 8000652:	4b4c      	ldr	r3, [pc, #304]	; (8000784 <main+0x264>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	b298      	uxth	r0, r3
 8000658:	4b4b      	ldr	r3, [pc, #300]	; (8000788 <main+0x268>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	b299      	uxth	r1, r3
 800065e:	4b4b      	ldr	r3, [pc, #300]	; (800078c <main+0x26c>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	b29a      	uxth	r2, r3
 8000664:	4b4a      	ldr	r3, [pc, #296]	; (8000790 <main+0x270>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	b29b      	uxth	r3, r3
 800066a:	f003 f945 	bl	80038f8 <BSP_LCD_DrawLine>
  BSP_LCD_DrawLine(rightPaddlex1, rightPaddley1, rightPaddlex2, rightPaddley2);
 800066e:	4b49      	ldr	r3, [pc, #292]	; (8000794 <main+0x274>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	b298      	uxth	r0, r3
 8000674:	4b48      	ldr	r3, [pc, #288]	; (8000798 <main+0x278>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	b299      	uxth	r1, r3
 800067a:	4b48      	ldr	r3, [pc, #288]	; (800079c <main+0x27c>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	b29a      	uxth	r2, r3
 8000680:	4b47      	ldr	r3, [pc, #284]	; (80007a0 <main+0x280>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	b29b      	uxth	r3, r3
 8000686:	f003 f937 	bl	80038f8 <BSP_LCD_DrawLine>

  //Draw Ball
  BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800068a:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800068e:	f002 ffbb 	bl	8003608 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(ballx, bally, ballRad);
 8000692:	4b44      	ldr	r3, [pc, #272]	; (80007a4 <main+0x284>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	b298      	uxth	r0, r3
 8000698:	4b43      	ldr	r3, [pc, #268]	; (80007a8 <main+0x288>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	b299      	uxth	r1, r3
 800069e:	4b43      	ldr	r3, [pc, #268]	; (80007ac <main+0x28c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	461a      	mov	r2, r3
 80006a6:	f003 facd 	bl	8003c44 <BSP_LCD_FillCircle>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80006aa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80006ae:	f002 ffab 	bl	8003608 <BSP_LCD_SetTextColor>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006b2:	f00d fcf7 	bl	800e0a4 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myPaddleMutex */
  myPaddleMutexHandle = osMutexNew(&myPaddleMutex_attributes);
 80006b6:	483e      	ldr	r0, [pc, #248]	; (80007b0 <main+0x290>)
 80006b8:	f00d fe32 	bl	800e320 <osMutexNew>
 80006bc:	4602      	mov	r2, r0
 80006be:	4b3d      	ldr	r3, [pc, #244]	; (80007b4 <main+0x294>)
 80006c0:	601a      	str	r2, [r3, #0]

  /* creation of myBallMutex */
  myBallMutexHandle = osMutexNew(&myBallMutex_attributes);
 80006c2:	483d      	ldr	r0, [pc, #244]	; (80007b8 <main+0x298>)
 80006c4:	f00d fe2c 	bl	800e320 <osMutexNew>
 80006c8:	4602      	mov	r2, r0
 80006ca:	4b3c      	ldr	r3, [pc, #240]	; (80007bc <main+0x29c>)
 80006cc:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of gameClock */
  gameClockHandle = osThreadNew(StartGameClock, NULL, &gameClock_attributes);
 80006ce:	4a3c      	ldr	r2, [pc, #240]	; (80007c0 <main+0x2a0>)
 80006d0:	2100      	movs	r1, #0
 80006d2:	483c      	ldr	r0, [pc, #240]	; (80007c4 <main+0x2a4>)
 80006d4:	f00d fd50 	bl	800e178 <osThreadNew>
 80006d8:	4602      	mov	r2, r0
 80006da:	4b3b      	ldr	r3, [pc, #236]	; (80007c8 <main+0x2a8>)
 80006dc:	601a      	str	r2, [r3, #0]

  /* creation of drawGame */
  drawGameHandle = osThreadNew(StartDrawGame, NULL, &drawGame_attributes);
 80006de:	4a3b      	ldr	r2, [pc, #236]	; (80007cc <main+0x2ac>)
 80006e0:	2100      	movs	r1, #0
 80006e2:	483b      	ldr	r0, [pc, #236]	; (80007d0 <main+0x2b0>)
 80006e4:	f00d fd48 	bl	800e178 <osThreadNew>
 80006e8:	4602      	mov	r2, r0
 80006ea:	4b3a      	ldr	r3, [pc, #232]	; (80007d4 <main+0x2b4>)
 80006ec:	601a      	str	r2, [r3, #0]

  /* creation of buttonControl */
  buttonControlHandle = osThreadNew(StartButtonControl, NULL, &buttonControl_attributes);
 80006ee:	4a3a      	ldr	r2, [pc, #232]	; (80007d8 <main+0x2b8>)
 80006f0:	2100      	movs	r1, #0
 80006f2:	483a      	ldr	r0, [pc, #232]	; (80007dc <main+0x2bc>)
 80006f4:	f00d fd40 	bl	800e178 <osThreadNew>
 80006f8:	4602      	mov	r2, r0
 80006fa:	4b39      	ldr	r3, [pc, #228]	; (80007e0 <main+0x2c0>)
 80006fc:	601a      	str	r2, [r3, #0]

  /* creation of wifiControl */
  wifiControlHandle = osThreadNew(StartWifiControl, NULL, &wifiControl_attributes);
 80006fe:	4a39      	ldr	r2, [pc, #228]	; (80007e4 <main+0x2c4>)
 8000700:	2100      	movs	r1, #0
 8000702:	4839      	ldr	r0, [pc, #228]	; (80007e8 <main+0x2c8>)
 8000704:	f00d fd38 	bl	800e178 <osThreadNew>
 8000708:	4602      	mov	r2, r0
 800070a:	4b38      	ldr	r3, [pc, #224]	; (80007ec <main+0x2cc>)
 800070c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800070e:	f00d fcfd 	bl	800e10c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000712:	e7fe      	b.n	8000712 <main+0x1f2>
 8000714:	200000f0 	.word	0x200000f0
 8000718:	20000000 	.word	0x20000000
 800071c:	20000004 	.word	0x20000004
 8000720:	20000008 	.word	0x20000008
 8000724:	2000000c 	.word	0x2000000c
 8000728:	20000010 	.word	0x20000010
 800072c:	20000014 	.word	0x20000014
 8000730:	20000018 	.word	0x20000018
 8000734:	2000001c 	.word	0x2000001c
 8000738:	20000020 	.word	0x20000020
 800073c:	20000024 	.word	0x20000024
 8000740:	20000028 	.word	0x20000028
 8000744:	2000002c 	.word	0x2000002c
 8000748:	20000030 	.word	0x20000030
 800074c:	20000034 	.word	0x20000034
 8000750:	20000038 	.word	0x20000038
 8000754:	2000003c 	.word	0x2000003c
 8000758:	200001ac 	.word	0x200001ac
 800075c:	20004cc8 	.word	0x20004cc8
 8000760:	20000040 	.word	0x20000040
 8000764:	20000044 	.word	0x20000044
 8000768:	200001b0 	.word	0x200001b0
 800076c:	20004d74 	.word	0x20004d74
 8000770:	20000048 	.word	0x20000048
 8000774:	2000004c 	.word	0x2000004c
 8000778:	200001bc 	.word	0x200001bc
 800077c:	20000050 	.word	0x20000050
 8000780:	080120e8 	.word	0x080120e8
 8000784:	20000054 	.word	0x20000054
 8000788:	20000058 	.word	0x20000058
 800078c:	2000005c 	.word	0x2000005c
 8000790:	20000060 	.word	0x20000060
 8000794:	20000064 	.word	0x20000064
 8000798:	20000068 	.word	0x20000068
 800079c:	2000006c 	.word	0x2000006c
 80007a0:	20000070 	.word	0x20000070
 80007a4:	2000008c 	.word	0x2000008c
 80007a8:	20000090 	.word	0x20000090
 80007ac:	2000009c 	.word	0x2000009c
 80007b0:	080121b4 	.word	0x080121b4
 80007b4:	20004b68 	.word	0x20004b68
 80007b8:	080121c4 	.word	0x080121c4
 80007bc:	20004e94 	.word	0x20004e94
 80007c0:	08012124 	.word	0x08012124
 80007c4:	08001291 	.word	0x08001291
 80007c8:	20004dcc 	.word	0x20004dcc
 80007cc:	08012148 	.word	0x08012148
 80007d0:	0800174d 	.word	0x0800174d
 80007d4:	20004e9c 	.word	0x20004e9c
 80007d8:	0801216c 	.word	0x0801216c
 80007dc:	08001a45 	.word	0x08001a45
 80007e0:	20004e98 	.word	0x20004e98
 80007e4:	08012190 	.word	0x08012190
 80007e8:	08001bd1 	.word	0x08001bd1
 80007ec:	20004d78 	.word	0x20004d78

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b0aa      	sub	sp, #168	; 0xa8
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80007fa:	2234      	movs	r2, #52	; 0x34
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f011 fb3d 	bl	8011e7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000814:	f107 0308 	add.w	r3, r7, #8
 8000818:	2258      	movs	r2, #88	; 0x58
 800081a:	2100      	movs	r1, #0
 800081c:	4618      	mov	r0, r3
 800081e:	f011 fb2e 	bl	8011e7e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b40      	ldr	r3, [pc, #256]	; (8000928 <SystemClock_Config+0x138>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	4a3f      	ldr	r2, [pc, #252]	; (8000928 <SystemClock_Config+0x138>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000830:	6413      	str	r3, [r2, #64]	; 0x40
 8000832:	4b3d      	ldr	r3, [pc, #244]	; (8000928 <SystemClock_Config+0x138>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800083e:	2300      	movs	r3, #0
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	4b3a      	ldr	r3, [pc, #232]	; (800092c <SystemClock_Config+0x13c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a39      	ldr	r2, [pc, #228]	; (800092c <SystemClock_Config+0x13c>)
 8000848:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800084c:	6013      	str	r3, [r2, #0]
 800084e:	4b37      	ldr	r3, [pc, #220]	; (800092c <SystemClock_Config+0x13c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800085a:	2303      	movs	r3, #3
 800085c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800085e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000862:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000864:	2301      	movs	r3, #1
 8000866:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800086a:	2310      	movs	r3, #16
 800086c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000870:	2302      	movs	r3, #2
 8000872:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000876:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800087a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 15;
 800087e:	230f      	movs	r3, #15
 8000880:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000884:	2390      	movs	r3, #144	; 0x90
 8000886:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800088a:	2302      	movs	r3, #2
 800088c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000890:	2305      	movs	r3, #5
 8000892:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000896:	2302      	movs	r3, #2
 8000898:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80008a0:	4618      	mov	r0, r3
 80008a2:	f007 fd7b 	bl	800839c <HAL_RCC_OscConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008ac:	f001 f9aa 	bl	8001c04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b0:	230f      	movs	r3, #15
 80008b2:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008b4:	2300      	movs	r3, #0
 80008b6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008c4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f006 ff8c 	bl	80077e8 <HAL_RCC_ClockConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0xea>
  {
    Error_Handler();
 80008d6:	f001 f995 	bl	8001c04 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 80008da:	f240 1371 	movw	r3, #369	; 0x171
 80008de:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80008e0:	2332      	movs	r3, #50	; 0x32
 80008e2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 80008e4:	230c      	movs	r3, #12
 80008e6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80008e8:	2302      	movs	r3, #2
 80008ea:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80008ec:	2302      	movs	r3, #2
 80008ee:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80008f0:	2300      	movs	r3, #0
 80008f2:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 80008f4:	2300      	movs	r3, #0
 80008f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_SYSCLK;
 80008f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008fc:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 80008fe:	2300      	movs	r3, #0
 8000900:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 8000906:	2300      	movs	r3, #0
 8000908:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800090a:	f107 0308 	add.w	r3, r7, #8
 800090e:	4618      	mov	r0, r3
 8000910:	f007 f968 	bl	8007be4 <HAL_RCCEx_PeriphCLKConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0x12e>
  {
    Error_Handler();
 800091a:	f001 f973 	bl	8001c04 <Error_Handler>
  }
}
 800091e:	bf00      	nop
 8000920:	37a8      	adds	r7, #168	; 0xa8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800
 800092c:	40007000 	.word	0x40007000

08000930 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000934:	2200      	movs	r2, #0
 8000936:	2100      	movs	r1, #0
 8000938:	2028      	movs	r0, #40	; 0x28
 800093a:	f003 fe97 	bl	800466c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800093e:	2028      	movs	r0, #40	; 0x28
 8000940:	f003 feb0 	bl	80046a4 <HAL_NVIC_EnableIRQ>
}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}

08000948 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800094e:	463b      	mov	r3, r7
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800095a:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <MX_ADC1_Init+0x98>)
 800095c:	4a21      	ldr	r2, [pc, #132]	; (80009e4 <MX_ADC1_Init+0x9c>)
 800095e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000960:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <MX_ADC1_Init+0x98>)
 8000962:	2200      	movs	r2, #0
 8000964:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000966:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <MX_ADC1_Init+0x98>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800096c:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <MX_ADC1_Init+0x98>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000972:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <MX_ADC1_Init+0x98>)
 8000974:	2200      	movs	r2, #0
 8000976:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000978:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <MX_ADC1_Init+0x98>)
 800097a:	2200      	movs	r2, #0
 800097c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000980:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_ADC1_Init+0x98>)
 8000982:	2200      	movs	r2, #0
 8000984:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_ADC1_Init+0x98>)
 8000988:	4a17      	ldr	r2, [pc, #92]	; (80009e8 <MX_ADC1_Init+0xa0>)
 800098a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_ADC1_Init+0x98>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_ADC1_Init+0x98>)
 8000994:	2201      	movs	r2, #1
 8000996:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_ADC1_Init+0x98>)
 800099a:	2200      	movs	r2, #0
 800099c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_ADC1_Init+0x98>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009a6:	480e      	ldr	r0, [pc, #56]	; (80009e0 <MX_ADC1_Init+0x98>)
 80009a8:	f003 fb36 	bl	8004018 <HAL_ADC_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80009b2:	f001 f927 	bl	8001c04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80009b6:	230a      	movs	r3, #10
 80009b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009ba:	2301      	movs	r3, #1
 80009bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009be:	2300      	movs	r3, #0
 80009c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c2:	463b      	mov	r3, r7
 80009c4:	4619      	mov	r1, r3
 80009c6:	4806      	ldr	r0, [pc, #24]	; (80009e0 <MX_ADC1_Init+0x98>)
 80009c8:	f003 fb6a 	bl	80040a0 <HAL_ADC_ConfigChannel>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80009d2:	f001 f917 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20004ccc 	.word	0x20004ccc
 80009e4:	40012000 	.word	0x40012000
 80009e8:	0f000001 	.word	0x0f000001

080009ec <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80009f2:	463b      	mov	r3, r7
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <MX_DAC_Init+0x4c>)
 80009fc:	4a0f      	ldr	r2, [pc, #60]	; (8000a3c <MX_DAC_Init+0x50>)
 80009fe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000a00:	480d      	ldr	r0, [pc, #52]	; (8000a38 <MX_DAC_Init+0x4c>)
 8000a02:	f003 fe5d 	bl	80046c0 <HAL_DAC_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000a0c:	f001 f8fa 	bl	8001c04 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a18:	463b      	mov	r3, r7
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4806      	ldr	r0, [pc, #24]	; (8000a38 <MX_DAC_Init+0x4c>)
 8000a20:	f003 fec4 	bl	80047ac <HAL_DAC_ConfigChannel>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000a2a:	f001 f8eb 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20004d14 	.word	0x20004d14
 8000a3c:	40007400 	.word	0x40007400

08000a40 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000a44:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <MX_DFSDM1_Init+0x68>)
 8000a46:	4a19      	ldr	r2, [pc, #100]	; (8000aac <MX_DFSDM1_Init+0x6c>)
 8000a48:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000a4a:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <MX_DFSDM1_Init+0x68>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000a50:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <MX_DFSDM1_Init+0x68>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000a56:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_DFSDM1_Init+0x68>)
 8000a58:	2202      	movs	r2, #2
 8000a5a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <MX_DFSDM1_Init+0x68>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_DFSDM1_Init+0x68>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_DFSDM1_Init+0x68>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_DFSDM1_Init+0x68>)
 8000a70:	2202      	movs	r2, #2
 8000a72:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_DFSDM1_Init+0x68>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <MX_DFSDM1_Init+0x68>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_DFSDM1_Init+0x68>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <MX_DFSDM1_Init+0x68>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_DFSDM1_Init+0x68>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_DFSDM1_Init+0x68>)
 8000a94:	f003 fee2 	bl	800485c <HAL_DFSDM_ChannelInit>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000a9e:	f001 f8b1 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20004b30 	.word	0x20004b30
 8000aac:	40016020 	.word	0x40016020

08000ab0 <MX_DFSDM2_Init>:
  * @brief DFSDM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM2_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM2_Init 0 */

  /* USER CODE BEGIN DFSDM2_Init 1 */

  /* USER CODE END DFSDM2_Init 1 */
  hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 8000ab4:	4b2f      	ldr	r3, [pc, #188]	; (8000b74 <MX_DFSDM2_Init+0xc4>)
 8000ab6:	4a30      	ldr	r2, [pc, #192]	; (8000b78 <MX_DFSDM2_Init+0xc8>)
 8000ab8:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 8000aba:	4b2e      	ldr	r3, [pc, #184]	; (8000b74 <MX_DFSDM2_Init+0xc4>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000ac0:	4b2c      	ldr	r3, [pc, #176]	; (8000b74 <MX_DFSDM2_Init+0xc4>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel1.Init.OutputClock.Divider = 2;
 8000ac6:	4b2b      	ldr	r3, [pc, #172]	; (8000b74 <MX_DFSDM2_Init+0xc4>)
 8000ac8:	2202      	movs	r2, #2
 8000aca:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000acc:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <MX_DFSDM2_Init+0xc4>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000ad2:	4b28      	ldr	r3, [pc, #160]	; (8000b74 <MX_DFSDM2_Init+0xc4>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000ad8:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <MX_DFSDM2_Init+0xc4>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000ade:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <MX_DFSDM2_Init+0xc4>)
 8000ae0:	2202      	movs	r2, #2
 8000ae2:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000ae4:	4b23      	ldr	r3, [pc, #140]	; (8000b74 <MX_DFSDM2_Init+0xc4>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000aea:	4b22      	ldr	r3, [pc, #136]	; (8000b74 <MX_DFSDM2_Init+0xc4>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 8000af0:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <MX_DFSDM2_Init+0xc4>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel1.Init.Offset = 0;
 8000af6:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <MX_DFSDM2_Init+0xc4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel1.Init.RightBitShift = 0x00;
 8000afc:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <MX_DFSDM2_Init+0xc4>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK)
 8000b02:	481c      	ldr	r0, [pc, #112]	; (8000b74 <MX_DFSDM2_Init+0xc4>)
 8000b04:	f003 feaa 	bl	800485c <HAL_DFSDM_ChannelInit>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_DFSDM2_Init+0x62>
  {
    Error_Handler();
 8000b0e:	f001 f879 	bl	8001c04 <Error_Handler>
  }
  hdfsdm2_channel7.Instance = DFSDM2_Channel7;
 8000b12:	4b1a      	ldr	r3, [pc, #104]	; (8000b7c <MX_DFSDM2_Init+0xcc>)
 8000b14:	4a1a      	ldr	r2, [pc, #104]	; (8000b80 <MX_DFSDM2_Init+0xd0>)
 8000b16:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel7.Init.OutputClock.Activation = ENABLE;
 8000b18:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <MX_DFSDM2_Init+0xcc>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000b1e:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <MX_DFSDM2_Init+0xcc>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel7.Init.OutputClock.Divider = 2;
 8000b24:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <MX_DFSDM2_Init+0xcc>)
 8000b26:	2202      	movs	r2, #2
 8000b28:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000b2a:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <MX_DFSDM2_Init+0xcc>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <MX_DFSDM2_Init+0xcc>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <MX_DFSDM2_Init+0xcc>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <MX_DFSDM2_Init+0xcc>)
 8000b3e:	2202      	movs	r2, #2
 8000b40:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <MX_DFSDM2_Init+0xcc>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <MX_DFSDM2_Init+0xcc>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel7.Init.Awd.Oversampling = 1;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <MX_DFSDM2_Init+0xcc>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel7.Init.Offset = 0;
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <MX_DFSDM2_Init+0xcc>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel7.Init.RightBitShift = 0x00;
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <MX_DFSDM2_Init+0xcc>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel7) != HAL_OK)
 8000b60:	4806      	ldr	r0, [pc, #24]	; (8000b7c <MX_DFSDM2_Init+0xcc>)
 8000b62:	f003 fe7b 	bl	800485c <HAL_DFSDM_ChannelInit>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_DFSDM2_Init+0xc0>
  {
    Error_Handler();
 8000b6c:	f001 f84a 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM2_Init 2 */

  /* USER CODE END DFSDM2_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20004c90 	.word	0x20004c90
 8000b78:	40016420 	.word	0x40016420
 8000b7c:	20004bc4 	.word	0x20004bc4
 8000b80:	400164e0 	.word	0x400164e0

08000b84 <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8000b88:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <MX_FMPI2C1_Init+0x60>)
 8000b8a:	4a17      	ldr	r2, [pc, #92]	; (8000be8 <MX_FMPI2C1_Init+0x64>)
 8000b8c:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00303D5B;
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <MX_FMPI2C1_Init+0x60>)
 8000b90:	4a16      	ldr	r2, [pc, #88]	; (8000bec <MX_FMPI2C1_Init+0x68>)
 8000b92:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <MX_FMPI2C1_Init+0x60>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8000b9a:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <MX_FMPI2C1_Init+0x60>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8000ba0:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <MX_FMPI2C1_Init+0x60>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <MX_FMPI2C1_Init+0x60>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8000bac:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <MX_FMPI2C1_Init+0x60>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <MX_FMPI2C1_Init+0x60>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8000bb8:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <MX_FMPI2C1_Init+0x60>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8000bbe:	4809      	ldr	r0, [pc, #36]	; (8000be4 <MX_FMPI2C1_Init+0x60>)
 8000bc0:	f003 ffc2 	bl	8004b48 <HAL_FMPI2C_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 8000bca:	f001 f81b 	bl	8001c04 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4804      	ldr	r0, [pc, #16]	; (8000be4 <MX_FMPI2C1_Init+0x60>)
 8000bd2:	f004 f848 	bl	8004c66 <HAL_FMPI2CEx_ConfigAnalogFilter>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8000bdc:	f001 f812 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20004d28 	.word	0x20004d28
 8000be8:	40006000 	.word	0x40006000
 8000bec:	00303d5b 	.word	0x00303d5b

08000bf0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <MX_I2C2_Init+0x50>)
 8000bf6:	4a13      	ldr	r2, [pc, #76]	; (8000c44 <MX_I2C2_Init+0x54>)
 8000bf8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_I2C2_Init+0x50>)
 8000bfc:	4a12      	ldr	r2, [pc, #72]	; (8000c48 <MX_I2C2_Init+0x58>)
 8000bfe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <MX_I2C2_Init+0x50>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_I2C2_Init+0x50>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_I2C2_Init+0x50>)
 8000c0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c12:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c14:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <MX_I2C2_Init+0x50>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_I2C2_Init+0x50>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c20:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <MX_I2C2_Init+0x50>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_I2C2_Init+0x50>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c2c:	4804      	ldr	r0, [pc, #16]	; (8000c40 <MX_I2C2_Init+0x50>)
 8000c2e:	f005 ff3d 	bl	8006aac <HAL_I2C_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c38:	f000 ffe4 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20004b70 	.word	0x20004b70
 8000c44:	40005800 	.word	0x40005800
 8000c48:	000186a0 	.word	0x000186a0

08000c4c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000c50:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <MX_I2S2_Init+0x54>)
 8000c52:	4a14      	ldr	r2, [pc, #80]	; (8000ca4 <MX_I2S2_Init+0x58>)
 8000c54:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000c56:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <MX_I2S2_Init+0x54>)
 8000c58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c5c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <MX_I2S2_Init+0x54>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000c64:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <MX_I2S2_Init+0x54>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <MX_I2S2_Init+0x54>)
 8000c6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c70:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <MX_I2S2_Init+0x54>)
 8000c74:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000c78:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <MX_I2S2_Init+0x54>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <MX_I2S2_Init+0x54>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <MX_I2S2_Init+0x54>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000c8c:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <MX_I2S2_Init+0x54>)
 8000c8e:	f006 f845 	bl	8006d1c <HAL_I2S_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000c98:	f000 ffb4 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20004ea0 	.word	0x20004ea0
 8000ca4:	40003800 	.word	0x40003800

08000ca8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <MX_QUADSPI_Init+0x50>)
 8000cae:	4a13      	ldr	r2, [pc, #76]	; (8000cfc <MX_QUADSPI_Init+0x54>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <MX_QUADSPI_Init+0x50>)
 8000cb4:	22ff      	movs	r2, #255	; 0xff
 8000cb6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_QUADSPI_Init+0x50>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <MX_QUADSPI_Init+0x50>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <MX_QUADSPI_Init+0x50>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000cca:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <MX_QUADSPI_Init+0x50>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <MX_QUADSPI_Init+0x50>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <MX_QUADSPI_Init+0x50>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <MX_QUADSPI_Init+0x50>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_QUADSPI_Init+0x50>)
 8000ce4:	f006 fcbe 	bl	8007664 <HAL_QSPI_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000cee:	f000 ff89 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20004ee8 	.word	0x20004ee8
 8000cfc:	a0001000 	.word	0xa0001000

08000d00 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <MX_SDIO_SD_Init+0x58>)
 8000d06:	4a15      	ldr	r2, [pc, #84]	; (8000d5c <MX_SDIO_SD_Init+0x5c>)
 8000d08:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000d0a:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <MX_SDIO_SD_Init+0x58>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <MX_SDIO_SD_Init+0x58>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <MX_SDIO_SD_Init+0x58>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000d1c:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <MX_SDIO_SD_Init+0x58>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000d22:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <MX_SDIO_SD_Init+0x58>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000d28:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <MX_SDIO_SD_Init+0x58>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8000d2e:	480a      	ldr	r0, [pc, #40]	; (8000d58 <MX_SDIO_SD_Init+0x58>)
 8000d30:	f007 fd76 	bl	8008820 <HAL_SD_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 8000d3a:	f000 ff63 	bl	8001c04 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8000d3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d42:	4805      	ldr	r0, [pc, #20]	; (8000d58 <MX_SDIO_SD_Init+0x58>)
 8000d44:	f007 ffa0 	bl	8008c88 <HAL_SD_ConfigWideBusOperation>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 8000d4e:	f000 ff59 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20004dd0 	.word	0x20004dd0
 8000d5c:	40012c00 	.word	0x40012c00

08000d60 <MX_UART10_Init>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <MX_UART10_Init+0x4c>)
 8000d66:	4a12      	ldr	r2, [pc, #72]	; (8000db0 <MX_UART10_Init+0x50>)
 8000d68:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8000d6a:	4b10      	ldr	r3, [pc, #64]	; (8000dac <MX_UART10_Init+0x4c>)
 8000d6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d70:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <MX_UART10_Init+0x4c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <MX_UART10_Init+0x4c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <MX_UART10_Init+0x4c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8000d84:	4b09      	ldr	r3, [pc, #36]	; (8000dac <MX_UART10_Init+0x4c>)
 8000d86:	220c      	movs	r2, #12
 8000d88:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <MX_UART10_Init+0x4c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <MX_UART10_Init+0x4c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8000d96:	4805      	ldr	r0, [pc, #20]	; (8000dac <MX_UART10_Init+0x4c>)
 8000d98:	f008 fd30 	bl	80097fc <HAL_UART_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_UART10_Init+0x46>
  {
    Error_Handler();
 8000da2:	f000 ff2f 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20004c00 	.word	0x20004c00
 8000db0:	40011c00 	.word	0x40011c00

08000db4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <MX_USART6_UART_Init+0x4c>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	; (8000e04 <MX_USART6_UART_Init+0x50>)
 8000dbc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000dbe:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <MX_USART6_UART_Init+0x4c>)
 8000dc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dc4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <MX_USART6_UART_Init+0x4c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <MX_USART6_UART_Init+0x4c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <MX_USART6_UART_Init+0x4c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <MX_USART6_UART_Init+0x4c>)
 8000dda:	220c      	movs	r2, #12
 8000ddc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <MX_USART6_UART_Init+0x4c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <MX_USART6_UART_Init+0x4c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000dea:	4805      	ldr	r0, [pc, #20]	; (8000e00 <MX_USART6_UART_Init+0x4c>)
 8000dec:	f008 fd06 	bl	80097fc <HAL_UART_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000df6:	f000 ff05 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20004e54 	.word	0x20004e54
 8000e04:	40011400 	.word	0x40011400

08000e08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08e      	sub	sp, #56	; 0x38
 8000e0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
 8000e1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	623b      	str	r3, [r7, #32]
 8000e22:	4bb1      	ldr	r3, [pc, #708]	; (80010e8 <MX_GPIO_Init+0x2e0>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4ab0      	ldr	r2, [pc, #704]	; (80010e8 <MX_GPIO_Init+0x2e0>)
 8000e28:	f043 0310 	orr.w	r3, r3, #16
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4bae      	ldr	r3, [pc, #696]	; (80010e8 <MX_GPIO_Init+0x2e0>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0310 	and.w	r3, r3, #16
 8000e36:	623b      	str	r3, [r7, #32]
 8000e38:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
 8000e3e:	4baa      	ldr	r3, [pc, #680]	; (80010e8 <MX_GPIO_Init+0x2e0>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4aa9      	ldr	r2, [pc, #676]	; (80010e8 <MX_GPIO_Init+0x2e0>)
 8000e44:	f043 0304 	orr.w	r3, r3, #4
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4ba7      	ldr	r3, [pc, #668]	; (80010e8 <MX_GPIO_Init+0x2e0>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0304 	and.w	r3, r3, #4
 8000e52:	61fb      	str	r3, [r7, #28]
 8000e54:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	61bb      	str	r3, [r7, #24]
 8000e5a:	4ba3      	ldr	r3, [pc, #652]	; (80010e8 <MX_GPIO_Init+0x2e0>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4aa2      	ldr	r2, [pc, #648]	; (80010e8 <MX_GPIO_Init+0x2e0>)
 8000e60:	f043 0320 	orr.w	r3, r3, #32
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4ba0      	ldr	r3, [pc, #640]	; (80010e8 <MX_GPIO_Init+0x2e0>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0320 	and.w	r3, r3, #32
 8000e6e:	61bb      	str	r3, [r7, #24]
 8000e70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	4b9c      	ldr	r3, [pc, #624]	; (80010e8 <MX_GPIO_Init+0x2e0>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a9b      	ldr	r2, [pc, #620]	; (80010e8 <MX_GPIO_Init+0x2e0>)
 8000e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b99      	ldr	r3, [pc, #612]	; (80010e8 <MX_GPIO_Init+0x2e0>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	4b95      	ldr	r3, [pc, #596]	; (80010e8 <MX_GPIO_Init+0x2e0>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a94      	ldr	r2, [pc, #592]	; (80010e8 <MX_GPIO_Init+0x2e0>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b92      	ldr	r3, [pc, #584]	; (80010e8 <MX_GPIO_Init+0x2e0>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	4b8e      	ldr	r3, [pc, #568]	; (80010e8 <MX_GPIO_Init+0x2e0>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a8d      	ldr	r2, [pc, #564]	; (80010e8 <MX_GPIO_Init+0x2e0>)
 8000eb4:	f043 0302 	orr.w	r3, r3, #2
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b8b      	ldr	r3, [pc, #556]	; (80010e8 <MX_GPIO_Init+0x2e0>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	4b87      	ldr	r3, [pc, #540]	; (80010e8 <MX_GPIO_Init+0x2e0>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a86      	ldr	r2, [pc, #536]	; (80010e8 <MX_GPIO_Init+0x2e0>)
 8000ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b84      	ldr	r3, [pc, #528]	; (80010e8 <MX_GPIO_Init+0x2e0>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	4b80      	ldr	r3, [pc, #512]	; (80010e8 <MX_GPIO_Init+0x2e0>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a7f      	ldr	r2, [pc, #508]	; (80010e8 <MX_GPIO_Init+0x2e0>)
 8000eec:	f043 0308 	orr.w	r3, r3, #8
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b7d      	ldr	r3, [pc, #500]	; (80010e8 <MX_GPIO_Init+0x2e0>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0308 	and.w	r3, r3, #8
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2138      	movs	r1, #56	; 0x38
 8000f02:	487a      	ldr	r0, [pc, #488]	; (80010ec <MX_GPIO_Init+0x2e4>)
 8000f04:	f004 f8a4 	bl	8005050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2120      	movs	r1, #32
 8000f0c:	4878      	ldr	r0, [pc, #480]	; (80010f0 <MX_GPIO_Init+0x2e8>)
 8000f0e:	f004 f89f 	bl	8005050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin, GPIO_PIN_RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000f18:	4876      	ldr	r0, [pc, #472]	; (80010f4 <MX_GPIO_Init+0x2ec>)
 8000f1a:	f004 f899 	bl	8005050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f24:	4874      	ldr	r0, [pc, #464]	; (80010f8 <MX_GPIO_Init+0x2f0>)
 8000f26:	f004 f893 	bl	8005050 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 8000f2a:	2338      	movs	r3, #56	; 0x38
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2300      	movs	r3, #0
 8000f38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3e:	4619      	mov	r1, r3
 8000f40:	486a      	ldr	r0, [pc, #424]	; (80010ec <MX_GPIO_Init+0x2e4>)
 8000f42:	f003 fedb 	bl	8004cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8000f46:	2340      	movs	r3, #64	; 0x40
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8000f56:	2303      	movs	r3, #3
 8000f58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4862      	ldr	r0, [pc, #392]	; (80010ec <MX_GPIO_Init+0x2e4>)
 8000f62:	f003 fecb 	bl	8004cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8000f66:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4860      	ldr	r0, [pc, #384]	; (80010fc <MX_GPIO_Init+0x2f4>)
 8000f7c:	f003 febe 	bl	8004cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8000f80:	2302      	movs	r3, #2
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f84:	4b5e      	ldr	r3, [pc, #376]	; (8001100 <MX_GPIO_Init+0x2f8>)
 8000f86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f90:	4619      	mov	r1, r3
 8000f92:	4857      	ldr	r0, [pc, #348]	; (80010f0 <MX_GPIO_Init+0x2e8>)
 8000f94:	f003 feb2 	bl	8004cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f9c:	4b58      	ldr	r3, [pc, #352]	; (8001100 <MX_GPIO_Init+0x2f8>)
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4856      	ldr	r0, [pc, #344]	; (8001104 <MX_GPIO_Init+0x2fc>)
 8000fac:	f003 fea6 	bl	8004cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 8000fb0:	2320      	movs	r3, #32
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	484a      	ldr	r0, [pc, #296]	; (80010f0 <MX_GPIO_Init+0x2e8>)
 8000fc8:	f003 fe98 	bl	8004cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4843      	ldr	r0, [pc, #268]	; (80010f4 <MX_GPIO_Init+0x2ec>)
 8000fe8:	f003 fe88 	bl	8004cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8000fec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ff2:	4b43      	ldr	r3, [pc, #268]	; (8001100 <MX_GPIO_Init+0x2f8>)
 8000ff4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffe:	4619      	mov	r1, r3
 8001000:	483e      	ldr	r0, [pc, #248]	; (80010fc <MX_GPIO_Init+0x2f4>)
 8001002:	f003 fe7b 	bl	8004cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 8001006:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2302      	movs	r3, #2
 800100e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001014:	2303      	movs	r3, #3
 8001016:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001018:	2307      	movs	r3, #7
 800101a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 800101c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001020:	4619      	mov	r1, r3
 8001022:	4834      	ldr	r0, [pc, #208]	; (80010f4 <MX_GPIO_Init+0x2ec>)
 8001024:	f003 fe6a 	bl	8004cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin;
 8001028:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102e:	2301      	movs	r3, #1
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103e:	4619      	mov	r1, r3
 8001040:	482c      	ldr	r0, [pc, #176]	; (80010f4 <MX_GPIO_Init+0x2ec>)
 8001042:	f003 fe5b 	bl	8004cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001046:	f44f 7380 	mov.w	r3, #256	; 0x100
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104c:	2301      	movs	r3, #1
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105c:	4619      	mov	r1, r3
 800105e:	4826      	ldr	r0, [pc, #152]	; (80010f8 <MX_GPIO_Init+0x2f0>)
 8001060:	f003 fe4c 	bl	8004cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D10_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin;
 8001064:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001076:	2301      	movs	r3, #1
 8001078:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 800107a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107e:	4619      	mov	r1, r3
 8001080:	4820      	ldr	r0, [pc, #128]	; (8001104 <MX_GPIO_Init+0x2fc>)
 8001082:	f003 fe3b 	bl	8004cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001086:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108c:	2300      	movs	r3, #0
 800108e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001098:	4619      	mov	r1, r3
 800109a:	4817      	ldr	r0, [pc, #92]	; (80010f8 <MX_GPIO_Init+0x2f0>)
 800109c:	f003 fe2e 	bl	8004cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_INT_Pin */
  GPIO_InitStruct.Pin = CODEC_INT_Pin;
 80010a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010a6:	4b16      	ldr	r3, [pc, #88]	; (8001100 <MX_GPIO_Init+0x2f8>)
 80010a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CODEC_INT_GPIO_Port, &GPIO_InitStruct);
 80010ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b2:	4619      	mov	r1, r3
 80010b4:	4810      	ldr	r0, [pc, #64]	; (80010f8 <MX_GPIO_Init+0x2f0>)
 80010b6:	f003 fe21 	bl	8004cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 80010ba:	2330      	movs	r3, #48	; 0x30
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010ca:	2306      	movs	r3, #6
 80010cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d2:	4619      	mov	r1, r3
 80010d4:	4807      	ldr	r0, [pc, #28]	; (80010f4 <MX_GPIO_Init+0x2ec>)
 80010d6:	f003 fe11 	bl	8004cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 80010da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e0:	2302      	movs	r3, #2
 80010e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80010e4:	e010      	b.n	8001108 <MX_GPIO_Init+0x300>
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40020800 	.word	0x40020800
 80010f4:	40020400 	.word	0x40020400
 80010f8:	40021800 	.word	0x40021800
 80010fc:	40021400 	.word	0x40021400
 8001100:	10110000 	.word	0x10110000
 8001104:	40020000 	.word	0x40020000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2300      	movs	r3, #0
 800110e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001110:	2302      	movs	r3, #2
 8001112:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8001114:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001118:	4619      	mov	r1, r3
 800111a:	4803      	ldr	r0, [pc, #12]	; (8001128 <MX_GPIO_Init+0x320>)
 800111c:	f003 fdee 	bl	8004cfc <HAL_GPIO_Init>

}
 8001120:	bf00      	nop
 8001122:	3738      	adds	r7, #56	; 0x38
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40020400 	.word	0x40020400

0800112c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
 8001140:	615a      	str	r2, [r3, #20]
 8001142:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001144:	4b4f      	ldr	r3, [pc, #316]	; (8001284 <MX_FSMC_Init+0x158>)
 8001146:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800114a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800114c:	4b4d      	ldr	r3, [pc, #308]	; (8001284 <MX_FSMC_Init+0x158>)
 800114e:	4a4e      	ldr	r2, [pc, #312]	; (8001288 <MX_FSMC_Init+0x15c>)
 8001150:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001152:	4b4c      	ldr	r3, [pc, #304]	; (8001284 <MX_FSMC_Init+0x158>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001158:	4b4a      	ldr	r3, [pc, #296]	; (8001284 <MX_FSMC_Init+0x158>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800115e:	4b49      	ldr	r3, [pc, #292]	; (8001284 <MX_FSMC_Init+0x158>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001164:	4b47      	ldr	r3, [pc, #284]	; (8001284 <MX_FSMC_Init+0x158>)
 8001166:	2210      	movs	r2, #16
 8001168:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800116a:	4b46      	ldr	r3, [pc, #280]	; (8001284 <MX_FSMC_Init+0x158>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001170:	4b44      	ldr	r3, [pc, #272]	; (8001284 <MX_FSMC_Init+0x158>)
 8001172:	2200      	movs	r2, #0
 8001174:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001176:	4b43      	ldr	r3, [pc, #268]	; (8001284 <MX_FSMC_Init+0x158>)
 8001178:	2200      	movs	r2, #0
 800117a:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800117c:	4b41      	ldr	r3, [pc, #260]	; (8001284 <MX_FSMC_Init+0x158>)
 800117e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001182:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001184:	4b3f      	ldr	r3, [pc, #252]	; (8001284 <MX_FSMC_Init+0x158>)
 8001186:	2200      	movs	r2, #0
 8001188:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800118a:	4b3e      	ldr	r3, [pc, #248]	; (8001284 <MX_FSMC_Init+0x158>)
 800118c:	2200      	movs	r2, #0
 800118e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001190:	4b3c      	ldr	r3, [pc, #240]	; (8001284 <MX_FSMC_Init+0x158>)
 8001192:	2200      	movs	r2, #0
 8001194:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001196:	4b3b      	ldr	r3, [pc, #236]	; (8001284 <MX_FSMC_Init+0x158>)
 8001198:	2200      	movs	r2, #0
 800119a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800119c:	4b39      	ldr	r3, [pc, #228]	; (8001284 <MX_FSMC_Init+0x158>)
 800119e:	2200      	movs	r2, #0
 80011a0:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 80011a2:	4b38      	ldr	r3, [pc, #224]	; (8001284 <MX_FSMC_Init+0x158>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80011a8:	4b36      	ldr	r3, [pc, #216]	; (8001284 <MX_FSMC_Init+0x158>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80011ae:	230f      	movs	r3, #15
 80011b0:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80011b2:	230f      	movs	r3, #15
 80011b4:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80011b6:	23ff      	movs	r3, #255	; 0xff
 80011b8:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80011ba:	230f      	movs	r3, #15
 80011bc:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80011be:	2310      	movs	r3, #16
 80011c0:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80011c2:	2311      	movs	r3, #17
 80011c4:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	2200      	movs	r2, #0
 80011ce:	4619      	mov	r1, r3
 80011d0:	482c      	ldr	r0, [pc, #176]	; (8001284 <MX_FSMC_Init+0x158>)
 80011d2:	f008 f891 	bl	80092f8 <HAL_SRAM_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_FSMC_Init+0xb4>
  {
    Error_Handler( );
 80011dc:	f000 fd12 	bl	8001c04 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 80011e0:	4b2a      	ldr	r3, [pc, #168]	; (800128c <MX_FSMC_Init+0x160>)
 80011e2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80011e6:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80011e8:	4b28      	ldr	r3, [pc, #160]	; (800128c <MX_FSMC_Init+0x160>)
 80011ea:	4a27      	ldr	r2, [pc, #156]	; (8001288 <MX_FSMC_Init+0x15c>)
 80011ec:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 80011ee:	4b27      	ldr	r3, [pc, #156]	; (800128c <MX_FSMC_Init+0x160>)
 80011f0:	2204      	movs	r2, #4
 80011f2:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80011f4:	4b25      	ldr	r3, [pc, #148]	; (800128c <MX_FSMC_Init+0x160>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80011fa:	4b24      	ldr	r3, [pc, #144]	; (800128c <MX_FSMC_Init+0x160>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001200:	4b22      	ldr	r3, [pc, #136]	; (800128c <MX_FSMC_Init+0x160>)
 8001202:	2210      	movs	r2, #16
 8001204:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001206:	4b21      	ldr	r3, [pc, #132]	; (800128c <MX_FSMC_Init+0x160>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800120c:	4b1f      	ldr	r3, [pc, #124]	; (800128c <MX_FSMC_Init+0x160>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001212:	4b1e      	ldr	r3, [pc, #120]	; (800128c <MX_FSMC_Init+0x160>)
 8001214:	2200      	movs	r2, #0
 8001216:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001218:	4b1c      	ldr	r3, [pc, #112]	; (800128c <MX_FSMC_Init+0x160>)
 800121a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800121e:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001220:	4b1a      	ldr	r3, [pc, #104]	; (800128c <MX_FSMC_Init+0x160>)
 8001222:	2200      	movs	r2, #0
 8001224:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001226:	4b19      	ldr	r3, [pc, #100]	; (800128c <MX_FSMC_Init+0x160>)
 8001228:	2200      	movs	r2, #0
 800122a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800122c:	4b17      	ldr	r3, [pc, #92]	; (800128c <MX_FSMC_Init+0x160>)
 800122e:	2200      	movs	r2, #0
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001232:	4b16      	ldr	r3, [pc, #88]	; (800128c <MX_FSMC_Init+0x160>)
 8001234:	2200      	movs	r2, #0
 8001236:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <MX_FSMC_Init+0x160>)
 800123a:	2200      	movs	r2, #0
 800123c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 800123e:	4b13      	ldr	r3, [pc, #76]	; (800128c <MX_FSMC_Init+0x160>)
 8001240:	2200      	movs	r2, #0
 8001242:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001244:	4b11      	ldr	r3, [pc, #68]	; (800128c <MX_FSMC_Init+0x160>)
 8001246:	2200      	movs	r2, #0
 8001248:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 800124a:	230f      	movs	r3, #15
 800124c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800124e:	230f      	movs	r3, #15
 8001250:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001252:	23ff      	movs	r3, #255	; 0xff
 8001254:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001256:	230f      	movs	r3, #15
 8001258:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800125a:	2310      	movs	r3, #16
 800125c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800125e:	2311      	movs	r3, #17
 8001260:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	2200      	movs	r2, #0
 800126a:	4619      	mov	r1, r3
 800126c:	4807      	ldr	r0, [pc, #28]	; (800128c <MX_FSMC_Init+0x160>)
 800126e:	f008 f843 	bl	80092f8 <HAL_SRAM_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_FSMC_Init+0x150>
  {
    Error_Handler( );
 8001278:	f000 fcc4 	bl	8001c04 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800127c:	bf00      	nop
 800127e:	3720      	adds	r7, #32
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20004c40 	.word	0x20004c40
 8001288:	a0000104 	.word	0xa0000104
 800128c:	20004d7c 	.word	0x20004d7c

08001290 <StartGameClock>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartGameClock */
void StartGameClock(void *argument)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001298:	f010 fa90 	bl	80117bc <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osStatus_t status = osMutexAcquire(myBallMutexHandle, osWaitForever);
 800129c:	4b70      	ldr	r3, [pc, #448]	; (8001460 <StartGameClock+0x1d0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f04f 31ff 	mov.w	r1, #4294967295
 80012a4:	4618      	mov	r0, r3
 80012a6:	f00d f8d5 	bl	800e454 <osMutexAcquire>
 80012aa:	60f8      	str	r0, [r7, #12]

	  bool yellowBtn = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_6);
 80012ac:	2140      	movs	r1, #64	; 0x40
 80012ae:	486d      	ldr	r0, [pc, #436]	; (8001464 <StartGameClock+0x1d4>)
 80012b0:	f003 feb6 	bl	8005020 <HAL_GPIO_ReadPin>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	bf14      	ite	ne
 80012ba:	2301      	movne	r3, #1
 80012bc:	2300      	moveq	r3, #0
 80012be:	72fb      	strb	r3, [r7, #11]
	  bool blueBtn = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7);
 80012c0:	2180      	movs	r1, #128	; 0x80
 80012c2:	4868      	ldr	r0, [pc, #416]	; (8001464 <StartGameClock+0x1d4>)
 80012c4:	f003 feac 	bl	8005020 <HAL_GPIO_ReadPin>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	bf14      	ite	ne
 80012ce:	2301      	movne	r3, #1
 80012d0:	2300      	moveq	r3, #0
 80012d2:	72bb      	strb	r3, [r7, #10]
	  bool greenBtn = HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_13);
 80012d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d8:	4863      	ldr	r0, [pc, #396]	; (8001468 <StartGameClock+0x1d8>)
 80012da:	f003 fea1 	bl	8005020 <HAL_GPIO_ReadPin>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	bf14      	ite	ne
 80012e4:	2301      	movne	r3, #1
 80012e6:	2300      	moveq	r3, #0
 80012e8:	727b      	strb	r3, [r7, #9]
	  bool redBtn = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_10);
 80012ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012ee:	485d      	ldr	r0, [pc, #372]	; (8001464 <StartGameClock+0x1d4>)
 80012f0:	f003 fe96 	bl	8005020 <HAL_GPIO_ReadPin>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	bf14      	ite	ne
 80012fa:	2301      	movne	r3, #1
 80012fc:	2300      	moveq	r3, #0
 80012fe:	723b      	strb	r3, [r7, #8]


	  if(ballDirection){
 8001300:	4b5a      	ldr	r3, [pc, #360]	; (800146c <StartGameClock+0x1dc>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 80ff 	beq.w	8001508 <StartGameClock+0x278>
		  ballxPrev = ballx;
 800130a:	4b59      	ldr	r3, [pc, #356]	; (8001470 <StartGameClock+0x1e0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a59      	ldr	r2, [pc, #356]	; (8001474 <StartGameClock+0x1e4>)
 8001310:	6013      	str	r3, [r2, #0]
		  ballyPrev = bally;
 8001312:	4b59      	ldr	r3, [pc, #356]	; (8001478 <StartGameClock+0x1e8>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a59      	ldr	r2, [pc, #356]	; (800147c <StartGameClock+0x1ec>)
 8001318:	6013      	str	r3, [r2, #0]
		  ballx += 1;
 800131a:	4b55      	ldr	r3, [pc, #340]	; (8001470 <StartGameClock+0x1e0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	3301      	adds	r3, #1
 8001320:	4a53      	ldr	r2, [pc, #332]	; (8001470 <StartGameClock+0x1e0>)
 8001322:	6013      	str	r3, [r2, #0]
		  bally += ballyDirection;
 8001324:	4b54      	ldr	r3, [pc, #336]	; (8001478 <StartGameClock+0x1e8>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b55      	ldr	r3, [pc, #340]	; (8001480 <StartGameClock+0x1f0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4413      	add	r3, r2
 800132e:	4a52      	ldr	r2, [pc, #328]	; (8001478 <StartGameClock+0x1e8>)
 8001330:	6013      	str	r3, [r2, #0]
		  if(ballyDirection == 1){
 8001332:	4b53      	ldr	r3, [pc, #332]	; (8001480 <StartGameClock+0x1f0>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d10a      	bne.n	8001350 <StartGameClock+0xc0>
			  if(bally + 3 >= bottomBordery1){
 800133a:	4b4f      	ldr	r3, [pc, #316]	; (8001478 <StartGameClock+0x1e8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	1cda      	adds	r2, r3, #3
 8001340:	4b50      	ldr	r3, [pc, #320]	; (8001484 <StartGameClock+0x1f4>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	429a      	cmp	r2, r3
 8001346:	db03      	blt.n	8001350 <StartGameClock+0xc0>
				  ballyDirection = -1;
 8001348:	4b4d      	ldr	r3, [pc, #308]	; (8001480 <StartGameClock+0x1f0>)
 800134a:	f04f 32ff 	mov.w	r2, #4294967295
 800134e:	601a      	str	r2, [r3, #0]
			  }
		  }
		  if(ballyDirection == - 1){
 8001350:	4b4b      	ldr	r3, [pc, #300]	; (8001480 <StartGameClock+0x1f0>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001358:	d109      	bne.n	800136e <StartGameClock+0xde>
			  if(bally - 3 <= topBordery1){
 800135a:	4b47      	ldr	r3, [pc, #284]	; (8001478 <StartGameClock+0x1e8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	1eda      	subs	r2, r3, #3
 8001360:	4b49      	ldr	r3, [pc, #292]	; (8001488 <StartGameClock+0x1f8>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	429a      	cmp	r2, r3
 8001366:	dc02      	bgt.n	800136e <StartGameClock+0xde>
				  ballyDirection = 1;
 8001368:	4b45      	ldr	r3, [pc, #276]	; (8001480 <StartGameClock+0x1f0>)
 800136a:	2201      	movs	r2, #1
 800136c:	601a      	str	r2, [r3, #0]
			  }
		  }
		  if((((ballx + ballRad + 2) > rightPaddlex1) && ((bally + ballRad) < rightPaddley2)
 800136e:	4b40      	ldr	r3, [pc, #256]	; (8001470 <StartGameClock+0x1e0>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	4b46      	ldr	r3, [pc, #280]	; (800148c <StartGameClock+0x1fc>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4413      	add	r3, r2
 8001378:	1c9a      	adds	r2, r3, #2
 800137a:	4b45      	ldr	r3, [pc, #276]	; (8001490 <StartGameClock+0x200>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	429a      	cmp	r2, r3
 8001380:	dd21      	ble.n	80013c6 <StartGameClock+0x136>
 8001382:	4b3d      	ldr	r3, [pc, #244]	; (8001478 <StartGameClock+0x1e8>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	4b41      	ldr	r3, [pc, #260]	; (800148c <StartGameClock+0x1fc>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	441a      	add	r2, r3
 800138c:	4b41      	ldr	r3, [pc, #260]	; (8001494 <StartGameClock+0x204>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	429a      	cmp	r2, r3
 8001392:	da18      	bge.n	80013c6 <StartGameClock+0x136>
				  && ((bally - ballRad) > rightPaddley1)) && !greenBtn && !redBtn){
 8001394:	4b38      	ldr	r3, [pc, #224]	; (8001478 <StartGameClock+0x1e8>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b3c      	ldr	r3, [pc, #240]	; (800148c <StartGameClock+0x1fc>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	1ad2      	subs	r2, r2, r3
 800139e:	4b3e      	ldr	r3, [pc, #248]	; (8001498 <StartGameClock+0x208>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	dd0f      	ble.n	80013c6 <StartGameClock+0x136>
 80013a6:	7a7b      	ldrb	r3, [r7, #9]
 80013a8:	f083 0301 	eor.w	r3, r3, #1
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d009      	beq.n	80013c6 <StartGameClock+0x136>
 80013b2:	7a3b      	ldrb	r3, [r7, #8]
 80013b4:	f083 0301 	eor.w	r3, r3, #1
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <StartGameClock+0x136>
			  ballDirection = false;
 80013be:	4b2b      	ldr	r3, [pc, #172]	; (800146c <StartGameClock+0x1dc>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
 80013c4:	e0a0      	b.n	8001508 <StartGameClock+0x278>
		  }
		  else if((((ballx + ballRad + 2) > rightPaddlex1) && ((bally + ballRad) < rightPaddley2)
 80013c6:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <StartGameClock+0x1e0>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	4b30      	ldr	r3, [pc, #192]	; (800148c <StartGameClock+0x1fc>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4413      	add	r3, r2
 80013d0:	1c9a      	adds	r2, r3, #2
 80013d2:	4b2f      	ldr	r3, [pc, #188]	; (8001490 <StartGameClock+0x200>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	dd1b      	ble.n	8001412 <StartGameClock+0x182>
 80013da:	4b27      	ldr	r3, [pc, #156]	; (8001478 <StartGameClock+0x1e8>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	4b2b      	ldr	r3, [pc, #172]	; (800148c <StartGameClock+0x1fc>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	441a      	add	r2, r3
 80013e4:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <StartGameClock+0x204>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	da12      	bge.n	8001412 <StartGameClock+0x182>
		  				  && ((bally - ballRad) > rightPaddley1)) && (greenBtn)){
 80013ec:	4b22      	ldr	r3, [pc, #136]	; (8001478 <StartGameClock+0x1e8>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b26      	ldr	r3, [pc, #152]	; (800148c <StartGameClock+0x1fc>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	1ad2      	subs	r2, r2, r3
 80013f6:	4b28      	ldr	r3, [pc, #160]	; (8001498 <StartGameClock+0x208>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	dd09      	ble.n	8001412 <StartGameClock+0x182>
 80013fe:	7a7b      	ldrb	r3, [r7, #9]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d006      	beq.n	8001412 <StartGameClock+0x182>
		  			ballDirection = false;
 8001404:	4b19      	ldr	r3, [pc, #100]	; (800146c <StartGameClock+0x1dc>)
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]
		  			ballyDirection = 1;
 800140a:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <StartGameClock+0x1f0>)
 800140c:	2201      	movs	r2, #1
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	e07a      	b.n	8001508 <StartGameClock+0x278>
		  		  }
		  else if((((ballx + ballRad + 2) > rightPaddlex1) && ((bally + ballRad) < rightPaddley2)
 8001412:	4b17      	ldr	r3, [pc, #92]	; (8001470 <StartGameClock+0x1e0>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	4b1d      	ldr	r3, [pc, #116]	; (800148c <StartGameClock+0x1fc>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4413      	add	r3, r2
 800141c:	1c9a      	adds	r2, r3, #2
 800141e:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <StartGameClock+0x200>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	429a      	cmp	r2, r3
 8001424:	dd3a      	ble.n	800149c <StartGameClock+0x20c>
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <StartGameClock+0x1e8>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	4b18      	ldr	r3, [pc, #96]	; (800148c <StartGameClock+0x1fc>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	441a      	add	r2, r3
 8001430:	4b18      	ldr	r3, [pc, #96]	; (8001494 <StartGameClock+0x204>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	429a      	cmp	r2, r3
 8001436:	da31      	bge.n	800149c <StartGameClock+0x20c>
		  				  && ((bally - ballRad) > rightPaddley1)) && (redBtn)){
 8001438:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <StartGameClock+0x1e8>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b13      	ldr	r3, [pc, #76]	; (800148c <StartGameClock+0x1fc>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	1ad2      	subs	r2, r2, r3
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <StartGameClock+0x208>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	429a      	cmp	r2, r3
 8001448:	dd28      	ble.n	800149c <StartGameClock+0x20c>
 800144a:	7a3b      	ldrb	r3, [r7, #8]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d025      	beq.n	800149c <StartGameClock+0x20c>
		  			ballDirection = false;
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <StartGameClock+0x1dc>)
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]
		  			ballyDirection = -1;
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <StartGameClock+0x1f0>)
 8001458:	f04f 32ff 	mov.w	r2, #4294967295
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	e053      	b.n	8001508 <StartGameClock+0x278>
 8001460:	20004e94 	.word	0x20004e94
 8001464:	40021400 	.word	0x40021400
 8001468:	40021800 	.word	0x40021800
 800146c:	200000a0 	.word	0x200000a0
 8001470:	2000008c 	.word	0x2000008c
 8001474:	20000094 	.word	0x20000094
 8001478:	20000090 	.word	0x20000090
 800147c:	20000098 	.word	0x20000098
 8001480:	200001c4 	.word	0x200001c4
 8001484:	20000034 	.word	0x20000034
 8001488:	20000004 	.word	0x20000004
 800148c:	2000009c 	.word	0x2000009c
 8001490:	20000064 	.word	0x20000064
 8001494:	20000070 	.word	0x20000070
 8001498:	20000068 	.word	0x20000068
		  		  }
		  else if((ballx + ballRad + 1) == rightBorderx1){
 800149c:	4b94      	ldr	r3, [pc, #592]	; (80016f0 <StartGameClock+0x460>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b94      	ldr	r3, [pc, #592]	; (80016f4 <StartGameClock+0x464>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4413      	add	r3, r2
 80014a6:	1c5a      	adds	r2, r3, #1
 80014a8:	4b93      	ldr	r3, [pc, #588]	; (80016f8 <StartGameClock+0x468>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d12b      	bne.n	8001508 <StartGameClock+0x278>
			  ballDirection = false;
 80014b0:	4b92      	ldr	r3, [pc, #584]	; (80016fc <StartGameClock+0x46c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
			  scored = true;
 80014b6:	4b92      	ldr	r3, [pc, #584]	; (8001700 <StartGameClock+0x470>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	701a      	strb	r2, [r3, #0]
			  p1Score += 1;
 80014bc:	4b91      	ldr	r3, [pc, #580]	; (8001704 <StartGameClock+0x474>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	3301      	adds	r3, #1
 80014c2:	4a90      	ldr	r2, [pc, #576]	; (8001704 <StartGameClock+0x474>)
 80014c4:	6013      	str	r3, [r2, #0]
			  ballx = 120;
 80014c6:	4b8a      	ldr	r3, [pc, #552]	; (80016f0 <StartGameClock+0x460>)
 80014c8:	2278      	movs	r2, #120	; 0x78
 80014ca:	601a      	str	r2, [r3, #0]
			  bally = 120;
 80014cc:	4b8e      	ldr	r3, [pc, #568]	; (8001708 <StartGameClock+0x478>)
 80014ce:	2278      	movs	r2, #120	; 0x78
 80014d0:	601a      	str	r2, [r3, #0]
			  ballyDirection = 0;
 80014d2:	4b8e      	ldr	r3, [pc, #568]	; (800170c <StartGameClock+0x47c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]

			  leftPaddlex1 = 20;
 80014d8:	4b8d      	ldr	r3, [pc, #564]	; (8001710 <StartGameClock+0x480>)
 80014da:	2214      	movs	r2, #20
 80014dc:	601a      	str	r2, [r3, #0]
			  leftPaddley1 = 110;
 80014de:	4b8d      	ldr	r3, [pc, #564]	; (8001714 <StartGameClock+0x484>)
 80014e0:	226e      	movs	r2, #110	; 0x6e
 80014e2:	601a      	str	r2, [r3, #0]
			  leftPaddlex2 = 20;
 80014e4:	4b8c      	ldr	r3, [pc, #560]	; (8001718 <StartGameClock+0x488>)
 80014e6:	2214      	movs	r2, #20
 80014e8:	601a      	str	r2, [r3, #0]
			  leftPaddley2 = 140;
 80014ea:	4b8c      	ldr	r3, [pc, #560]	; (800171c <StartGameClock+0x48c>)
 80014ec:	228c      	movs	r2, #140	; 0x8c
 80014ee:	601a      	str	r2, [r3, #0]

			  rightPaddlex1 = 220;
 80014f0:	4b8b      	ldr	r3, [pc, #556]	; (8001720 <StartGameClock+0x490>)
 80014f2:	22dc      	movs	r2, #220	; 0xdc
 80014f4:	601a      	str	r2, [r3, #0]
			  rightPaddley1 = 110;
 80014f6:	4b8b      	ldr	r3, [pc, #556]	; (8001724 <StartGameClock+0x494>)
 80014f8:	226e      	movs	r2, #110	; 0x6e
 80014fa:	601a      	str	r2, [r3, #0]
			  rightPaddlex2 = 220;
 80014fc:	4b8a      	ldr	r3, [pc, #552]	; (8001728 <StartGameClock+0x498>)
 80014fe:	22dc      	movs	r2, #220	; 0xdc
 8001500:	601a      	str	r2, [r3, #0]
			  rightPaddley2 = 140;
 8001502:	4b8a      	ldr	r3, [pc, #552]	; (800172c <StartGameClock+0x49c>)
 8001504:	228c      	movs	r2, #140	; 0x8c
 8001506:	601a      	str	r2, [r3, #0]
		  }
	  }
	  if(!ballDirection){
 8001508:	4b7c      	ldr	r3, [pc, #496]	; (80016fc <StartGameClock+0x46c>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	f083 0301 	eor.w	r3, r3, #1
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	f000 80e1 	beq.w	80016da <StartGameClock+0x44a>
		  ballxPrev = ballx;
 8001518:	4b75      	ldr	r3, [pc, #468]	; (80016f0 <StartGameClock+0x460>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a84      	ldr	r2, [pc, #528]	; (8001730 <StartGameClock+0x4a0>)
 800151e:	6013      	str	r3, [r2, #0]
		  ballyPrev = bally;
 8001520:	4b79      	ldr	r3, [pc, #484]	; (8001708 <StartGameClock+0x478>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a83      	ldr	r2, [pc, #524]	; (8001734 <StartGameClock+0x4a4>)
 8001526:	6013      	str	r3, [r2, #0]
		  ballx += -1;
 8001528:	4b71      	ldr	r3, [pc, #452]	; (80016f0 <StartGameClock+0x460>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	3b01      	subs	r3, #1
 800152e:	4a70      	ldr	r2, [pc, #448]	; (80016f0 <StartGameClock+0x460>)
 8001530:	6013      	str	r3, [r2, #0]
		  bally += ballyDirection;
 8001532:	4b75      	ldr	r3, [pc, #468]	; (8001708 <StartGameClock+0x478>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	4b75      	ldr	r3, [pc, #468]	; (800170c <StartGameClock+0x47c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4413      	add	r3, r2
 800153c:	4a72      	ldr	r2, [pc, #456]	; (8001708 <StartGameClock+0x478>)
 800153e:	6013      	str	r3, [r2, #0]
		  if(ballyDirection == 1){
 8001540:	4b72      	ldr	r3, [pc, #456]	; (800170c <StartGameClock+0x47c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d10a      	bne.n	800155e <StartGameClock+0x2ce>
			  if(bally + 3 >= bottomBordery1){
 8001548:	4b6f      	ldr	r3, [pc, #444]	; (8001708 <StartGameClock+0x478>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	1cda      	adds	r2, r3, #3
 800154e:	4b7a      	ldr	r3, [pc, #488]	; (8001738 <StartGameClock+0x4a8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	429a      	cmp	r2, r3
 8001554:	db03      	blt.n	800155e <StartGameClock+0x2ce>
				  ballyDirection = -1;
 8001556:	4b6d      	ldr	r3, [pc, #436]	; (800170c <StartGameClock+0x47c>)
 8001558:	f04f 32ff 	mov.w	r2, #4294967295
 800155c:	601a      	str	r2, [r3, #0]
			  }
		  }
		  if(ballyDirection == -1){
 800155e:	4b6b      	ldr	r3, [pc, #428]	; (800170c <StartGameClock+0x47c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001566:	d109      	bne.n	800157c <StartGameClock+0x2ec>
			  if(bally - 3 <= topBordery1){
 8001568:	4b67      	ldr	r3, [pc, #412]	; (8001708 <StartGameClock+0x478>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	1eda      	subs	r2, r3, #3
 800156e:	4b73      	ldr	r3, [pc, #460]	; (800173c <StartGameClock+0x4ac>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	429a      	cmp	r2, r3
 8001574:	dc02      	bgt.n	800157c <StartGameClock+0x2ec>
				  ballyDirection = 1;
 8001576:	4b65      	ldr	r3, [pc, #404]	; (800170c <StartGameClock+0x47c>)
 8001578:	2201      	movs	r2, #1
 800157a:	601a      	str	r2, [r3, #0]
			  }
		  }
		  if((((ballx - ballRad - 2) < leftPaddlex1) && ((bally + ballRad) < leftPaddley2)
 800157c:	4b5c      	ldr	r3, [pc, #368]	; (80016f0 <StartGameClock+0x460>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b5c      	ldr	r3, [pc, #368]	; (80016f4 <StartGameClock+0x464>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	1e9a      	subs	r2, r3, #2
 8001588:	4b61      	ldr	r3, [pc, #388]	; (8001710 <StartGameClock+0x480>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	da21      	bge.n	80015d4 <StartGameClock+0x344>
 8001590:	4b5d      	ldr	r3, [pc, #372]	; (8001708 <StartGameClock+0x478>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b57      	ldr	r3, [pc, #348]	; (80016f4 <StartGameClock+0x464>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	441a      	add	r2, r3
 800159a:	4b60      	ldr	r3, [pc, #384]	; (800171c <StartGameClock+0x48c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	da18      	bge.n	80015d4 <StartGameClock+0x344>
		  				  && ((bally - ballRad) > leftPaddley1)) && !yellowBtn && !blueBtn){
 80015a2:	4b59      	ldr	r3, [pc, #356]	; (8001708 <StartGameClock+0x478>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	4b53      	ldr	r3, [pc, #332]	; (80016f4 <StartGameClock+0x464>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	1ad2      	subs	r2, r2, r3
 80015ac:	4b59      	ldr	r3, [pc, #356]	; (8001714 <StartGameClock+0x484>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	dd0f      	ble.n	80015d4 <StartGameClock+0x344>
 80015b4:	7afb      	ldrb	r3, [r7, #11]
 80015b6:	f083 0301 	eor.w	r3, r3, #1
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d009      	beq.n	80015d4 <StartGameClock+0x344>
 80015c0:	7abb      	ldrb	r3, [r7, #10]
 80015c2:	f083 0301 	eor.w	r3, r3, #1
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <StartGameClock+0x344>
			  ballDirection = true;
 80015cc:	4b4b      	ldr	r3, [pc, #300]	; (80016fc <StartGameClock+0x46c>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	701a      	strb	r2, [r3, #0]
 80015d2:	e082      	b.n	80016da <StartGameClock+0x44a>
		  }
		  else if((((ballx - ballRad - 2) < leftPaddlex1) && ((bally + ballRad) < leftPaddley2)
 80015d4:	4b46      	ldr	r3, [pc, #280]	; (80016f0 <StartGameClock+0x460>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b46      	ldr	r3, [pc, #280]	; (80016f4 <StartGameClock+0x464>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	1e9a      	subs	r2, r3, #2
 80015e0:	4b4b      	ldr	r3, [pc, #300]	; (8001710 <StartGameClock+0x480>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	da1b      	bge.n	8001620 <StartGameClock+0x390>
 80015e8:	4b47      	ldr	r3, [pc, #284]	; (8001708 <StartGameClock+0x478>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b41      	ldr	r3, [pc, #260]	; (80016f4 <StartGameClock+0x464>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	441a      	add	r2, r3
 80015f2:	4b4a      	ldr	r3, [pc, #296]	; (800171c <StartGameClock+0x48c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	da12      	bge.n	8001620 <StartGameClock+0x390>
		  		  				  && ((bally - ballRad) > leftPaddley1)) && yellowBtn){
 80015fa:	4b43      	ldr	r3, [pc, #268]	; (8001708 <StartGameClock+0x478>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	4b3d      	ldr	r3, [pc, #244]	; (80016f4 <StartGameClock+0x464>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	1ad2      	subs	r2, r2, r3
 8001604:	4b43      	ldr	r3, [pc, #268]	; (8001714 <StartGameClock+0x484>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	429a      	cmp	r2, r3
 800160a:	dd09      	ble.n	8001620 <StartGameClock+0x390>
 800160c:	7afb      	ldrb	r3, [r7, #11]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d006      	beq.n	8001620 <StartGameClock+0x390>
			  ballDirection = true;
 8001612:	4b3a      	ldr	r3, [pc, #232]	; (80016fc <StartGameClock+0x46c>)
 8001614:	2201      	movs	r2, #1
 8001616:	701a      	strb	r2, [r3, #0]
			  ballyDirection = 1;
 8001618:	4b3c      	ldr	r3, [pc, #240]	; (800170c <StartGameClock+0x47c>)
 800161a:	2201      	movs	r2, #1
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	e05c      	b.n	80016da <StartGameClock+0x44a>
		  }
		  else if((((ballx - ballRad - 2) < leftPaddlex1) && ((bally + ballRad) < leftPaddley2)
 8001620:	4b33      	ldr	r3, [pc, #204]	; (80016f0 <StartGameClock+0x460>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4b33      	ldr	r3, [pc, #204]	; (80016f4 <StartGameClock+0x464>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	1e9a      	subs	r2, r3, #2
 800162c:	4b38      	ldr	r3, [pc, #224]	; (8001710 <StartGameClock+0x480>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	429a      	cmp	r2, r3
 8001632:	da1c      	bge.n	800166e <StartGameClock+0x3de>
 8001634:	4b34      	ldr	r3, [pc, #208]	; (8001708 <StartGameClock+0x478>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b2e      	ldr	r3, [pc, #184]	; (80016f4 <StartGameClock+0x464>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	441a      	add	r2, r3
 800163e:	4b37      	ldr	r3, [pc, #220]	; (800171c <StartGameClock+0x48c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	429a      	cmp	r2, r3
 8001644:	da13      	bge.n	800166e <StartGameClock+0x3de>
		  		  				  && ((bally - ballRad) > leftPaddley1)) && blueBtn){
 8001646:	4b30      	ldr	r3, [pc, #192]	; (8001708 <StartGameClock+0x478>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	4b2a      	ldr	r3, [pc, #168]	; (80016f4 <StartGameClock+0x464>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	1ad2      	subs	r2, r2, r3
 8001650:	4b30      	ldr	r3, [pc, #192]	; (8001714 <StartGameClock+0x484>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	429a      	cmp	r2, r3
 8001656:	dd0a      	ble.n	800166e <StartGameClock+0x3de>
 8001658:	7abb      	ldrb	r3, [r7, #10]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d007      	beq.n	800166e <StartGameClock+0x3de>
			  ballDirection = true;
 800165e:	4b27      	ldr	r3, [pc, #156]	; (80016fc <StartGameClock+0x46c>)
 8001660:	2201      	movs	r2, #1
 8001662:	701a      	strb	r2, [r3, #0]
			  ballyDirection = -1;
 8001664:	4b29      	ldr	r3, [pc, #164]	; (800170c <StartGameClock+0x47c>)
 8001666:	f04f 32ff 	mov.w	r2, #4294967295
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	e035      	b.n	80016da <StartGameClock+0x44a>
		  }
		  else if((ballx - ballRad - 2) == leftBorderx1){
 800166e:	4b20      	ldr	r3, [pc, #128]	; (80016f0 <StartGameClock+0x460>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4b20      	ldr	r3, [pc, #128]	; (80016f4 <StartGameClock+0x464>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	1e9a      	subs	r2, r3, #2
 800167a:	4b31      	ldr	r3, [pc, #196]	; (8001740 <StartGameClock+0x4b0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	429a      	cmp	r2, r3
 8001680:	d12b      	bne.n	80016da <StartGameClock+0x44a>
			  ballDirection = true;
 8001682:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <StartGameClock+0x46c>)
 8001684:	2201      	movs	r2, #1
 8001686:	701a      	strb	r2, [r3, #0]
			  scored = true;
 8001688:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <StartGameClock+0x470>)
 800168a:	2201      	movs	r2, #1
 800168c:	701a      	strb	r2, [r3, #0]
			  p2Score += 1;
 800168e:	4b2d      	ldr	r3, [pc, #180]	; (8001744 <StartGameClock+0x4b4>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	3301      	adds	r3, #1
 8001694:	4a2b      	ldr	r2, [pc, #172]	; (8001744 <StartGameClock+0x4b4>)
 8001696:	6013      	str	r3, [r2, #0]
			  ballx = 120;
 8001698:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <StartGameClock+0x460>)
 800169a:	2278      	movs	r2, #120	; 0x78
 800169c:	601a      	str	r2, [r3, #0]
			  bally = 120;
 800169e:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <StartGameClock+0x478>)
 80016a0:	2278      	movs	r2, #120	; 0x78
 80016a2:	601a      	str	r2, [r3, #0]
			  ballyDirection = 0;
 80016a4:	4b19      	ldr	r3, [pc, #100]	; (800170c <StartGameClock+0x47c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]

			  leftPaddlex1 = 20;
 80016aa:	4b19      	ldr	r3, [pc, #100]	; (8001710 <StartGameClock+0x480>)
 80016ac:	2214      	movs	r2, #20
 80016ae:	601a      	str	r2, [r3, #0]
			  leftPaddley1 = 110;
 80016b0:	4b18      	ldr	r3, [pc, #96]	; (8001714 <StartGameClock+0x484>)
 80016b2:	226e      	movs	r2, #110	; 0x6e
 80016b4:	601a      	str	r2, [r3, #0]
			  leftPaddlex2 = 20;
 80016b6:	4b18      	ldr	r3, [pc, #96]	; (8001718 <StartGameClock+0x488>)
 80016b8:	2214      	movs	r2, #20
 80016ba:	601a      	str	r2, [r3, #0]
			  leftPaddley2 = 140;
 80016bc:	4b17      	ldr	r3, [pc, #92]	; (800171c <StartGameClock+0x48c>)
 80016be:	228c      	movs	r2, #140	; 0x8c
 80016c0:	601a      	str	r2, [r3, #0]

			  rightPaddlex1 = 220;
 80016c2:	4b17      	ldr	r3, [pc, #92]	; (8001720 <StartGameClock+0x490>)
 80016c4:	22dc      	movs	r2, #220	; 0xdc
 80016c6:	601a      	str	r2, [r3, #0]
			  rightPaddley1 = 110;
 80016c8:	4b16      	ldr	r3, [pc, #88]	; (8001724 <StartGameClock+0x494>)
 80016ca:	226e      	movs	r2, #110	; 0x6e
 80016cc:	601a      	str	r2, [r3, #0]
			  rightPaddlex2 = 220;
 80016ce:	4b16      	ldr	r3, [pc, #88]	; (8001728 <StartGameClock+0x498>)
 80016d0:	22dc      	movs	r2, #220	; 0xdc
 80016d2:	601a      	str	r2, [r3, #0]
			  rightPaddley2 = 140;
 80016d4:	4b15      	ldr	r3, [pc, #84]	; (800172c <StartGameClock+0x49c>)
 80016d6:	228c      	movs	r2, #140	; 0x8c
 80016d8:	601a      	str	r2, [r3, #0]
		  }
	  }
	  status = osMutexRelease(myBallMutexHandle);
 80016da:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <StartGameClock+0x4b8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f00c ff16 	bl	800e510 <osMutexRelease>
 80016e4:	60f8      	str	r0, [r7, #12]
	  osDelay(5);
 80016e6:	2005      	movs	r0, #5
 80016e8:	f00c fdec 	bl	800e2c4 <osDelay>
  {
 80016ec:	e5d6      	b.n	800129c <StartGameClock+0xc>
 80016ee:	bf00      	nop
 80016f0:	2000008c 	.word	0x2000008c
 80016f4:	2000009c 	.word	0x2000009c
 80016f8:	20000020 	.word	0x20000020
 80016fc:	200000a0 	.word	0x200000a0
 8001700:	200001c0 	.word	0x200001c0
 8001704:	200001ac 	.word	0x200001ac
 8001708:	20000090 	.word	0x20000090
 800170c:	200001c4 	.word	0x200001c4
 8001710:	20000054 	.word	0x20000054
 8001714:	20000058 	.word	0x20000058
 8001718:	2000005c 	.word	0x2000005c
 800171c:	20000060 	.word	0x20000060
 8001720:	20000064 	.word	0x20000064
 8001724:	20000068 	.word	0x20000068
 8001728:	2000006c 	.word	0x2000006c
 800172c:	20000070 	.word	0x20000070
 8001730:	20000094 	.word	0x20000094
 8001734:	20000098 	.word	0x20000098
 8001738:	20000034 	.word	0x20000034
 800173c:	20000004 	.word	0x20000004
 8001740:	20000010 	.word	0x20000010
 8001744:	200001b0 	.word	0x200001b0
 8001748:	20004e94 	.word	0x20004e94

0800174c <StartDrawGame>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDrawGame */
void StartDrawGame(void *argument)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDrawGame */
  /* Infinite loop */
  for(;;)
  {
	  osStatus_t status = osMutexAcquire(myPaddleMutexHandle, osWaitForever);
 8001754:	4b9c      	ldr	r3, [pc, #624]	; (80019c8 <StartDrawGame+0x27c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f04f 31ff 	mov.w	r1, #4294967295
 800175c:	4618      	mov	r0, r3
 800175e:	f00c fe79 	bl	800e454 <osMutexAcquire>
 8001762:	60f8      	str	r0, [r7, #12]
	  status = osMutexAcquire(myBallMutexHandle, osWaitForever);
 8001764:	4b99      	ldr	r3, [pc, #612]	; (80019cc <StartDrawGame+0x280>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f04f 31ff 	mov.w	r1, #4294967295
 800176c:	4618      	mov	r0, r3
 800176e:	f00c fe71 	bl	800e454 <osMutexAcquire>
 8001772:	60f8      	str	r0, [r7, #12]



	  //Draw Paddles

	  if(leftPaddley1 != leftPaddley1Prev && leftPaddley2 != leftPaddley2Prev){
 8001774:	4b96      	ldr	r3, [pc, #600]	; (80019d0 <StartDrawGame+0x284>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b96      	ldr	r3, [pc, #600]	; (80019d4 <StartDrawGame+0x288>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	429a      	cmp	r2, r3
 800177e:	d030      	beq.n	80017e2 <StartDrawGame+0x96>
 8001780:	4b95      	ldr	r3, [pc, #596]	; (80019d8 <StartDrawGame+0x28c>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b95      	ldr	r3, [pc, #596]	; (80019dc <StartDrawGame+0x290>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	429a      	cmp	r2, r3
 800178a:	d02a      	beq.n	80017e2 <StartDrawGame+0x96>
		  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800178c:	2000      	movs	r0, #0
 800178e:	f001 ff3b 	bl	8003608 <BSP_LCD_SetTextColor>
		  BSP_LCD_DrawLine(leftPaddlex1, leftPaddley1Prev, leftPaddlex2, leftPaddley2Prev);
 8001792:	4b93      	ldr	r3, [pc, #588]	; (80019e0 <StartDrawGame+0x294>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	b298      	uxth	r0, r3
 8001798:	4b8e      	ldr	r3, [pc, #568]	; (80019d4 <StartDrawGame+0x288>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	b299      	uxth	r1, r3
 800179e:	4b91      	ldr	r3, [pc, #580]	; (80019e4 <StartDrawGame+0x298>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	4b8d      	ldr	r3, [pc, #564]	; (80019dc <StartDrawGame+0x290>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	f002 f8a5 	bl	80038f8 <BSP_LCD_DrawLine>
		  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80017ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80017b2:	f001 ff29 	bl	8003608 <BSP_LCD_SetTextColor>
		  BSP_LCD_DrawLine(leftPaddlex1, leftPaddley1, leftPaddlex2, leftPaddley2);
 80017b6:	4b8a      	ldr	r3, [pc, #552]	; (80019e0 <StartDrawGame+0x294>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	b298      	uxth	r0, r3
 80017bc:	4b84      	ldr	r3, [pc, #528]	; (80019d0 <StartDrawGame+0x284>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	b299      	uxth	r1, r3
 80017c2:	4b88      	ldr	r3, [pc, #544]	; (80019e4 <StartDrawGame+0x298>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	4b83      	ldr	r3, [pc, #524]	; (80019d8 <StartDrawGame+0x28c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	f002 f893 	bl	80038f8 <BSP_LCD_DrawLine>
		  leftPaddley1Prev = leftPaddley1;
 80017d2:	4b7f      	ldr	r3, [pc, #508]	; (80019d0 <StartDrawGame+0x284>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a7f      	ldr	r2, [pc, #508]	; (80019d4 <StartDrawGame+0x288>)
 80017d8:	6013      	str	r3, [r2, #0]
		  leftPaddley2Prev = leftPaddley2;
 80017da:	4b7f      	ldr	r3, [pc, #508]	; (80019d8 <StartDrawGame+0x28c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a7f      	ldr	r2, [pc, #508]	; (80019dc <StartDrawGame+0x290>)
 80017e0:	6013      	str	r3, [r2, #0]

	  }
	  if(rightPaddley1 != rightPaddley1Prev && rightPaddley2 != rightPaddley2Prev){
 80017e2:	4b81      	ldr	r3, [pc, #516]	; (80019e8 <StartDrawGame+0x29c>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	4b81      	ldr	r3, [pc, #516]	; (80019ec <StartDrawGame+0x2a0>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d030      	beq.n	8001850 <StartDrawGame+0x104>
 80017ee:	4b80      	ldr	r3, [pc, #512]	; (80019f0 <StartDrawGame+0x2a4>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	4b80      	ldr	r3, [pc, #512]	; (80019f4 <StartDrawGame+0x2a8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d02a      	beq.n	8001850 <StartDrawGame+0x104>
		  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80017fa:	2000      	movs	r0, #0
 80017fc:	f001 ff04 	bl	8003608 <BSP_LCD_SetTextColor>
		  BSP_LCD_DrawLine(rightPaddlex1, rightPaddley1Prev, rightPaddlex2, rightPaddley2Prev);
 8001800:	4b7d      	ldr	r3, [pc, #500]	; (80019f8 <StartDrawGame+0x2ac>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	b298      	uxth	r0, r3
 8001806:	4b79      	ldr	r3, [pc, #484]	; (80019ec <StartDrawGame+0x2a0>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	b299      	uxth	r1, r3
 800180c:	4b7b      	ldr	r3, [pc, #492]	; (80019fc <StartDrawGame+0x2b0>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	b29a      	uxth	r2, r3
 8001812:	4b78      	ldr	r3, [pc, #480]	; (80019f4 <StartDrawGame+0x2a8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	b29b      	uxth	r3, r3
 8001818:	f002 f86e 	bl	80038f8 <BSP_LCD_DrawLine>
		  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800181c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001820:	f001 fef2 	bl	8003608 <BSP_LCD_SetTextColor>
		  BSP_LCD_DrawLine(rightPaddlex1, rightPaddley1, rightPaddlex2, rightPaddley2);
 8001824:	4b74      	ldr	r3, [pc, #464]	; (80019f8 <StartDrawGame+0x2ac>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	b298      	uxth	r0, r3
 800182a:	4b6f      	ldr	r3, [pc, #444]	; (80019e8 <StartDrawGame+0x29c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	b299      	uxth	r1, r3
 8001830:	4b72      	ldr	r3, [pc, #456]	; (80019fc <StartDrawGame+0x2b0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	b29a      	uxth	r2, r3
 8001836:	4b6e      	ldr	r3, [pc, #440]	; (80019f0 <StartDrawGame+0x2a4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	b29b      	uxth	r3, r3
 800183c:	f002 f85c 	bl	80038f8 <BSP_LCD_DrawLine>
		  rightPaddley1Prev = rightPaddley1;
 8001840:	4b69      	ldr	r3, [pc, #420]	; (80019e8 <StartDrawGame+0x29c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a69      	ldr	r2, [pc, #420]	; (80019ec <StartDrawGame+0x2a0>)
 8001846:	6013      	str	r3, [r2, #0]
		  rightPaddley2Prev = rightPaddley2;
 8001848:	4b69      	ldr	r3, [pc, #420]	; (80019f0 <StartDrawGame+0x2a4>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a69      	ldr	r2, [pc, #420]	; (80019f4 <StartDrawGame+0x2a8>)
 800184e:	6013      	str	r3, [r2, #0]
	  }

	  //Draw Score
	  if(scored){
 8001850:	4b6b      	ldr	r3, [pc, #428]	; (8001a00 <StartDrawGame+0x2b4>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	f000 8083 	beq.w	8001960 <StartDrawGame+0x214>
		  if(p1Score != p1ScorePrev){
 800185a:	4b6a      	ldr	r3, [pc, #424]	; (8001a04 <StartDrawGame+0x2b8>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	4b6a      	ldr	r3, [pc, #424]	; (8001a08 <StartDrawGame+0x2bc>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	429a      	cmp	r2, r3
 8001864:	d02b      	beq.n	80018be <StartDrawGame+0x172>
			  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001866:	2000      	movs	r0, #0
 8001868:	f001 fece 	bl	8003608 <BSP_LCD_SetTextColor>
			  //itoa(p1ScorePrev, p1ScoreSnumPrev, 10);
			  BSP_LCD_DisplayStringAt(p1ScoreX, p1ScoreY, (uint8_t*)"Random", LEFT_MODE);
 800186c:	4b67      	ldr	r3, [pc, #412]	; (8001a0c <StartDrawGame+0x2c0>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	b298      	uxth	r0, r3
 8001872:	4b67      	ldr	r3, [pc, #412]	; (8001a10 <StartDrawGame+0x2c4>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	b299      	uxth	r1, r3
 8001878:	2303      	movs	r3, #3
 800187a:	4a66      	ldr	r2, [pc, #408]	; (8001a14 <StartDrawGame+0x2c8>)
 800187c:	f001 ff54 	bl	8003728 <BSP_LCD_DisplayStringAt>

			  //Bug fix don't worry about it
			  BSP_LCD_FillRect(11, 26, 218, 195);
 8001880:	23c3      	movs	r3, #195	; 0xc3
 8001882:	22da      	movs	r2, #218	; 0xda
 8001884:	211a      	movs	r1, #26
 8001886:	200b      	movs	r0, #11
 8001888:	f002 f9b4 	bl	8003bf4 <BSP_LCD_FillRect>

			  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800188c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001890:	f001 feba 	bl	8003608 <BSP_LCD_SetTextColor>
			  itoa(p1Score, p1ScoreSnum, 10);
 8001894:	4b5b      	ldr	r3, [pc, #364]	; (8001a04 <StartDrawGame+0x2b8>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	220a      	movs	r2, #10
 800189a:	495f      	ldr	r1, [pc, #380]	; (8001a18 <StartDrawGame+0x2cc>)
 800189c:	4618      	mov	r0, r3
 800189e:	f010 fad1 	bl	8011e44 <itoa>
			  BSP_LCD_DisplayStringAt(p1ScoreX, p1ScoreY, (uint8_t*)p1ScoreSnum, LEFT_MODE);
 80018a2:	4b5a      	ldr	r3, [pc, #360]	; (8001a0c <StartDrawGame+0x2c0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	b298      	uxth	r0, r3
 80018a8:	4b59      	ldr	r3, [pc, #356]	; (8001a10 <StartDrawGame+0x2c4>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	b299      	uxth	r1, r3
 80018ae:	2303      	movs	r3, #3
 80018b0:	4a59      	ldr	r2, [pc, #356]	; (8001a18 <StartDrawGame+0x2cc>)
 80018b2:	f001 ff39 	bl	8003728 <BSP_LCD_DisplayStringAt>

			  p1ScorePrev = p1Score;
 80018b6:	4b53      	ldr	r3, [pc, #332]	; (8001a04 <StartDrawGame+0x2b8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a53      	ldr	r2, [pc, #332]	; (8001a08 <StartDrawGame+0x2bc>)
 80018bc:	6013      	str	r3, [r2, #0]
		  }
		  if(p2Score != p2ScorePrev){
 80018be:	4b57      	ldr	r3, [pc, #348]	; (8001a1c <StartDrawGame+0x2d0>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	4b57      	ldr	r3, [pc, #348]	; (8001a20 <StartDrawGame+0x2d4>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d02b      	beq.n	8001922 <StartDrawGame+0x1d6>
			  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80018ca:	2000      	movs	r0, #0
 80018cc:	f001 fe9c 	bl	8003608 <BSP_LCD_SetTextColor>
			  //itoa(p2ScorePrev, p2ScoreSnumPrev, 10);
			  BSP_LCD_DisplayStringAt(p2ScoreX, p2ScoreY, (uint8_t*)"Random", LEFT_MODE);
 80018d0:	4b54      	ldr	r3, [pc, #336]	; (8001a24 <StartDrawGame+0x2d8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	b298      	uxth	r0, r3
 80018d6:	4b54      	ldr	r3, [pc, #336]	; (8001a28 <StartDrawGame+0x2dc>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	b299      	uxth	r1, r3
 80018dc:	2303      	movs	r3, #3
 80018de:	4a4d      	ldr	r2, [pc, #308]	; (8001a14 <StartDrawGame+0x2c8>)
 80018e0:	f001 ff22 	bl	8003728 <BSP_LCD_DisplayStringAt>

			  //Bug fix don't worry about it
			  BSP_LCD_FillRect(11, 26, 218, 195);
 80018e4:	23c3      	movs	r3, #195	; 0xc3
 80018e6:	22da      	movs	r2, #218	; 0xda
 80018e8:	211a      	movs	r1, #26
 80018ea:	200b      	movs	r0, #11
 80018ec:	f002 f982 	bl	8003bf4 <BSP_LCD_FillRect>

			  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80018f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80018f4:	f001 fe88 	bl	8003608 <BSP_LCD_SetTextColor>
			  itoa(p2Score, p2ScoreSnum, 10);
 80018f8:	4b48      	ldr	r3, [pc, #288]	; (8001a1c <StartDrawGame+0x2d0>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	220a      	movs	r2, #10
 80018fe:	494b      	ldr	r1, [pc, #300]	; (8001a2c <StartDrawGame+0x2e0>)
 8001900:	4618      	mov	r0, r3
 8001902:	f010 fa9f 	bl	8011e44 <itoa>
			  BSP_LCD_DisplayStringAt(p2ScoreX, p2ScoreY, (uint8_t*)p2ScoreSnum, LEFT_MODE);
 8001906:	4b47      	ldr	r3, [pc, #284]	; (8001a24 <StartDrawGame+0x2d8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	b298      	uxth	r0, r3
 800190c:	4b46      	ldr	r3, [pc, #280]	; (8001a28 <StartDrawGame+0x2dc>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	b299      	uxth	r1, r3
 8001912:	2303      	movs	r3, #3
 8001914:	4a45      	ldr	r2, [pc, #276]	; (8001a2c <StartDrawGame+0x2e0>)
 8001916:	f001 ff07 	bl	8003728 <BSP_LCD_DisplayStringAt>

			  p2ScorePrev = p2Score;
 800191a:	4b40      	ldr	r3, [pc, #256]	; (8001a1c <StartDrawGame+0x2d0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a40      	ldr	r2, [pc, #256]	; (8001a20 <StartDrawGame+0x2d4>)
 8001920:	6013      	str	r3, [r2, #0]
		  }

		  BSP_LCD_DrawLine(rightPaddlex1, rightPaddley1, rightPaddlex2, rightPaddley2);
 8001922:	4b35      	ldr	r3, [pc, #212]	; (80019f8 <StartDrawGame+0x2ac>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	b298      	uxth	r0, r3
 8001928:	4b2f      	ldr	r3, [pc, #188]	; (80019e8 <StartDrawGame+0x29c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	b299      	uxth	r1, r3
 800192e:	4b33      	ldr	r3, [pc, #204]	; (80019fc <StartDrawGame+0x2b0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	b29a      	uxth	r2, r3
 8001934:	4b2e      	ldr	r3, [pc, #184]	; (80019f0 <StartDrawGame+0x2a4>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	b29b      	uxth	r3, r3
 800193a:	f001 ffdd 	bl	80038f8 <BSP_LCD_DrawLine>
		  BSP_LCD_DrawLine(leftPaddlex1, leftPaddley1, leftPaddlex2, leftPaddley2);
 800193e:	4b28      	ldr	r3, [pc, #160]	; (80019e0 <StartDrawGame+0x294>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	b298      	uxth	r0, r3
 8001944:	4b22      	ldr	r3, [pc, #136]	; (80019d0 <StartDrawGame+0x284>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	b299      	uxth	r1, r3
 800194a:	4b26      	ldr	r3, [pc, #152]	; (80019e4 <StartDrawGame+0x298>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	b29a      	uxth	r2, r3
 8001950:	4b21      	ldr	r3, [pc, #132]	; (80019d8 <StartDrawGame+0x28c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	b29b      	uxth	r3, r3
 8001956:	f001 ffcf 	bl	80038f8 <BSP_LCD_DrawLine>

		  scored = false;
 800195a:	4b29      	ldr	r3, [pc, #164]	; (8001a00 <StartDrawGame+0x2b4>)
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]
	  }

	  //Draw Ball

		  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001960:	2000      	movs	r0, #0
 8001962:	f001 fe51 	bl	8003608 <BSP_LCD_SetTextColor>

		  BSP_LCD_FillCircle(ballxPrev, ballyPrev, ballRad);
 8001966:	4b32      	ldr	r3, [pc, #200]	; (8001a30 <StartDrawGame+0x2e4>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	b298      	uxth	r0, r3
 800196c:	4b31      	ldr	r3, [pc, #196]	; (8001a34 <StartDrawGame+0x2e8>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	b299      	uxth	r1, r3
 8001972:	4b31      	ldr	r3, [pc, #196]	; (8001a38 <StartDrawGame+0x2ec>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	b29b      	uxth	r3, r3
 8001978:	461a      	mov	r2, r3
 800197a:	f002 f963 	bl	8003c44 <BSP_LCD_FillCircle>
		  BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800197e:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001982:	f001 fe41 	bl	8003608 <BSP_LCD_SetTextColor>

		  BSP_LCD_FillCircle(ballx, bally, ballRad);
 8001986:	4b2d      	ldr	r3, [pc, #180]	; (8001a3c <StartDrawGame+0x2f0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	b298      	uxth	r0, r3
 800198c:	4b2c      	ldr	r3, [pc, #176]	; (8001a40 <StartDrawGame+0x2f4>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	b299      	uxth	r1, r3
 8001992:	4b29      	ldr	r3, [pc, #164]	; (8001a38 <StartDrawGame+0x2ec>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	b29b      	uxth	r3, r3
 8001998:	461a      	mov	r2, r3
 800199a:	f002 f953 	bl	8003c44 <BSP_LCD_FillCircle>
		  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800199e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80019a2:	f001 fe31 	bl	8003608 <BSP_LCD_SetTextColor>

	  status = osMutexRelease(myPaddleMutexHandle);
 80019a6:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <StartDrawGame+0x27c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f00c fdb0 	bl	800e510 <osMutexRelease>
 80019b0:	60f8      	str	r0, [r7, #12]
	  status = osMutexRelease(myBallMutexHandle);
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <StartDrawGame+0x280>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f00c fdaa 	bl	800e510 <osMutexRelease>
 80019bc:	60f8      	str	r0, [r7, #12]

	  osDelay(5);
 80019be:	2005      	movs	r0, #5
 80019c0:	f00c fc80 	bl	800e2c4 <osDelay>
  {
 80019c4:	e6c6      	b.n	8001754 <StartDrawGame+0x8>
 80019c6:	bf00      	nop
 80019c8:	20004b68 	.word	0x20004b68
 80019cc:	20004e94 	.word	0x20004e94
 80019d0:	20000058 	.word	0x20000058
 80019d4:	20000074 	.word	0x20000074
 80019d8:	20000060 	.word	0x20000060
 80019dc:	20000078 	.word	0x20000078
 80019e0:	20000054 	.word	0x20000054
 80019e4:	2000005c 	.word	0x2000005c
 80019e8:	20000068 	.word	0x20000068
 80019ec:	2000007c 	.word	0x2000007c
 80019f0:	20000070 	.word	0x20000070
 80019f4:	20000080 	.word	0x20000080
 80019f8:	20000064 	.word	0x20000064
 80019fc:	2000006c 	.word	0x2000006c
 8001a00:	200001c0 	.word	0x200001c0
 8001a04:	200001ac 	.word	0x200001ac
 8001a08:	200001b4 	.word	0x200001b4
 8001a0c:	20000040 	.word	0x20000040
 8001a10:	20000044 	.word	0x20000044
 8001a14:	080120f4 	.word	0x080120f4
 8001a18:	20004cc8 	.word	0x20004cc8
 8001a1c:	200001b0 	.word	0x200001b0
 8001a20:	200001b8 	.word	0x200001b8
 8001a24:	20000048 	.word	0x20000048
 8001a28:	2000004c 	.word	0x2000004c
 8001a2c:	20004d74 	.word	0x20004d74
 8001a30:	20000094 	.word	0x20000094
 8001a34:	20000098 	.word	0x20000098
 8001a38:	2000009c 	.word	0x2000009c
 8001a3c:	2000008c 	.word	0x2000008c
 8001a40:	20000090 	.word	0x20000090

08001a44 <StartButtonControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButtonControl */
void StartButtonControl(void *argument)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonControl */
  /* Infinite loop */
  for(;;)
  {

	  osStatus_t status = osMutexAcquire(myPaddleMutexHandle, osWaitForever);
 8001a4c:	4b53      	ldr	r3, [pc, #332]	; (8001b9c <StartButtonControl+0x158>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f04f 31ff 	mov.w	r1, #4294967295
 8001a54:	4618      	mov	r0, r3
 8001a56:	f00c fcfd 	bl	800e454 <osMutexAcquire>
 8001a5a:	60f8      	str	r0, [r7, #12]

	  bool yellowBtn = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_6);
 8001a5c:	2140      	movs	r1, #64	; 0x40
 8001a5e:	4850      	ldr	r0, [pc, #320]	; (8001ba0 <StartButtonControl+0x15c>)
 8001a60:	f003 fade 	bl	8005020 <HAL_GPIO_ReadPin>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	bf14      	ite	ne
 8001a6a:	2301      	movne	r3, #1
 8001a6c:	2300      	moveq	r3, #0
 8001a6e:	72fb      	strb	r3, [r7, #11]
	  bool blueBtn = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7);
 8001a70:	2180      	movs	r1, #128	; 0x80
 8001a72:	484b      	ldr	r0, [pc, #300]	; (8001ba0 <StartButtonControl+0x15c>)
 8001a74:	f003 fad4 	bl	8005020 <HAL_GPIO_ReadPin>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	bf14      	ite	ne
 8001a7e:	2301      	movne	r3, #1
 8001a80:	2300      	moveq	r3, #0
 8001a82:	72bb      	strb	r3, [r7, #10]
	  bool greenBtn = HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_13);
 8001a84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a88:	4846      	ldr	r0, [pc, #280]	; (8001ba4 <StartButtonControl+0x160>)
 8001a8a:	f003 fac9 	bl	8005020 <HAL_GPIO_ReadPin>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	bf14      	ite	ne
 8001a94:	2301      	movne	r3, #1
 8001a96:	2300      	moveq	r3, #0
 8001a98:	727b      	strb	r3, [r7, #9]
	  bool redBtn = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_10);
 8001a9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a9e:	4840      	ldr	r0, [pc, #256]	; (8001ba0 <StartButtonControl+0x15c>)
 8001aa0:	f003 fabe 	bl	8005020 <HAL_GPIO_ReadPin>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	bf14      	ite	ne
 8001aaa:	2301      	movne	r3, #1
 8001aac:	2300      	moveq	r3, #0
 8001aae:	723b      	strb	r3, [r7, #8]

	  if(yellowBtn){
 8001ab0:	7afb      	ldrb	r3, [r7, #11]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d017      	beq.n	8001ae6 <StartButtonControl+0xa2>
		  if(leftPaddley2 != bottomy){
 8001ab6:	4b3c      	ldr	r3, [pc, #240]	; (8001ba8 <StartButtonControl+0x164>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	4b3c      	ldr	r3, [pc, #240]	; (8001bac <StartButtonControl+0x168>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d011      	beq.n	8001ae6 <StartButtonControl+0xa2>
			  leftPaddley1Prev = leftPaddley1;
 8001ac2:	4b3b      	ldr	r3, [pc, #236]	; (8001bb0 <StartButtonControl+0x16c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a3b      	ldr	r2, [pc, #236]	; (8001bb4 <StartButtonControl+0x170>)
 8001ac8:	6013      	str	r3, [r2, #0]
			  leftPaddley2Prev = leftPaddley2;
 8001aca:	4b37      	ldr	r3, [pc, #220]	; (8001ba8 <StartButtonControl+0x164>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a3a      	ldr	r2, [pc, #232]	; (8001bb8 <StartButtonControl+0x174>)
 8001ad0:	6013      	str	r3, [r2, #0]
			  leftPaddley1 += 1;
 8001ad2:	4b37      	ldr	r3, [pc, #220]	; (8001bb0 <StartButtonControl+0x16c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	4a35      	ldr	r2, [pc, #212]	; (8001bb0 <StartButtonControl+0x16c>)
 8001ada:	6013      	str	r3, [r2, #0]
			  leftPaddley2 += 1;
 8001adc:	4b32      	ldr	r3, [pc, #200]	; (8001ba8 <StartButtonControl+0x164>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	4a31      	ldr	r2, [pc, #196]	; (8001ba8 <StartButtonControl+0x164>)
 8001ae4:	6013      	str	r3, [r2, #0]
		  }
	  }
	  if(blueBtn){
 8001ae6:	7abb      	ldrb	r3, [r7, #10]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d017      	beq.n	8001b1c <StartButtonControl+0xd8>
		  if(leftPaddley1 != topy){
 8001aec:	4b30      	ldr	r3, [pc, #192]	; (8001bb0 <StartButtonControl+0x16c>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4b32      	ldr	r3, [pc, #200]	; (8001bbc <StartButtonControl+0x178>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d011      	beq.n	8001b1c <StartButtonControl+0xd8>
			  leftPaddley1Prev = leftPaddley1;
 8001af8:	4b2d      	ldr	r3, [pc, #180]	; (8001bb0 <StartButtonControl+0x16c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a2d      	ldr	r2, [pc, #180]	; (8001bb4 <StartButtonControl+0x170>)
 8001afe:	6013      	str	r3, [r2, #0]
			  leftPaddley2Prev = leftPaddley2;
 8001b00:	4b29      	ldr	r3, [pc, #164]	; (8001ba8 <StartButtonControl+0x164>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a2c      	ldr	r2, [pc, #176]	; (8001bb8 <StartButtonControl+0x174>)
 8001b06:	6013      	str	r3, [r2, #0]
			  leftPaddley1 -= 1;
 8001b08:	4b29      	ldr	r3, [pc, #164]	; (8001bb0 <StartButtonControl+0x16c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	4a28      	ldr	r2, [pc, #160]	; (8001bb0 <StartButtonControl+0x16c>)
 8001b10:	6013      	str	r3, [r2, #0]
			  leftPaddley2 -= 1;
 8001b12:	4b25      	ldr	r3, [pc, #148]	; (8001ba8 <StartButtonControl+0x164>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	4a23      	ldr	r2, [pc, #140]	; (8001ba8 <StartButtonControl+0x164>)
 8001b1a:	6013      	str	r3, [r2, #0]
		  }
	  }
	  if(greenBtn){
 8001b1c:	7a7b      	ldrb	r3, [r7, #9]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d017      	beq.n	8001b52 <StartButtonControl+0x10e>
		  if(rightPaddley2 != bottomy){
 8001b22:	4b27      	ldr	r3, [pc, #156]	; (8001bc0 <StartButtonControl+0x17c>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	4b21      	ldr	r3, [pc, #132]	; (8001bac <StartButtonControl+0x168>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d011      	beq.n	8001b52 <StartButtonControl+0x10e>
			  rightPaddley1Prev = rightPaddley1;
 8001b2e:	4b25      	ldr	r3, [pc, #148]	; (8001bc4 <StartButtonControl+0x180>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a25      	ldr	r2, [pc, #148]	; (8001bc8 <StartButtonControl+0x184>)
 8001b34:	6013      	str	r3, [r2, #0]
			  rightPaddley2Prev = rightPaddley2;
 8001b36:	4b22      	ldr	r3, [pc, #136]	; (8001bc0 <StartButtonControl+0x17c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a24      	ldr	r2, [pc, #144]	; (8001bcc <StartButtonControl+0x188>)
 8001b3c:	6013      	str	r3, [r2, #0]
			  rightPaddley1 += 1;
 8001b3e:	4b21      	ldr	r3, [pc, #132]	; (8001bc4 <StartButtonControl+0x180>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	3301      	adds	r3, #1
 8001b44:	4a1f      	ldr	r2, [pc, #124]	; (8001bc4 <StartButtonControl+0x180>)
 8001b46:	6013      	str	r3, [r2, #0]
			  rightPaddley2 += 1;
 8001b48:	4b1d      	ldr	r3, [pc, #116]	; (8001bc0 <StartButtonControl+0x17c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	4a1c      	ldr	r2, [pc, #112]	; (8001bc0 <StartButtonControl+0x17c>)
 8001b50:	6013      	str	r3, [r2, #0]
		  }
	  }
	  if(redBtn){
 8001b52:	7a3b      	ldrb	r3, [r7, #8]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d017      	beq.n	8001b88 <StartButtonControl+0x144>
		  if(rightPaddley1 != topy){
 8001b58:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <StartButtonControl+0x180>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4b17      	ldr	r3, [pc, #92]	; (8001bbc <StartButtonControl+0x178>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d011      	beq.n	8001b88 <StartButtonControl+0x144>
			  rightPaddley1Prev = rightPaddley1;
 8001b64:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <StartButtonControl+0x180>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a17      	ldr	r2, [pc, #92]	; (8001bc8 <StartButtonControl+0x184>)
 8001b6a:	6013      	str	r3, [r2, #0]
			  rightPaddley2Prev = rightPaddley2;
 8001b6c:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <StartButtonControl+0x17c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a16      	ldr	r2, [pc, #88]	; (8001bcc <StartButtonControl+0x188>)
 8001b72:	6013      	str	r3, [r2, #0]
			  rightPaddley1 -= 1;
 8001b74:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <StartButtonControl+0x180>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	4a12      	ldr	r2, [pc, #72]	; (8001bc4 <StartButtonControl+0x180>)
 8001b7c:	6013      	str	r3, [r2, #0]
			  rightPaddley2 -= 1;
 8001b7e:	4b10      	ldr	r3, [pc, #64]	; (8001bc0 <StartButtonControl+0x17c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	4a0e      	ldr	r2, [pc, #56]	; (8001bc0 <StartButtonControl+0x17c>)
 8001b86:	6013      	str	r3, [r2, #0]
		  }
	  }
	  status = osMutexRelease(myPaddleMutexHandle);
 8001b88:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <StartButtonControl+0x158>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f00c fcbf 	bl	800e510 <osMutexRelease>
 8001b92:	60f8      	str	r0, [r7, #12]

	  osDelay(5);
 8001b94:	2005      	movs	r0, #5
 8001b96:	f00c fb95 	bl	800e2c4 <osDelay>
  {
 8001b9a:	e757      	b.n	8001a4c <StartButtonControl+0x8>
 8001b9c:	20004b68 	.word	0x20004b68
 8001ba0:	40021400 	.word	0x40021400
 8001ba4:	40021800 	.word	0x40021800
 8001ba8:	20000060 	.word	0x20000060
 8001bac:	20000088 	.word	0x20000088
 8001bb0:	20000058 	.word	0x20000058
 8001bb4:	20000074 	.word	0x20000074
 8001bb8:	20000078 	.word	0x20000078
 8001bbc:	20000084 	.word	0x20000084
 8001bc0:	20000070 	.word	0x20000070
 8001bc4:	20000068 	.word	0x20000068
 8001bc8:	2000007c 	.word	0x2000007c
 8001bcc:	20000080 	.word	0x20000080

08001bd0 <StartWifiControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWifiControl */
void StartWifiControl(void *argument)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWifiControl */
  /* Infinite loop */
  for(;;)
  {
    osDelay(5);
 8001bd8:	2005      	movs	r0, #5
 8001bda:	f00c fb73 	bl	800e2c4 <osDelay>
 8001bde:	e7fb      	b.n	8001bd8 <StartWifiControl+0x8>

08001be0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a04      	ldr	r2, [pc, #16]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d101      	bne.n	8001bf6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bf2:	f002 f9cf 	bl	8003f94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40001000 	.word	0x40001000

08001c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <HAL_MspInit+0x4c>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c22:	4a0f      	ldr	r2, [pc, #60]	; (8001c60 <HAL_MspInit+0x4c>)
 8001c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c28:	6453      	str	r3, [r2, #68]	; 0x44
 8001c2a:	4b0d      	ldr	r3, [pc, #52]	; (8001c60 <HAL_MspInit+0x4c>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c32:	607b      	str	r3, [r7, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	603b      	str	r3, [r7, #0]
 8001c3a:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <HAL_MspInit+0x4c>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	4a08      	ldr	r2, [pc, #32]	; (8001c60 <HAL_MspInit+0x4c>)
 8001c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c44:	6413      	str	r3, [r2, #64]	; 0x40
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_MspInit+0x4c>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	603b      	str	r3, [r7, #0]
 8001c50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	40023800 	.word	0x40023800

08001c64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08c      	sub	sp, #48	; 0x30
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 031c 	add.w	r3, r7, #28
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a31      	ldr	r2, [pc, #196]	; (8001d48 <HAL_ADC_MspInit+0xe4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d15b      	bne.n	8001d3e <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	61bb      	str	r3, [r7, #24]
 8001c8a:	4b30      	ldr	r3, [pc, #192]	; (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	4a2f      	ldr	r2, [pc, #188]	; (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c94:	6453      	str	r3, [r2, #68]	; 0x44
 8001c96:	4b2d      	ldr	r3, [pc, #180]	; (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9e:	61bb      	str	r3, [r7, #24]
 8001ca0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	4b29      	ldr	r3, [pc, #164]	; (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a28      	ldr	r2, [pc, #160]	; (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001cac:	f043 0304 	orr.w	r3, r3, #4
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b26      	ldr	r3, [pc, #152]	; (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f003 0304 	and.w	r3, r3, #4
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
 8001cc2:	4b22      	ldr	r3, [pc, #136]	; (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	4a21      	ldr	r2, [pc, #132]	; (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cce:	4b1f      	ldr	r3, [pc, #124]	; (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	4b1b      	ldr	r3, [pc, #108]	; (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a1a      	ldr	r2, [pc, #104]	; (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001ce4:	f043 0302 	orr.w	r3, r3, #2
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 8001cf6:	2311      	movs	r3, #17
 8001cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d02:	f107 031c 	add.w	r3, r7, #28
 8001d06:	4619      	mov	r1, r3
 8001d08:	4811      	ldr	r0, [pc, #68]	; (8001d50 <HAL_ADC_MspInit+0xec>)
 8001d0a:	f002 fff7 	bl	8004cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 8001d0e:	2326      	movs	r3, #38	; 0x26
 8001d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d12:	2303      	movs	r3, #3
 8001d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1a:	f107 031c 	add.w	r3, r7, #28
 8001d1e:	4619      	mov	r1, r3
 8001d20:	480c      	ldr	r0, [pc, #48]	; (8001d54 <HAL_ADC_MspInit+0xf0>)
 8001d22:	f002 ffeb 	bl	8004cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A4_Pin;
 8001d26:	2302      	movs	r3, #2
 8001d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 8001d32:	f107 031c 	add.w	r3, r7, #28
 8001d36:	4619      	mov	r1, r3
 8001d38:	4807      	ldr	r0, [pc, #28]	; (8001d58 <HAL_ADC_MspInit+0xf4>)
 8001d3a:	f002 ffdf 	bl	8004cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d3e:	bf00      	nop
 8001d40:	3730      	adds	r7, #48	; 0x30
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40012000 	.word	0x40012000
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40020800 	.word	0x40020800
 8001d54:	40020000 	.word	0x40020000
 8001d58:	40020400 	.word	0x40020400

08001d5c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08a      	sub	sp, #40	; 0x28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	f107 0314 	add.w	r3, r7, #20
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a1b      	ldr	r2, [pc, #108]	; (8001de8 <HAL_DAC_MspInit+0x8c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d12f      	bne.n	8001dde <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <HAL_DAC_MspInit+0x90>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	4a19      	ldr	r2, [pc, #100]	; (8001dec <HAL_DAC_MspInit+0x90>)
 8001d88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8e:	4b17      	ldr	r3, [pc, #92]	; (8001dec <HAL_DAC_MspInit+0x90>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	4b13      	ldr	r3, [pc, #76]	; (8001dec <HAL_DAC_MspInit+0x90>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a12      	ldr	r2, [pc, #72]	; (8001dec <HAL_DAC_MspInit+0x90>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b10      	ldr	r3, [pc, #64]	; (8001dec <HAL_DAC_MspInit+0x90>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 8001db6:	2310      	movs	r3, #16
 8001db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 8001dc2:	f107 0314 	add.w	r3, r7, #20
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4809      	ldr	r0, [pc, #36]	; (8001df0 <HAL_DAC_MspInit+0x94>)
 8001dca:	f002 ff97 	bl	8004cfc <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	2036      	movs	r0, #54	; 0x36
 8001dd4:	f002 fc4a 	bl	800466c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001dd8:	2036      	movs	r0, #54	; 0x36
 8001dda:	f002 fc63 	bl	80046a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001dde:	bf00      	nop
 8001de0:	3728      	adds	r7, #40	; 0x28
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40007400 	.word	0x40007400
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40020000 	.word	0x40020000

08001df4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08e      	sub	sp, #56	; 0x38
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a77      	ldr	r2, [pc, #476]	; (8001ff0 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d00e      	beq.n	8001e34 <HAL_DFSDM_ChannelMspInit+0x40>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a76      	ldr	r2, [pc, #472]	; (8001ff4 <HAL_DFSDM_ChannelMspInit+0x200>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d009      	beq.n	8001e34 <HAL_DFSDM_ChannelMspInit+0x40>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a74      	ldr	r2, [pc, #464]	; (8001ff8 <HAL_DFSDM_ChannelMspInit+0x204>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d004      	beq.n	8001e34 <HAL_DFSDM_ChannelMspInit+0x40>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a73      	ldr	r2, [pc, #460]	; (8001ffc <HAL_DFSDM_ChannelMspInit+0x208>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d154      	bne.n	8001ede <HAL_DFSDM_ChannelMspInit+0xea>
 8001e34:	4b72      	ldr	r3, [pc, #456]	; (8002000 <HAL_DFSDM_ChannelMspInit+0x20c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d150      	bne.n	8001ede <HAL_DFSDM_ChannelMspInit+0xea>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	623b      	str	r3, [r7, #32]
 8001e40:	4b70      	ldr	r3, [pc, #448]	; (8002004 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e44:	4a6f      	ldr	r2, [pc, #444]	; (8002004 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e4a:	6453      	str	r3, [r2, #68]	; 0x44
 8001e4c:	4b6d      	ldr	r3, [pc, #436]	; (8002004 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e54:	623b      	str	r3, [r7, #32]
 8001e56:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61fb      	str	r3, [r7, #28]
 8001e5c:	4b69      	ldr	r3, [pc, #420]	; (8002004 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e60:	4a68      	ldr	r2, [pc, #416]	; (8002004 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	6313      	str	r3, [r2, #48]	; 0x30
 8001e68:	4b66      	ldr	r3, [pc, #408]	; (8002004 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	61fb      	str	r3, [r7, #28]
 8001e72:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e74:	2300      	movs	r3, #0
 8001e76:	61bb      	str	r3, [r7, #24]
 8001e78:	4b62      	ldr	r3, [pc, #392]	; (8002004 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7c:	4a61      	ldr	r2, [pc, #388]	; (8002004 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001e7e:	f043 0308 	orr.w	r3, r3, #8
 8001e82:	6313      	str	r3, [r2, #48]	; 0x30
 8001e84:	4b5f      	ldr	r3, [pc, #380]	; (8002004 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e88:	f003 0308 	and.w	r3, r3, #8
 8001e8c:	61bb      	str	r3, [r7, #24]
 8001e8e:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8001e90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e96:	2302      	movs	r3, #2
 8001e98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001ea2:	2306      	movs	r3, #6
 8001ea4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4856      	ldr	r0, [pc, #344]	; (8002008 <HAL_DFSDM_ChannelMspInit+0x214>)
 8001eae:	f002 ff25 	bl	8004cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 8001eb2:	2340      	movs	r3, #64	; 0x40
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001ec2:	2306      	movs	r3, #6
 8001ec4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eca:	4619      	mov	r1, r3
 8001ecc:	484f      	ldr	r0, [pc, #316]	; (800200c <HAL_DFSDM_ChannelMspInit+0x218>)
 8001ece:	f002 ff15 	bl	8004cfc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001ed2:	4b4b      	ldr	r3, [pc, #300]	; (8002000 <HAL_DFSDM_ChannelMspInit+0x20c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	4a49      	ldr	r2, [pc, #292]	; (8002000 <HAL_DFSDM_ChannelMspInit+0x20c>)
 8001eda:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 8001edc:	e084      	b.n	8001fe8 <HAL_DFSDM_ChannelMspInit+0x1f4>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a43      	ldr	r2, [pc, #268]	; (8001ff0 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d07f      	beq.n	8001fe8 <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a41      	ldr	r2, [pc, #260]	; (8001ff4 <HAL_DFSDM_ChannelMspInit+0x200>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d07a      	beq.n	8001fe8 <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a40      	ldr	r2, [pc, #256]	; (8001ff8 <HAL_DFSDM_ChannelMspInit+0x204>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d075      	beq.n	8001fe8 <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a3e      	ldr	r2, [pc, #248]	; (8001ffc <HAL_DFSDM_ChannelMspInit+0x208>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d070      	beq.n	8001fe8 <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001f06:	4b42      	ldr	r3, [pc, #264]	; (8002010 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d16c      	bne.n	8001fe8 <HAL_DFSDM_ChannelMspInit+0x1f4>
    __HAL_RCC_DFSDM2_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
 8001f12:	4b3c      	ldr	r3, [pc, #240]	; (8002004 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	4a3b      	ldr	r2, [pc, #236]	; (8002004 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001f18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f1e:	4b39      	ldr	r3, [pc, #228]	; (8002004 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	4b35      	ldr	r3, [pc, #212]	; (8002004 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	4a34      	ldr	r2, [pc, #208]	; (8002004 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3a:	4b32      	ldr	r3, [pc, #200]	; (8002004 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	4b2e      	ldr	r3, [pc, #184]	; (8002004 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	4a2d      	ldr	r2, [pc, #180]	; (8002004 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001f50:	f043 0308 	orr.w	r3, r3, #8
 8001f54:	6313      	str	r3, [r2, #48]	; 0x30
 8001f56:	4b2b      	ldr	r3, [pc, #172]	; (8002004 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	f003 0308 	and.w	r3, r3, #8
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	4b27      	ldr	r3, [pc, #156]	; (8002004 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	4a26      	ldr	r2, [pc, #152]	; (8002004 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001f6c:	f043 0302 	orr.w	r3, r3, #2
 8001f70:	6313      	str	r3, [r2, #48]	; 0x30
 8001f72:	4b24      	ldr	r3, [pc, #144]	; (8002004 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	60bb      	str	r3, [r7, #8]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 8001f7e:	2380      	movs	r3, #128	; 0x80
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f82:	2302      	movs	r3, #2
 8001f84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 8001f8e:	2307      	movs	r3, #7
 8001f90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f96:	4619      	mov	r1, r3
 8001f98:	481b      	ldr	r0, [pc, #108]	; (8002008 <HAL_DFSDM_ChannelMspInit+0x214>)
 8001f9a:	f002 feaf 	bl	8004cfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 8001f9e:	2304      	movs	r3, #4
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001faa:	2300      	movs	r3, #0
 8001fac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4814      	ldr	r0, [pc, #80]	; (800200c <HAL_DFSDM_ChannelMspInit+0x218>)
 8001fba:	f002 fe9f 	bl	8004cfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 8001fbe:	2380      	movs	r3, #128	; 0x80
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 8001fce:	2306      	movs	r3, #6
 8001fd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 8001fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	480e      	ldr	r0, [pc, #56]	; (8002014 <HAL_DFSDM_ChannelMspInit+0x220>)
 8001fda:	f002 fe8f 	bl	8004cfc <HAL_GPIO_Init>
  DFSDM2_Init++;
 8001fde:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	4a0a      	ldr	r2, [pc, #40]	; (8002010 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8001fe6:	6013      	str	r3, [r2, #0]
}
 8001fe8:	bf00      	nop
 8001fea:	3738      	adds	r7, #56	; 0x38
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40016000 	.word	0x40016000
 8001ff4:	40016020 	.word	0x40016020
 8001ff8:	40016040 	.word	0x40016040
 8001ffc:	40016060 	.word	0x40016060
 8002000:	200001c8 	.word	0x200001c8
 8002004:	40023800 	.word	0x40023800
 8002008:	40020000 	.word	0x40020000
 800200c:	40020c00 	.word	0x40020c00
 8002010:	200001cc 	.word	0x200001cc
 8002014:	40020400 	.word	0x40020400

08002018 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08a      	sub	sp, #40	; 0x28
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	f107 0314 	add.w	r3, r7, #20
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a19      	ldr	r2, [pc, #100]	; (800209c <HAL_FMPI2C_MspInit+0x84>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d12b      	bne.n	8002092 <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	4b18      	ldr	r3, [pc, #96]	; (80020a0 <HAL_FMPI2C_MspInit+0x88>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	4a17      	ldr	r2, [pc, #92]	; (80020a0 <HAL_FMPI2C_MspInit+0x88>)
 8002044:	f043 0304 	orr.w	r3, r3, #4
 8002048:	6313      	str	r3, [r2, #48]	; 0x30
 800204a:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <HAL_FMPI2C_MspInit+0x88>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	f003 0304 	and.w	r3, r3, #4
 8002052:	613b      	str	r3, [r7, #16]
 8002054:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 8002056:	23c0      	movs	r3, #192	; 0xc0
 8002058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800205a:	2312      	movs	r3, #18
 800205c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800205e:	2301      	movs	r3, #1
 8002060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002062:	2303      	movs	r3, #3
 8002064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8002066:	2304      	movs	r3, #4
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800206a:	f107 0314 	add.w	r3, r7, #20
 800206e:	4619      	mov	r1, r3
 8002070:	480c      	ldr	r0, [pc, #48]	; (80020a4 <HAL_FMPI2C_MspInit+0x8c>)
 8002072:	f002 fe43 	bl	8004cfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <HAL_FMPI2C_MspInit+0x88>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	4a08      	ldr	r2, [pc, #32]	; (80020a0 <HAL_FMPI2C_MspInit+0x88>)
 8002080:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002084:	6413      	str	r3, [r2, #64]	; 0x40
 8002086:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <HAL_FMPI2C_MspInit+0x88>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 8002092:	bf00      	nop
 8002094:	3728      	adds	r7, #40	; 0x28
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40006000 	.word	0x40006000
 80020a0:	40023800 	.word	0x40023800
 80020a4:	40020800 	.word	0x40020800

080020a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08a      	sub	sp, #40	; 0x28
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b0:	f107 0314 	add.w	r3, r7, #20
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a19      	ldr	r2, [pc, #100]	; (800212c <HAL_I2C_MspInit+0x84>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d12c      	bne.n	8002124 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	4b18      	ldr	r3, [pc, #96]	; (8002130 <HAL_I2C_MspInit+0x88>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	4a17      	ldr	r2, [pc, #92]	; (8002130 <HAL_I2C_MspInit+0x88>)
 80020d4:	f043 0302 	orr.w	r3, r3, #2
 80020d8:	6313      	str	r3, [r2, #48]	; 0x30
 80020da:	4b15      	ldr	r3, [pc, #84]	; (8002130 <HAL_I2C_MspInit+0x88>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80020e6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020ec:	2312      	movs	r3, #18
 80020ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020f0:	2301      	movs	r3, #1
 80020f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f4:	2303      	movs	r3, #3
 80020f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80020f8:	2304      	movs	r3, #4
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020fc:	f107 0314 	add.w	r3, r7, #20
 8002100:	4619      	mov	r1, r3
 8002102:	480c      	ldr	r0, [pc, #48]	; (8002134 <HAL_I2C_MspInit+0x8c>)
 8002104:	f002 fdfa 	bl	8004cfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	4b08      	ldr	r3, [pc, #32]	; (8002130 <HAL_I2C_MspInit+0x88>)
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	4a07      	ldr	r2, [pc, #28]	; (8002130 <HAL_I2C_MspInit+0x88>)
 8002112:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002116:	6413      	str	r3, [r2, #64]	; 0x40
 8002118:	4b05      	ldr	r3, [pc, #20]	; (8002130 <HAL_I2C_MspInit+0x88>)
 800211a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002124:	bf00      	nop
 8002126:	3728      	adds	r7, #40	; 0x28
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40005800 	.word	0x40005800
 8002130:	40023800 	.word	0x40023800
 8002134:	40020400 	.word	0x40020400

08002138 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b08c      	sub	sp, #48	; 0x30
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002140:	f107 031c 	add.w	r3, r7, #28
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a4f      	ldr	r2, [pc, #316]	; (8002294 <HAL_I2S_MspInit+0x15c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	f040 8097 	bne.w	800228a <HAL_I2S_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800215c:	2300      	movs	r3, #0
 800215e:	61bb      	str	r3, [r7, #24]
 8002160:	4b4d      	ldr	r3, [pc, #308]	; (8002298 <HAL_I2S_MspInit+0x160>)
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	4a4c      	ldr	r2, [pc, #304]	; (8002298 <HAL_I2S_MspInit+0x160>)
 8002166:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800216a:	6413      	str	r3, [r2, #64]	; 0x40
 800216c:	4b4a      	ldr	r3, [pc, #296]	; (8002298 <HAL_I2S_MspInit+0x160>)
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002174:	61bb      	str	r3, [r7, #24]
 8002176:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	4b46      	ldr	r3, [pc, #280]	; (8002298 <HAL_I2S_MspInit+0x160>)
 800217e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002180:	4a45      	ldr	r2, [pc, #276]	; (8002298 <HAL_I2S_MspInit+0x160>)
 8002182:	f043 0304 	orr.w	r3, r3, #4
 8002186:	6313      	str	r3, [r2, #48]	; 0x30
 8002188:	4b43      	ldr	r3, [pc, #268]	; (8002298 <HAL_I2S_MspInit+0x160>)
 800218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	617b      	str	r3, [r7, #20]
 8002192:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002194:	2300      	movs	r3, #0
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	4b3f      	ldr	r3, [pc, #252]	; (8002298 <HAL_I2S_MspInit+0x160>)
 800219a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219c:	4a3e      	ldr	r2, [pc, #248]	; (8002298 <HAL_I2S_MspInit+0x160>)
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	6313      	str	r3, [r2, #48]	; 0x30
 80021a4:	4b3c      	ldr	r3, [pc, #240]	; (8002298 <HAL_I2S_MspInit+0x160>)
 80021a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	613b      	str	r3, [r7, #16]
 80021ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021b0:	2300      	movs	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	4b38      	ldr	r3, [pc, #224]	; (8002298 <HAL_I2S_MspInit+0x160>)
 80021b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b8:	4a37      	ldr	r2, [pc, #220]	; (8002298 <HAL_I2S_MspInit+0x160>)
 80021ba:	f043 0308 	orr.w	r3, r3, #8
 80021be:	6313      	str	r3, [r2, #48]	; 0x30
 80021c0:	4b35      	ldr	r3, [pc, #212]	; (8002298 <HAL_I2S_MspInit+0x160>)
 80021c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c4:	f003 0308 	and.w	r3, r3, #8
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021cc:	2300      	movs	r3, #0
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	4b31      	ldr	r3, [pc, #196]	; (8002298 <HAL_I2S_MspInit+0x160>)
 80021d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d4:	4a30      	ldr	r2, [pc, #192]	; (8002298 <HAL_I2S_MspInit+0x160>)
 80021d6:	f043 0302 	orr.w	r3, r3, #2
 80021da:	6313      	str	r3, [r2, #48]	; 0x30
 80021dc:	4b2e      	ldr	r3, [pc, #184]	; (8002298 <HAL_I2S_MspInit+0x160>)
 80021de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 80021e8:	2304      	movs	r3, #4
 80021ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ec:	2302      	movs	r3, #2
 80021ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f4:	2300      	movs	r3, #0
 80021f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 80021f8:	2306      	movs	r3, #6
 80021fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 80021fc:	f107 031c 	add.w	r3, r7, #28
 8002200:	4619      	mov	r1, r3
 8002202:	4826      	ldr	r0, [pc, #152]	; (800229c <HAL_I2S_MspInit+0x164>)
 8002204:	f002 fd7a 	bl	8004cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 8002208:	2308      	movs	r3, #8
 800220a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220c:	2302      	movs	r3, #2
 800220e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002214:	2300      	movs	r3, #0
 8002216:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002218:	2305      	movs	r3, #5
 800221a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 800221c:	f107 031c 	add.w	r3, r7, #28
 8002220:	4619      	mov	r1, r3
 8002222:	481e      	ldr	r0, [pc, #120]	; (800229c <HAL_I2S_MspInit+0x164>)
 8002224:	f002 fd6a 	bl	8004cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 8002228:	2308      	movs	r3, #8
 800222a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222c:	2302      	movs	r3, #2
 800222e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002234:	2300      	movs	r3, #0
 8002236:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002238:	2305      	movs	r3, #5
 800223a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 800223c:	f107 031c 	add.w	r3, r7, #28
 8002240:	4619      	mov	r1, r3
 8002242:	4817      	ldr	r0, [pc, #92]	; (80022a0 <HAL_I2S_MspInit+0x168>)
 8002244:	f002 fd5a 	bl	8004cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 8002248:	2308      	movs	r3, #8
 800224a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224c:	2302      	movs	r3, #2
 800224e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002254:	2300      	movs	r3, #0
 8002256:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002258:	2305      	movs	r3, #5
 800225a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 800225c:	f107 031c 	add.w	r3, r7, #28
 8002260:	4619      	mov	r1, r3
 8002262:	4810      	ldr	r0, [pc, #64]	; (80022a4 <HAL_I2S_MspInit+0x16c>)
 8002264:	f002 fd4a 	bl	8004cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 8002268:	f44f 7300 	mov.w	r3, #512	; 0x200
 800226c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226e:	2302      	movs	r3, #2
 8002270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002272:	2300      	movs	r3, #0
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002276:	2300      	movs	r3, #0
 8002278:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800227a:	2305      	movs	r3, #5
 800227c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 800227e:	f107 031c 	add.w	r3, r7, #28
 8002282:	4619      	mov	r1, r3
 8002284:	4808      	ldr	r0, [pc, #32]	; (80022a8 <HAL_I2S_MspInit+0x170>)
 8002286:	f002 fd39 	bl	8004cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800228a:	bf00      	nop
 800228c:	3730      	adds	r7, #48	; 0x30
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40003800 	.word	0x40003800
 8002298:	40023800 	.word	0x40023800
 800229c:	40020800 	.word	0x40020800
 80022a0:	40020000 	.word	0x40020000
 80022a4:	40020c00 	.word	0x40020c00
 80022a8:	40020400 	.word	0x40020400

080022ac <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08e      	sub	sp, #56	; 0x38
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a56      	ldr	r2, [pc, #344]	; (8002424 <HAL_QSPI_MspInit+0x178>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	f040 80a6 	bne.w	800241c <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80022d0:	2300      	movs	r3, #0
 80022d2:	623b      	str	r3, [r7, #32]
 80022d4:	4b54      	ldr	r3, [pc, #336]	; (8002428 <HAL_QSPI_MspInit+0x17c>)
 80022d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d8:	4a53      	ldr	r2, [pc, #332]	; (8002428 <HAL_QSPI_MspInit+0x17c>)
 80022da:	f043 0302 	orr.w	r3, r3, #2
 80022de:	6393      	str	r3, [r2, #56]	; 0x38
 80022e0:	4b51      	ldr	r3, [pc, #324]	; (8002428 <HAL_QSPI_MspInit+0x17c>)
 80022e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	623b      	str	r3, [r7, #32]
 80022ea:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022ec:	2300      	movs	r3, #0
 80022ee:	61fb      	str	r3, [r7, #28]
 80022f0:	4b4d      	ldr	r3, [pc, #308]	; (8002428 <HAL_QSPI_MspInit+0x17c>)
 80022f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f4:	4a4c      	ldr	r2, [pc, #304]	; (8002428 <HAL_QSPI_MspInit+0x17c>)
 80022f6:	f043 0310 	orr.w	r3, r3, #16
 80022fa:	6313      	str	r3, [r2, #48]	; 0x30
 80022fc:	4b4a      	ldr	r3, [pc, #296]	; (8002428 <HAL_QSPI_MspInit+0x17c>)
 80022fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002300:	f003 0310 	and.w	r3, r3, #16
 8002304:	61fb      	str	r3, [r7, #28]
 8002306:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002308:	2300      	movs	r3, #0
 800230a:	61bb      	str	r3, [r7, #24]
 800230c:	4b46      	ldr	r3, [pc, #280]	; (8002428 <HAL_QSPI_MspInit+0x17c>)
 800230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002310:	4a45      	ldr	r2, [pc, #276]	; (8002428 <HAL_QSPI_MspInit+0x17c>)
 8002312:	f043 0320 	orr.w	r3, r3, #32
 8002316:	6313      	str	r3, [r2, #48]	; 0x30
 8002318:	4b43      	ldr	r3, [pc, #268]	; (8002428 <HAL_QSPI_MspInit+0x17c>)
 800231a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231c:	f003 0320 	and.w	r3, r3, #32
 8002320:	61bb      	str	r3, [r7, #24]
 8002322:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]
 8002328:	4b3f      	ldr	r3, [pc, #252]	; (8002428 <HAL_QSPI_MspInit+0x17c>)
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	4a3e      	ldr	r2, [pc, #248]	; (8002428 <HAL_QSPI_MspInit+0x17c>)
 800232e:	f043 0302 	orr.w	r3, r3, #2
 8002332:	6313      	str	r3, [r2, #48]	; 0x30
 8002334:	4b3c      	ldr	r3, [pc, #240]	; (8002428 <HAL_QSPI_MspInit+0x17c>)
 8002336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002340:	2300      	movs	r3, #0
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	4b38      	ldr	r3, [pc, #224]	; (8002428 <HAL_QSPI_MspInit+0x17c>)
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	4a37      	ldr	r2, [pc, #220]	; (8002428 <HAL_QSPI_MspInit+0x17c>)
 800234a:	f043 0308 	orr.w	r3, r3, #8
 800234e:	6313      	str	r3, [r2, #48]	; 0x30
 8002350:	4b35      	ldr	r3, [pc, #212]	; (8002428 <HAL_QSPI_MspInit+0x17c>)
 8002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002354:	f003 0308 	and.w	r3, r3, #8
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800235c:	2300      	movs	r3, #0
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	4b31      	ldr	r3, [pc, #196]	; (8002428 <HAL_QSPI_MspInit+0x17c>)
 8002362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002364:	4a30      	ldr	r2, [pc, #192]	; (8002428 <HAL_QSPI_MspInit+0x17c>)
 8002366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800236a:	6313      	str	r3, [r2, #48]	; 0x30
 800236c:	4b2e      	ldr	r3, [pc, #184]	; (8002428 <HAL_QSPI_MspInit+0x17c>)
 800236e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 8002378:	2304      	movs	r3, #4
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237c:	2302      	movs	r3, #2
 800237e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002384:	2303      	movs	r3, #3
 8002386:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8002388:	2309      	movs	r3, #9
 800238a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 800238c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002390:	4619      	mov	r1, r3
 8002392:	4826      	ldr	r0, [pc, #152]	; (800242c <HAL_QSPI_MspInit+0x180>)
 8002394:	f002 fcb2 	bl	8004cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8002398:	f44f 7340 	mov.w	r3, #768	; 0x300
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239e:	2302      	movs	r3, #2
 80023a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a6:	2303      	movs	r3, #3
 80023a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80023aa:	230a      	movs	r3, #10
 80023ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023b2:	4619      	mov	r1, r3
 80023b4:	481e      	ldr	r0, [pc, #120]	; (8002430 <HAL_QSPI_MspInit+0x184>)
 80023b6:	f002 fca1 	bl	8004cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 80023ba:	2304      	movs	r3, #4
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023be:	2302      	movs	r3, #2
 80023c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c6:	2303      	movs	r3, #3
 80023c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80023ca:	2309      	movs	r3, #9
 80023cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 80023ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023d2:	4619      	mov	r1, r3
 80023d4:	4817      	ldr	r0, [pc, #92]	; (8002434 <HAL_QSPI_MspInit+0x188>)
 80023d6:	f002 fc91 	bl	8004cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 80023da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e0:	2302      	movs	r3, #2
 80023e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e8:	2303      	movs	r3, #3
 80023ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80023ec:	2309      	movs	r3, #9
 80023ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 80023f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023f4:	4619      	mov	r1, r3
 80023f6:	4810      	ldr	r0, [pc, #64]	; (8002438 <HAL_QSPI_MspInit+0x18c>)
 80023f8:	f002 fc80 	bl	8004cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 80023fc:	2340      	movs	r3, #64	; 0x40
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002400:	2302      	movs	r3, #2
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002408:	2303      	movs	r3, #3
 800240a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800240c:	230a      	movs	r3, #10
 800240e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8002410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002414:	4619      	mov	r1, r3
 8002416:	4809      	ldr	r0, [pc, #36]	; (800243c <HAL_QSPI_MspInit+0x190>)
 8002418:	f002 fc70 	bl	8004cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800241c:	bf00      	nop
 800241e:	3738      	adds	r7, #56	; 0x38
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	a0001000 	.word	0xa0001000
 8002428:	40023800 	.word	0x40023800
 800242c:	40021000 	.word	0x40021000
 8002430:	40021400 	.word	0x40021400
 8002434:	40020400 	.word	0x40020400
 8002438:	40020c00 	.word	0x40020c00
 800243c:	40021800 	.word	0x40021800

08002440 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08a      	sub	sp, #40	; 0x28
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002448:	f107 0314 	add.w	r3, r7, #20
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a28      	ldr	r2, [pc, #160]	; (8002500 <HAL_SD_MspInit+0xc0>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d14a      	bne.n	80024f8 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	4b27      	ldr	r3, [pc, #156]	; (8002504 <HAL_SD_MspInit+0xc4>)
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	4a26      	ldr	r2, [pc, #152]	; (8002504 <HAL_SD_MspInit+0xc4>)
 800246c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002470:	6453      	str	r3, [r2, #68]	; 0x44
 8002472:	4b24      	ldr	r3, [pc, #144]	; (8002504 <HAL_SD_MspInit+0xc4>)
 8002474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002476:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800247a:	613b      	str	r3, [r7, #16]
 800247c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	4b20      	ldr	r3, [pc, #128]	; (8002504 <HAL_SD_MspInit+0xc4>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	4a1f      	ldr	r2, [pc, #124]	; (8002504 <HAL_SD_MspInit+0xc4>)
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	6313      	str	r3, [r2, #48]	; 0x30
 800248e:	4b1d      	ldr	r3, [pc, #116]	; (8002504 <HAL_SD_MspInit+0xc4>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	60bb      	str	r3, [r7, #8]
 800249e:	4b19      	ldr	r3, [pc, #100]	; (8002504 <HAL_SD_MspInit+0xc4>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	4a18      	ldr	r2, [pc, #96]	; (8002504 <HAL_SD_MspInit+0xc4>)
 80024a4:	f043 0304 	orr.w	r3, r3, #4
 80024a8:	6313      	str	r3, [r2, #48]	; 0x30
 80024aa:	4b16      	ldr	r3, [pc, #88]	; (8002504 <HAL_SD_MspInit+0xc4>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	60bb      	str	r3, [r7, #8]
 80024b4:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 80024b6:	2340      	movs	r3, #64	; 0x40
 80024b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ba:	2302      	movs	r3, #2
 80024bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c2:	2303      	movs	r3, #3
 80024c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80024c6:	230c      	movs	r3, #12
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 80024ca:	f107 0314 	add.w	r3, r7, #20
 80024ce:	4619      	mov	r1, r3
 80024d0:	480d      	ldr	r0, [pc, #52]	; (8002508 <HAL_SD_MspInit+0xc8>)
 80024d2:	f002 fc13 	bl	8004cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin
 80024d6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80024da:	617b      	str	r3, [r7, #20]
                          |SD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024dc:	2302      	movs	r3, #2
 80024de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e4:	2303      	movs	r3, #3
 80024e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80024e8:	230c      	movs	r3, #12
 80024ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ec:	f107 0314 	add.w	r3, r7, #20
 80024f0:	4619      	mov	r1, r3
 80024f2:	4806      	ldr	r0, [pc, #24]	; (800250c <HAL_SD_MspInit+0xcc>)
 80024f4:	f002 fc02 	bl	8004cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80024f8:	bf00      	nop
 80024fa:	3728      	adds	r7, #40	; 0x28
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40012c00 	.word	0x40012c00
 8002504:	40023800 	.word	0x40023800
 8002508:	40020000 	.word	0x40020000
 800250c:	40020800 	.word	0x40020800

08002510 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08c      	sub	sp, #48	; 0x30
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002518:	f107 031c 	add.w	r3, r7, #28
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	60da      	str	r2, [r3, #12]
 8002526:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART10)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a37      	ldr	r2, [pc, #220]	; (800260c <HAL_UART_MspInit+0xfc>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d12d      	bne.n	800258e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART10_MspInit 0 */

  /* USER CODE END UART10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART10_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	61bb      	str	r3, [r7, #24]
 8002536:	4b36      	ldr	r3, [pc, #216]	; (8002610 <HAL_UART_MspInit+0x100>)
 8002538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253a:	4a35      	ldr	r2, [pc, #212]	; (8002610 <HAL_UART_MspInit+0x100>)
 800253c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002540:	6453      	str	r3, [r2, #68]	; 0x44
 8002542:	4b33      	ldr	r3, [pc, #204]	; (8002610 <HAL_UART_MspInit+0x100>)
 8002544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800254a:	61bb      	str	r3, [r7, #24]
 800254c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	4b2f      	ldr	r3, [pc, #188]	; (8002610 <HAL_UART_MspInit+0x100>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	4a2e      	ldr	r2, [pc, #184]	; (8002610 <HAL_UART_MspInit+0x100>)
 8002558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800255c:	6313      	str	r3, [r2, #48]	; 0x30
 800255e:	4b2c      	ldr	r3, [pc, #176]	; (8002610 <HAL_UART_MspInit+0x100>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002566:	617b      	str	r3, [r7, #20]
 8002568:	697b      	ldr	r3, [r7, #20]
    /**UART10 GPIO Configuration
    PG11     ------> UART10_RX
    PG12     ------> UART10_TX
    */
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 800256a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800256e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002570:	2302      	movs	r3, #2
 8002572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002574:	2301      	movs	r3, #1
 8002576:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002578:	2303      	movs	r3, #3
 800257a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 800257c:	230b      	movs	r3, #11
 800257e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002580:	f107 031c 	add.w	r3, r7, #28
 8002584:	4619      	mov	r1, r3
 8002586:	4823      	ldr	r0, [pc, #140]	; (8002614 <HAL_UART_MspInit+0x104>)
 8002588:	f002 fbb8 	bl	8004cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800258c:	e039      	b.n	8002602 <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART6)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a21      	ldr	r2, [pc, #132]	; (8002618 <HAL_UART_MspInit+0x108>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d134      	bne.n	8002602 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002598:	2300      	movs	r3, #0
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	4b1c      	ldr	r3, [pc, #112]	; (8002610 <HAL_UART_MspInit+0x100>)
 800259e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a0:	4a1b      	ldr	r2, [pc, #108]	; (8002610 <HAL_UART_MspInit+0x100>)
 80025a2:	f043 0320 	orr.w	r3, r3, #32
 80025a6:	6453      	str	r3, [r2, #68]	; 0x44
 80025a8:	4b19      	ldr	r3, [pc, #100]	; (8002610 <HAL_UART_MspInit+0x100>)
 80025aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ac:	f003 0320 	and.w	r3, r3, #32
 80025b0:	613b      	str	r3, [r7, #16]
 80025b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80025b4:	2300      	movs	r3, #0
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	4b15      	ldr	r3, [pc, #84]	; (8002610 <HAL_UART_MspInit+0x100>)
 80025ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025bc:	4a14      	ldr	r2, [pc, #80]	; (8002610 <HAL_UART_MspInit+0x100>)
 80025be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025c2:	6313      	str	r3, [r2, #48]	; 0x30
 80025c4:	4b12      	ldr	r3, [pc, #72]	; (8002610 <HAL_UART_MspInit+0x100>)
 80025c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 80025d0:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80025d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d6:	2302      	movs	r3, #2
 80025d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025de:	2303      	movs	r3, #3
 80025e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80025e2:	2308      	movs	r3, #8
 80025e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025e6:	f107 031c 	add.w	r3, r7, #28
 80025ea:	4619      	mov	r1, r3
 80025ec:	4809      	ldr	r0, [pc, #36]	; (8002614 <HAL_UART_MspInit+0x104>)
 80025ee:	f002 fb85 	bl	8004cfc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80025f2:	2200      	movs	r2, #0
 80025f4:	2100      	movs	r1, #0
 80025f6:	2047      	movs	r0, #71	; 0x47
 80025f8:	f002 f838 	bl	800466c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80025fc:	2047      	movs	r0, #71	; 0x47
 80025fe:	f002 f851 	bl	80046a4 <HAL_NVIC_EnableIRQ>
}
 8002602:	bf00      	nop
 8002604:	3730      	adds	r7, #48	; 0x30
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40011c00 	.word	0x40011c00
 8002610:	40023800 	.word	0x40023800
 8002614:	40021800 	.word	0x40021800
 8002618:	40011400 	.word	0x40011400

0800261c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002622:	1d3b      	adds	r3, r7, #4
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]
 800262e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8002630:	4b2c      	ldr	r3, [pc, #176]	; (80026e4 <HAL_FSMC_MspInit+0xc8>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d151      	bne.n	80026dc <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8002638:	4b2a      	ldr	r3, [pc, #168]	; (80026e4 <HAL_FSMC_MspInit+0xc8>)
 800263a:	2201      	movs	r2, #1
 800263c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	603b      	str	r3, [r7, #0]
 8002642:	4b29      	ldr	r3, [pc, #164]	; (80026e8 <HAL_FSMC_MspInit+0xcc>)
 8002644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002646:	4a28      	ldr	r2, [pc, #160]	; (80026e8 <HAL_FSMC_MspInit+0xcc>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	6393      	str	r3, [r2, #56]	; 0x38
 800264e:	4b26      	ldr	r3, [pc, #152]	; (80026e8 <HAL_FSMC_MspInit+0xcc>)
 8002650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	603b      	str	r3, [r7, #0]
 8002658:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 800265a:	f24f 033f 	movw	r3, #61503	; 0xf03f
 800265e:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002660:	2302      	movs	r3, #2
 8002662:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002668:	2303      	movs	r3, #3
 800266a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800266c:	230c      	movs	r3, #12
 800266e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002670:	1d3b      	adds	r3, r7, #4
 8002672:	4619      	mov	r1, r3
 8002674:	481d      	ldr	r0, [pc, #116]	; (80026ec <HAL_FSMC_MspInit+0xd0>)
 8002676:	f002 fb41 	bl	8004cfc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 800267a:	f240 433f 	movw	r3, #1087	; 0x43f
 800267e:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002680:	2302      	movs	r3, #2
 8002682:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002684:	2300      	movs	r3, #0
 8002686:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002688:	2303      	movs	r3, #3
 800268a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800268c:	230c      	movs	r3, #12
 800268e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002690:	1d3b      	adds	r3, r7, #4
 8002692:	4619      	mov	r1, r3
 8002694:	4816      	ldr	r0, [pc, #88]	; (80026f0 <HAL_FSMC_MspInit+0xd4>)
 8002696:	f002 fb31 	bl	8004cfc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 800269a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800269e:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a0:	2302      	movs	r3, #2
 80026a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a8:	2303      	movs	r3, #3
 80026aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80026ac:	230c      	movs	r3, #12
 80026ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026b0:	1d3b      	adds	r3, r7, #4
 80026b2:	4619      	mov	r1, r3
 80026b4:	480f      	ldr	r0, [pc, #60]	; (80026f4 <HAL_FSMC_MspInit+0xd8>)
 80026b6:	f002 fb21 	bl	8004cfc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 80026ba:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 80026be:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c0:	2302      	movs	r3, #2
 80026c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c8:	2303      	movs	r3, #3
 80026ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80026cc:	230c      	movs	r3, #12
 80026ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026d0:	1d3b      	adds	r3, r7, #4
 80026d2:	4619      	mov	r1, r3
 80026d4:	4808      	ldr	r0, [pc, #32]	; (80026f8 <HAL_FSMC_MspInit+0xdc>)
 80026d6:	f002 fb11 	bl	8004cfc <HAL_GPIO_Init>
 80026da:	e000      	b.n	80026de <HAL_FSMC_MspInit+0xc2>
    return;
 80026dc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	200001d0 	.word	0x200001d0
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40021400 	.word	0x40021400
 80026f0:	40021800 	.word	0x40021800
 80026f4:	40021000 	.word	0x40021000
 80026f8:	40020c00 	.word	0x40020c00

080026fc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002704:	f7ff ff8a 	bl	800261c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002708:	bf00      	nop
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08c      	sub	sp, #48	; 0x30
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002720:	2200      	movs	r2, #0
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	2036      	movs	r0, #54	; 0x36
 8002726:	f001 ffa1 	bl	800466c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800272a:	2036      	movs	r0, #54	; 0x36
 800272c:	f001 ffba 	bl	80046a4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002730:	2300      	movs	r3, #0
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	4b1e      	ldr	r3, [pc, #120]	; (80027b0 <HAL_InitTick+0xa0>)
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	4a1d      	ldr	r2, [pc, #116]	; (80027b0 <HAL_InitTick+0xa0>)
 800273a:	f043 0310 	orr.w	r3, r3, #16
 800273e:	6413      	str	r3, [r2, #64]	; 0x40
 8002740:	4b1b      	ldr	r3, [pc, #108]	; (80027b0 <HAL_InitTick+0xa0>)
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	f003 0310 	and.w	r3, r3, #16
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800274c:	f107 0210 	add.w	r2, r7, #16
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	4611      	mov	r1, r2
 8002756:	4618      	mov	r0, r3
 8002758:	f005 fa12 	bl	8007b80 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800275c:	f005 f9e8 	bl	8007b30 <HAL_RCC_GetPCLK1Freq>
 8002760:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002764:	4a13      	ldr	r2, [pc, #76]	; (80027b4 <HAL_InitTick+0xa4>)
 8002766:	fba2 2303 	umull	r2, r3, r2, r3
 800276a:	0c9b      	lsrs	r3, r3, #18
 800276c:	3b01      	subs	r3, #1
 800276e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002770:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <HAL_InitTick+0xa8>)
 8002772:	4a12      	ldr	r2, [pc, #72]	; (80027bc <HAL_InitTick+0xac>)
 8002774:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002776:	4b10      	ldr	r3, [pc, #64]	; (80027b8 <HAL_InitTick+0xa8>)
 8002778:	f240 32e7 	movw	r2, #999	; 0x3e7
 800277c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800277e:	4a0e      	ldr	r2, [pc, #56]	; (80027b8 <HAL_InitTick+0xa8>)
 8002780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002782:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002784:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <HAL_InitTick+0xa8>)
 8002786:	2200      	movs	r2, #0
 8002788:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800278a:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <HAL_InitTick+0xa8>)
 800278c:	2200      	movs	r2, #0
 800278e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002790:	4809      	ldr	r0, [pc, #36]	; (80027b8 <HAL_InitTick+0xa8>)
 8002792:	f006 fdf5 	bl	8009380 <HAL_TIM_Base_Init>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d104      	bne.n	80027a6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800279c:	4806      	ldr	r0, [pc, #24]	; (80027b8 <HAL_InitTick+0xa8>)
 800279e:	f006 fe24 	bl	80093ea <HAL_TIM_Base_Start_IT>
 80027a2:	4603      	mov	r3, r0
 80027a4:	e000      	b.n	80027a8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3730      	adds	r7, #48	; 0x30
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40023800 	.word	0x40023800
 80027b4:	431bde83 	.word	0x431bde83
 80027b8:	20004f34 	.word	0x20004f34
 80027bc:	40001000 	.word	0x40001000

080027c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ce:	b480      	push	{r7}
 80027d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027d2:	e7fe      	b.n	80027d2 <HardFault_Handler+0x4>

080027d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027d8:	e7fe      	b.n	80027d8 <MemManage_Handler+0x4>

080027da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027da:	b480      	push	{r7}
 80027dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027de:	e7fe      	b.n	80027de <BusFault_Handler+0x4>

080027e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027e4:	e7fe      	b.n	80027e4 <UsageFault_Handler+0x4>

080027e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027e6:	b480      	push	{r7}
 80027e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80027f8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80027fc:	f002 fc42 	bl	8005084 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002800:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002804:	f002 fc3e 	bl	8005084 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002808:	bf00      	nop
 800280a:	bd80      	pop	{r7, pc}

0800280c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8002810:	4803      	ldr	r0, [pc, #12]	; (8002820 <TIM6_DAC_IRQHandler+0x14>)
 8002812:	f001 ff77 	bl	8004704 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8002816:	4803      	ldr	r0, [pc, #12]	; (8002824 <TIM6_DAC_IRQHandler+0x18>)
 8002818:	f006 fe0b 	bl	8009432 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800281c:	bf00      	nop
 800281e:	bd80      	pop	{r7, pc}
 8002820:	20004d14 	.word	0x20004d14
 8002824:	20004f34 	.word	0x20004f34

08002828 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800282c:	4802      	ldr	r0, [pc, #8]	; (8002838 <OTG_FS_IRQHandler+0x10>)
 800282e:	f002 fedb 	bl	80055e8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	200053cc 	.word	0x200053cc

0800283c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002840:	4802      	ldr	r0, [pc, #8]	; (800284c <USART6_IRQHandler+0x10>)
 8002842:	f007 f829 	bl	8009898 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	20004e54 	.word	0x20004e54

08002850 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002858:	4a14      	ldr	r2, [pc, #80]	; (80028ac <_sbrk+0x5c>)
 800285a:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <_sbrk+0x60>)
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002864:	4b13      	ldr	r3, [pc, #76]	; (80028b4 <_sbrk+0x64>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d102      	bne.n	8002872 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800286c:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <_sbrk+0x64>)
 800286e:	4a12      	ldr	r2, [pc, #72]	; (80028b8 <_sbrk+0x68>)
 8002870:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002872:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <_sbrk+0x64>)
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4413      	add	r3, r2
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	429a      	cmp	r2, r3
 800287e:	d207      	bcs.n	8002890 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002880:	f00f fa9e 	bl	8011dc0 <__errno>
 8002884:	4602      	mov	r2, r0
 8002886:	230c      	movs	r3, #12
 8002888:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800288a:	f04f 33ff 	mov.w	r3, #4294967295
 800288e:	e009      	b.n	80028a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002890:	4b08      	ldr	r3, [pc, #32]	; (80028b4 <_sbrk+0x64>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002896:	4b07      	ldr	r3, [pc, #28]	; (80028b4 <_sbrk+0x64>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4413      	add	r3, r2
 800289e:	4a05      	ldr	r2, [pc, #20]	; (80028b4 <_sbrk+0x64>)
 80028a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028a2:	68fb      	ldr	r3, [r7, #12]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3718      	adds	r7, #24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	20050000 	.word	0x20050000
 80028b0:	00000400 	.word	0x00000400
 80028b4:	200001d4 	.word	0x200001d4
 80028b8:	20005698 	.word	0x20005698

080028bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028c0:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <SystemInit+0x28>)
 80028c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c6:	4a07      	ldr	r2, [pc, #28]	; (80028e4 <SystemInit+0x28>)
 80028c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80028d0:	4b04      	ldr	r3, [pc, #16]	; (80028e4 <SystemInit+0x28>)
 80028d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028d6:	609a      	str	r2, [r3, #8]
#endif
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	e000ed00 	.word	0xe000ed00

080028e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80028e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002920 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80028ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80028ee:	e003      	b.n	80028f8 <LoopCopyDataInit>

080028f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80028f0:	4b0c      	ldr	r3, [pc, #48]	; (8002924 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80028f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80028f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80028f6:	3104      	adds	r1, #4

080028f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80028f8:	480b      	ldr	r0, [pc, #44]	; (8002928 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80028fa:	4b0c      	ldr	r3, [pc, #48]	; (800292c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80028fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80028fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002900:	d3f6      	bcc.n	80028f0 <CopyDataInit>
  ldr  r2, =_sbss
 8002902:	4a0b      	ldr	r2, [pc, #44]	; (8002930 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002904:	e002      	b.n	800290c <LoopFillZerobss>

08002906 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002906:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002908:	f842 3b04 	str.w	r3, [r2], #4

0800290c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800290c:	4b09      	ldr	r3, [pc, #36]	; (8002934 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800290e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002910:	d3f9      	bcc.n	8002906 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002912:	f7ff ffd3 	bl	80028bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002916:	f00f fa59 	bl	8011dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800291a:	f7fd fe01 	bl	8000520 <main>
  bx  lr    
 800291e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002920:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002924:	08014d30 	.word	0x08014d30
  ldr  r0, =_sdata
 8002928:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800292c:	20000190 	.word	0x20000190
  ldr  r2, =_sbss
 8002930:	20000190 	.word	0x20000190
  ldr  r3, = _ebss
 8002934:	20005694 	.word	0x20005694

08002938 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002938:	e7fe      	b.n	8002938 <ADC_IRQHandler>

0800293a <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b084      	sub	sp, #16
 800293e:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002940:	f000 fd6e 	bl	8003420 <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8002944:	2200      	movs	r2, #0
 8002946:	2100      	movs	r1, #0
 8002948:	2010      	movs	r0, #16
 800294a:	f000 f9e4 	bl	8002d16 <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 800294e:	200a      	movs	r0, #10
 8002950:	f000 fd8d 	bl	800346e <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 8002954:	2200      	movs	r2, #0
 8002956:	2100      	movs	r1, #0
 8002958:	2001      	movs	r0, #1
 800295a:	f000 f9dc 	bl	8002d16 <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 800295e:	20c8      	movs	r0, #200	; 0xc8
 8002960:	f000 fd85 	bl	800346e <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 8002964:	2200      	movs	r2, #0
 8002966:	2100      	movs	r1, #0
 8002968:	2011      	movs	r0, #17
 800296a:	f000 f9d4 	bl	8002d16 <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 800296e:	2078      	movs	r0, #120	; 0x78
 8002970:	f000 fd7d 	bl	800346e <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 8002974:	2300      	movs	r3, #0
 8002976:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8002978:	463b      	mov	r3, r7
 800297a:	2201      	movs	r2, #1
 800297c:	4619      	mov	r1, r3
 800297e:	2036      	movs	r0, #54	; 0x36
 8002980:	f000 f9c9 	bl	8002d16 <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 8002984:	2305      	movs	r3, #5
 8002986:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 8002988:	463b      	mov	r3, r7
 800298a:	2201      	movs	r2, #1
 800298c:	4619      	mov	r1, r3
 800298e:	203a      	movs	r0, #58	; 0x3a
 8002990:	f000 f9c1 	bl	8002d16 <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 8002994:	2200      	movs	r2, #0
 8002996:	2100      	movs	r1, #0
 8002998:	2021      	movs	r0, #33	; 0x21
 800299a:	f000 f9bc 	bl	8002d16 <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 800299e:	2300      	movs	r3, #0
 80029a0:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 80029a2:	2300      	movs	r3, #0
 80029a4:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80029a6:	2300      	movs	r3, #0
 80029a8:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 80029aa:	23ef      	movs	r3, #239	; 0xef
 80029ac:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 80029ae:	463b      	mov	r3, r7
 80029b0:	2204      	movs	r2, #4
 80029b2:	4619      	mov	r1, r3
 80029b4:	202a      	movs	r0, #42	; 0x2a
 80029b6:	f000 f9ae 	bl	8002d16 <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 80029ba:	2300      	movs	r3, #0
 80029bc:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 80029be:	2300      	movs	r3, #0
 80029c0:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80029c2:	2300      	movs	r3, #0
 80029c4:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 80029c6:	23ef      	movs	r3, #239	; 0xef
 80029c8:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 80029ca:	463b      	mov	r3, r7
 80029cc:	2204      	movs	r2, #4
 80029ce:	4619      	mov	r1, r3
 80029d0:	202b      	movs	r0, #43	; 0x2b
 80029d2:	f000 f9a0 	bl	8002d16 <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 80029d6:	230c      	movs	r3, #12
 80029d8:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 80029da:	230c      	movs	r3, #12
 80029dc:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80029de:	2300      	movs	r3, #0
 80029e0:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 80029e2:	2333      	movs	r3, #51	; 0x33
 80029e4:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 80029e6:	2333      	movs	r3, #51	; 0x33
 80029e8:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 80029ea:	463b      	mov	r3, r7
 80029ec:	2205      	movs	r2, #5
 80029ee:	4619      	mov	r1, r3
 80029f0:	20b2      	movs	r0, #178	; 0xb2
 80029f2:	f000 f990 	bl	8002d16 <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 80029f6:	2335      	movs	r3, #53	; 0x35
 80029f8:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 80029fa:	463b      	mov	r3, r7
 80029fc:	2201      	movs	r2, #1
 80029fe:	4619      	mov	r1, r3
 8002a00:	20b7      	movs	r0, #183	; 0xb7
 8002a02:	f000 f988 	bl	8002d16 <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 8002a06:	231f      	movs	r3, #31
 8002a08:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 8002a0a:	463b      	mov	r3, r7
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	4619      	mov	r1, r3
 8002a10:	20bb      	movs	r0, #187	; 0xbb
 8002a12:	f000 f980 	bl	8002d16 <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 8002a16:	232c      	movs	r3, #44	; 0x2c
 8002a18:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 8002a1a:	463b      	mov	r3, r7
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	4619      	mov	r1, r3
 8002a20:	20c0      	movs	r0, #192	; 0xc0
 8002a22:	f000 f978 	bl	8002d16 <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 8002a26:	2301      	movs	r3, #1
 8002a28:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 8002a2a:	23c3      	movs	r3, #195	; 0xc3
 8002a2c:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 8002a2e:	463b      	mov	r3, r7
 8002a30:	2202      	movs	r2, #2
 8002a32:	4619      	mov	r1, r3
 8002a34:	20c2      	movs	r0, #194	; 0xc2
 8002a36:	f000 f96e 	bl	8002d16 <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 8002a3a:	2320      	movs	r3, #32
 8002a3c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 8002a3e:	463b      	mov	r3, r7
 8002a40:	2201      	movs	r2, #1
 8002a42:	4619      	mov	r1, r3
 8002a44:	20c4      	movs	r0, #196	; 0xc4
 8002a46:	f000 f966 	bl	8002d16 <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 8002a4a:	230f      	movs	r3, #15
 8002a4c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 8002a4e:	463b      	mov	r3, r7
 8002a50:	2201      	movs	r2, #1
 8002a52:	4619      	mov	r1, r3
 8002a54:	20c6      	movs	r0, #198	; 0xc6
 8002a56:	f000 f95e 	bl	8002d16 <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 8002a5a:	23a4      	movs	r3, #164	; 0xa4
 8002a5c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 8002a5e:	23a1      	movs	r3, #161	; 0xa1
 8002a60:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 1); 
 8002a62:	463b      	mov	r3, r7
 8002a64:	2201      	movs	r2, #1
 8002a66:	4619      	mov	r1, r3
 8002a68:	20d0      	movs	r0, #208	; 0xd0
 8002a6a:	f000 f954 	bl	8002d16 <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 8002a6e:	23d0      	movs	r3, #208	; 0xd0
 8002a70:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8002a72:	2308      	movs	r3, #8
 8002a74:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 8002a76:	2311      	movs	r3, #17
 8002a78:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8002a7a:	2308      	movs	r3, #8
 8002a7c:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 8002a7e:	230c      	movs	r3, #12
 8002a80:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 8002a82:	2315      	movs	r3, #21
 8002a84:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8002a86:	2339      	movs	r3, #57	; 0x39
 8002a88:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 8002a8a:	2333      	movs	r3, #51	; 0x33
 8002a8c:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 8002a8e:	2350      	movs	r3, #80	; 0x50
 8002a90:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 8002a92:	2336      	movs	r3, #54	; 0x36
 8002a94:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 8002a96:	2313      	movs	r3, #19
 8002a98:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8002a9a:	2314      	movs	r3, #20
 8002a9c:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 8002a9e:	2329      	movs	r3, #41	; 0x29
 8002aa0:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 8002aa2:	232d      	movs	r3, #45	; 0x2d
 8002aa4:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 8002aa6:	463b      	mov	r3, r7
 8002aa8:	220e      	movs	r2, #14
 8002aaa:	4619      	mov	r1, r3
 8002aac:	20e0      	movs	r0, #224	; 0xe0
 8002aae:	f000 f932 	bl	8002d16 <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 8002ab2:	23d0      	movs	r3, #208	; 0xd0
 8002ab4:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8002ab6:	2308      	movs	r3, #8
 8002ab8:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 8002aba:	2310      	movs	r3, #16
 8002abc:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8002abe:	2308      	movs	r3, #8
 8002ac0:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 8002ac2:	2306      	movs	r3, #6
 8002ac4:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 8002ac6:	2306      	movs	r3, #6
 8002ac8:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8002aca:	2339      	movs	r3, #57	; 0x39
 8002acc:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 8002ace:	2344      	movs	r3, #68	; 0x44
 8002ad0:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 8002ad2:	2351      	movs	r3, #81	; 0x51
 8002ad4:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 8002ad6:	230b      	movs	r3, #11
 8002ad8:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 8002ada:	2316      	movs	r3, #22
 8002adc:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8002ade:	2314      	movs	r3, #20
 8002ae0:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 8002ae2:	232f      	movs	r3, #47	; 0x2f
 8002ae4:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 8002ae6:	2331      	movs	r3, #49	; 0x31
 8002ae8:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 8002aea:	463b      	mov	r3, r7
 8002aec:	220e      	movs	r2, #14
 8002aee:	4619      	mov	r1, r3
 8002af0:	20e1      	movs	r0, #225	; 0xe1
 8002af2:	f000 f910 	bl	8002d16 <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 8002af6:	f000 f847 	bl	8002b88 <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 8002afa:	2300      	movs	r3, #0
 8002afc:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 8002afe:	463b      	mov	r3, r7
 8002b00:	2201      	movs	r2, #1
 8002b02:	4619      	mov	r1, r3
 8002b04:	2035      	movs	r0, #53	; 0x35
 8002b06:	f000 f906 	bl	8002d16 <ST7789H2_WriteReg>

}
 8002b0a:	bf00      	nop
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b084      	sub	sp, #16
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d102      	bne.n	8002b26 <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 8002b20:	2300      	movs	r3, #0
 8002b22:	723b      	strb	r3, [r7, #8]
 8002b24:	e025      	b.n	8002b72 <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d120      	bne.n	8002b6e <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 8002b30:	2300      	movs	r3, #0
 8002b32:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 8002b34:	2301      	movs	r3, #1
 8002b36:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 8002b38:	23f0      	movs	r3, #240	; 0xf0
 8002b3a:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 8002b40:	2300      	movs	r3, #0
 8002b42:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 8002b44:	f107 0308 	add.w	r3, r7, #8
 8002b48:	2206      	movs	r2, #6
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	2033      	movs	r0, #51	; 0x33
 8002b4e:	f000 f8e2 	bl	8002d16 <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 8002b52:	2300      	movs	r3, #0
 8002b54:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 8002b56:	2350      	movs	r3, #80	; 0x50
 8002b58:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 8002b5a:	f107 0308 	add.w	r3, r7, #8
 8002b5e:	2202      	movs	r2, #2
 8002b60:	4619      	mov	r1, r3
 8002b62:	2037      	movs	r0, #55	; 0x37
 8002b64:	f000 f8d7 	bl	8002d16 <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 8002b68:	23c0      	movs	r3, #192	; 0xc0
 8002b6a:	723b      	strb	r3, [r7, #8]
 8002b6c:	e001      	b.n	8002b72 <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 8002b6e:	2360      	movs	r3, #96	; 0x60
 8002b70:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8002b72:	f107 0308 	add.w	r3, r7, #8
 8002b76:	2201      	movs	r2, #1
 8002b78:	4619      	mov	r1, r3
 8002b7a:	2036      	movs	r0, #54	; 0x36
 8002b7c:	f000 f8cb 	bl	8002d16 <ST7789H2_WriteReg>
}
 8002b80:	bf00      	nop
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	2100      	movs	r1, #0
 8002b90:	2029      	movs	r0, #41	; 0x29
 8002b92:	f000 f8c0 	bl	8002d16 <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 8002b96:	2200      	movs	r2, #0
 8002b98:	2100      	movs	r1, #0
 8002b9a:	2011      	movs	r0, #17
 8002b9c:	f000 f8bb 	bl	8002d16 <ST7789H2_WriteReg>
}
 8002ba0:	bf00      	nop
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 8002baa:	23fe      	movs	r3, #254	; 0xfe
 8002bac:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 8002bae:	1d3b      	adds	r3, r7, #4
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	20bd      	movs	r0, #189	; 0xbd
 8002bb6:	f000 f8ae 	bl	8002d16 <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8002bba:	2200      	movs	r2, #0
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	2010      	movs	r0, #16
 8002bc0:	f000 f8a9 	bl	8002d16 <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8002bc4:	200a      	movs	r0, #10
 8002bc6:	f000 fc52 	bl	800346e <LCD_IO_Delay>
}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 8002bd6:	23f0      	movs	r3, #240	; 0xf0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 8002be2:	b480      	push	{r7}
 8002be4:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 8002be6:	23f0      	movs	r3, #240	; 0xf0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8002bf6:	f000 fc13 	bl	8003420 <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 8002bfa:	2004      	movs	r0, #4
 8002bfc:	f000 f8ad 	bl	8002d5a <ST7789H2_ReadReg>
 8002c00:	4603      	mov	r3, r0
 8002c02:	b29b      	uxth	r3, r3
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	460a      	mov	r2, r1
 8002c12:	80fb      	strh	r3, [r7, #6]
 8002c14:	4613      	mov	r3, r2
 8002c16:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 8002c18:	2300      	movs	r3, #0
 8002c1a:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 8002c1c:	88fb      	ldrh	r3, [r7, #6]
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8002c22:	2300      	movs	r3, #0
 8002c24:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 8002c26:	88fb      	ldrh	r3, [r7, #6]
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	3b11      	subs	r3, #17
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8002c30:	f107 030c 	add.w	r3, r7, #12
 8002c34:	2204      	movs	r2, #4
 8002c36:	4619      	mov	r1, r3
 8002c38:	202a      	movs	r0, #42	; 0x2a
 8002c3a:	f000 f86c 	bl	8002d16 <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 8002c42:	88bb      	ldrh	r3, [r7, #4]
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 8002c4c:	88bb      	ldrh	r3, [r7, #4]
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	3b11      	subs	r3, #17
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8002c56:	f107 030c 	add.w	r3, r7, #12
 8002c5a:	2204      	movs	r2, #4
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	202b      	movs	r0, #43	; 0x2b
 8002c60:	f000 f859 	bl	8002d16 <ST7789H2_WriteReg>
}
 8002c64:	bf00      	nop
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	80fb      	strh	r3, [r7, #6]
 8002c76:	460b      	mov	r3, r1
 8002c78:	80bb      	strh	r3, [r7, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8002c7e:	88ba      	ldrh	r2, [r7, #4]
 8002c80:	88fb      	ldrh	r3, [r7, #6]
 8002c82:	4611      	mov	r1, r2
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff ffbf 	bl	8002c08 <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	202c      	movs	r0, #44	; 0x2c
 8002c90:	f000 f841 	bl	8002d16 <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 8002c94:	887b      	ldrh	r3, [r7, #2]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 fbc8 	bl	800342c <LCD_IO_WriteData>
}
 8002c9c:	bf00      	nop
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	460a      	mov	r2, r1
 8002cae:	80fb      	strh	r3, [r7, #6]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8002cb4:	88ba      	ldrh	r2, [r7, #4]
 8002cb6:	88fb      	ldrh	r3, [r7, #6]
 8002cb8:	4611      	mov	r1, r2
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff ffa4 	bl	8002c08 <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 8002cc0:	88ba      	ldrh	r2, [r7, #4]
 8002cc2:	88fb      	ldrh	r3, [r7, #6]
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 f9bd 	bl	8003046 <ST7789H2_ReadPixel_rgb888>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	461a      	mov	r2, r3
 8002cd0:	733a      	strb	r2, [r7, #12]
 8002cd2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002cd6:	737a      	strb	r2, [r7, #13]
 8002cd8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002cdc:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 8002cde:	7b3b      	ldrb	r3, [r7, #12]
 8002ce0:	08db      	lsrs	r3, r3, #3
 8002ce2:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 8002ce4:	7b7b      	ldrb	r3, [r7, #13]
 8002ce6:	089b      	lsrs	r3, r3, #2
 8002ce8:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 8002cea:	7bbb      	ldrb	r3, [r7, #14]
 8002cec:	08db      	lsrs	r3, r3, #3
 8002cee:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 8002cf0:	7dfb      	ldrb	r3, [r7, #23]
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	02db      	lsls	r3, r3, #11
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	7dbb      	ldrb	r3, [r7, #22]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	015b      	lsls	r3, r3, #5
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	4413      	add	r3, r2
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	7d7b      	ldrb	r3, [r7, #21]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	4413      	add	r3, r2
 8002d0a:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 8002d0c:	8a7b      	ldrh	r3, [r7, #18]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3718      	adds	r7, #24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b084      	sub	sp, #16
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	6039      	str	r1, [r7, #0]
 8002d20:	71fb      	strb	r3, [r7, #7]
 8002d22:	4613      	mov	r3, r2
 8002d24:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f000 fb8c 	bl	8003446 <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 8002d2e:	2300      	movs	r3, #0
 8002d30:	73fb      	strb	r3, [r7, #15]
 8002d32:	e00a      	b.n	8002d4a <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	4413      	add	r3, r2
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 fb74 	bl	800342c <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
 8002d46:	3301      	adds	r3, #1
 8002d48:	73fb      	strb	r3, [r7, #15]
 8002d4a:	7bfa      	ldrb	r2, [r7, #15]
 8002d4c:	79bb      	ldrb	r3, [r7, #6]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d3f0      	bcc.n	8002d34 <ST7789H2_WriteReg+0x1e>
  }
}
 8002d52:	bf00      	nop
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b082      	sub	sp, #8
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	4603      	mov	r3, r0
 8002d62:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 8002d64:	79fb      	ldrb	r3, [r7, #7]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 fb6d 	bl	8003446 <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 8002d6c:	f000 fb78 	bl	8003460 <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 8002d70:	f000 fb76 	bl	8003460 <LCD_IO_ReadData>
 8002d74:	4603      	mov	r3, r0
 8002d76:	b2db      	uxtb	r3, r3
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002d80:	b490      	push	{r4, r7}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4604      	mov	r4, r0
 8002d88:	4608      	mov	r0, r1
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	4623      	mov	r3, r4
 8002d90:	80fb      	strh	r3, [r7, #6]
 8002d92:	4603      	mov	r3, r0
 8002d94:	80bb      	strh	r3, [r7, #4]
 8002d96:	460b      	mov	r3, r1
 8002d98:	807b      	strh	r3, [r7, #2]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 8002d9e:	88fb      	ldrh	r3, [r7, #6]
 8002da0:	2bef      	cmp	r3, #239	; 0xef
 8002da2:	d803      	bhi.n	8002dac <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 8002da4:	4a1b      	ldr	r2, [pc, #108]	; (8002e14 <ST7789H2_SetDisplayWindow+0x94>)
 8002da6:	88fb      	ldrh	r3, [r7, #6]
 8002da8:	8013      	strh	r3, [r2, #0]
 8002daa:	e002      	b.n	8002db2 <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 8002dac:	4b19      	ldr	r3, [pc, #100]	; (8002e14 <ST7789H2_SetDisplayWindow+0x94>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 8002db2:	88bb      	ldrh	r3, [r7, #4]
 8002db4:	2bef      	cmp	r3, #239	; 0xef
 8002db6:	d803      	bhi.n	8002dc0 <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 8002db8:	4a17      	ldr	r2, [pc, #92]	; (8002e18 <ST7789H2_SetDisplayWindow+0x98>)
 8002dba:	88bb      	ldrh	r3, [r7, #4]
 8002dbc:	8013      	strh	r3, [r2, #0]
 8002dbe:	e002      	b.n	8002dc6 <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 8002dc0:	4b15      	ldr	r3, [pc, #84]	; (8002e18 <ST7789H2_SetDisplayWindow+0x98>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 8002dc6:	887a      	ldrh	r2, [r7, #2]
 8002dc8:	88fb      	ldrh	r3, [r7, #6]
 8002dca:	4413      	add	r3, r2
 8002dcc:	2bf0      	cmp	r3, #240	; 0xf0
 8002dce:	dc08      	bgt.n	8002de2 <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 8002dd0:	887a      	ldrh	r2, [r7, #2]
 8002dd2:	88fb      	ldrh	r3, [r7, #6]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	4b0f      	ldr	r3, [pc, #60]	; (8002e1c <ST7789H2_SetDisplayWindow+0x9c>)
 8002dde:	801a      	strh	r2, [r3, #0]
 8002de0:	e002      	b.n	8002de8 <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 8002de2:	4b0e      	ldr	r3, [pc, #56]	; (8002e1c <ST7789H2_SetDisplayWindow+0x9c>)
 8002de4:	22ef      	movs	r2, #239	; 0xef
 8002de6:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 8002de8:	883a      	ldrh	r2, [r7, #0]
 8002dea:	88bb      	ldrh	r3, [r7, #4]
 8002dec:	4413      	add	r3, r2
 8002dee:	2bf0      	cmp	r3, #240	; 0xf0
 8002df0:	dc08      	bgt.n	8002e04 <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 8002df2:	883a      	ldrh	r2, [r7, #0]
 8002df4:	88bb      	ldrh	r3, [r7, #4]
 8002df6:	4413      	add	r3, r2
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <ST7789H2_SetDisplayWindow+0xa0>)
 8002e00:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 8002e02:	e002      	b.n	8002e0a <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 8002e04:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <ST7789H2_SetDisplayWindow+0xa0>)
 8002e06:	22ef      	movs	r2, #239	; 0xef
 8002e08:	801a      	strh	r2, [r3, #0]
}
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc90      	pop	{r4, r7}
 8002e12:	4770      	bx	lr
 8002e14:	200001d8 	.word	0x200001d8
 8002e18:	200001da 	.word	0x200001da
 8002e1c:	200000e0 	.word	0x200000e0
 8002e20:	200000e2 	.word	0x200000e2

08002e24 <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002e24:	b590      	push	{r4, r7, lr}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4604      	mov	r4, r0
 8002e2c:	4608      	mov	r0, r1
 8002e2e:	4611      	mov	r1, r2
 8002e30:	461a      	mov	r2, r3
 8002e32:	4623      	mov	r3, r4
 8002e34:	80fb      	strh	r3, [r7, #6]
 8002e36:	4603      	mov	r3, r0
 8002e38:	80bb      	strh	r3, [r7, #4]
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	807b      	strh	r3, [r7, #2]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8002e42:	2300      	movs	r3, #0
 8002e44:	81fb      	strh	r3, [r7, #14]
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 8002e46:	887a      	ldrh	r2, [r7, #2]
 8002e48:	88bb      	ldrh	r3, [r7, #4]
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff fedb 	bl	8002c08 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002e52:	2200      	movs	r2, #0
 8002e54:	2100      	movs	r1, #0
 8002e56:	202c      	movs	r0, #44	; 0x2c
 8002e58:	f7ff ff5d 	bl	8002d16 <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	81fb      	strh	r3, [r7, #14]
 8002e60:	e006      	b.n	8002e70 <ST7789H2_DrawHLine+0x4c>
  {
    LCD_IO_WriteData(RGBCode);
 8002e62:	88fb      	ldrh	r3, [r7, #6]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 fae1 	bl	800342c <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 8002e6a:	89fb      	ldrh	r3, [r7, #14]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	81fb      	strh	r3, [r7, #14]
 8002e70:	89fa      	ldrh	r2, [r7, #14]
 8002e72:	883b      	ldrh	r3, [r7, #0]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d3f4      	bcc.n	8002e62 <ST7789H2_DrawHLine+0x3e>
  }  
}
 8002e78:	bf00      	nop
 8002e7a:	3714      	adds	r7, #20
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd90      	pop	{r4, r7, pc}

08002e80 <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002e80:	b590      	push	{r4, r7, lr}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4604      	mov	r4, r0
 8002e88:	4608      	mov	r0, r1
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4623      	mov	r3, r4
 8002e90:	80fb      	strh	r3, [r7, #6]
 8002e92:	4603      	mov	r3, r0
 8002e94:	80bb      	strh	r3, [r7, #4]
 8002e96:	460b      	mov	r3, r1
 8002e98:	807b      	strh	r3, [r7, #2]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	81fb      	strh	r3, [r7, #14]

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8002ea2:	887a      	ldrh	r2, [r7, #2]
 8002ea4:	88bb      	ldrh	r3, [r7, #4]
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff fead 	bl	8002c08 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	202c      	movs	r0, #44	; 0x2c
 8002eb4:	f7ff ff2f 	bl	8002d16 <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8002eb8:	2300      	movs	r3, #0
 8002eba:	81fb      	strh	r3, [r7, #14]
 8002ebc:	e00b      	b.n	8002ed6 <ST7789H2_DrawVLine+0x56>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 8002ebe:	887a      	ldrh	r2, [r7, #2]
 8002ec0:	89fb      	ldrh	r3, [r7, #14]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	b299      	uxth	r1, r3
 8002ec6:	88fa      	ldrh	r2, [r7, #6]
 8002ec8:	88bb      	ldrh	r3, [r7, #4]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff fece 	bl	8002c6c <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8002ed0:	89fb      	ldrh	r3, [r7, #14]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	81fb      	strh	r3, [r7, #14]
 8002ed6:	89fa      	ldrh	r2, [r7, #14]
 8002ed8:	883b      	ldrh	r3, [r7, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d3ef      	bcc.n	8002ebe <ST7789H2_DrawVLine+0x3e>
  }
}
 8002ede:	bf00      	nop
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd90      	pop	{r4, r7, pc}
	...

08002ee8 <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b088      	sub	sp, #32
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	603a      	str	r2, [r7, #0]
 8002ef2:	80fb      	strh	r3, [r7, #6]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	617b      	str	r3, [r7, #20]
 8002efc:	2300      	movs	r3, #0
 8002efe:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8002f00:	2300      	movs	r3, #0
 8002f02:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8002f04:	4b2f      	ldr	r3, [pc, #188]	; (8002fc4 <ST7789H2_DrawBitmap+0xdc>)
 8002f06:	881a      	ldrh	r2, [r3, #0]
 8002f08:	4b2f      	ldr	r3, [pc, #188]	; (8002fc8 <ST7789H2_DrawBitmap+0xe0>)
 8002f0a:	881b      	ldrh	r3, [r3, #0]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	3301      	adds	r3, #1
 8002f12:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8002f14:	4b2d      	ldr	r3, [pc, #180]	; (8002fcc <ST7789H2_DrawBitmap+0xe4>)
 8002f16:	881a      	ldrh	r2, [r3, #0]
 8002f18:	4b2d      	ldr	r3, [pc, #180]	; (8002fd0 <ST7789H2_DrawBitmap+0xe8>)
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	3301      	adds	r3, #1
 8002f22:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	3302      	adds	r3, #2
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	3304      	adds	r3, #4
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	041b      	lsls	r3, r3, #16
 8002f38:	461a      	mov	r2, r3
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	330a      	adds	r3, #10
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	330c      	adds	r3, #12
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	041b      	lsls	r3, r3, #16
 8002f54:	461a      	mov	r2, r3
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	085b      	lsrs	r3, r3, #1
 8002f64:	613b      	str	r3, [r7, #16]
  pbmp += index;
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8002f6e:	88ba      	ldrh	r2, [r7, #4]
 8002f70:	89bb      	ldrh	r3, [r7, #12]
 8002f72:	4413      	add	r3, r2
 8002f74:	61fb      	str	r3, [r7, #28]
 8002f76:	e01d      	b.n	8002fb4 <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	88fb      	ldrh	r3, [r7, #6]
 8002f82:	4611      	mov	r1, r2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff fe3f 	bl	8002c08 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	b299      	uxth	r1, r3
 8002f92:	89fb      	ldrh	r3, [r7, #14]
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	fb02 f303 	mul.w	r3, r2, r3
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	89fa      	ldrh	r2, [r7, #14]
 8002fa2:	88f8      	ldrh	r0, [r7, #6]
 8002fa4:	f000 f898 	bl	80030d8 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	3301      	adds	r3, #1
 8002fac:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	61fb      	str	r3, [r7, #28]
 8002fb4:	88bb      	ldrh	r3, [r7, #4]
 8002fb6:	69fa      	ldr	r2, [r7, #28]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d8dd      	bhi.n	8002f78 <ST7789H2_DrawBitmap+0x90>
  }
}
 8002fbc:	bf00      	nop
 8002fbe:	3720      	adds	r7, #32
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	200000e0 	.word	0x200000e0
 8002fc8:	200001d8 	.word	0x200001d8
 8002fcc:	200000e2 	.word	0x200000e2
 8002fd0:	200001da 	.word	0x200001da

08002fd4 <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8002fd4:	b590      	push	{r4, r7, lr}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4604      	mov	r4, r0
 8002fdc:	4608      	mov	r0, r1
 8002fde:	4611      	mov	r1, r2
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4623      	mov	r3, r4
 8002fe4:	80fb      	strh	r3, [r7, #6]
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	80bb      	strh	r3, [r7, #4]
 8002fea:	460b      	mov	r3, r1
 8002fec:	807b      	strh	r3, [r7, #2]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8002ff6:	88bb      	ldrh	r3, [r7, #4]
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	e019      	b.n	8003030 <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	88fb      	ldrh	r3, [r7, #6]
 8003002:	4611      	mov	r1, r2
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff fdff 	bl	8002c08 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	b299      	uxth	r1, r3
 800300e:	887b      	ldrh	r3, [r7, #2]
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	fb02 f303 	mul.w	r3, r2, r3
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	6a3a      	ldr	r2, [r7, #32]
 800301a:	4413      	add	r3, r2
 800301c:	887a      	ldrh	r2, [r7, #2]
 800301e:	88f8      	ldrh	r0, [r7, #6]
 8003020:	f000 f85a 	bl	80030d8 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	3301      	adds	r3, #1
 8003028:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	3301      	adds	r3, #1
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	88ba      	ldrh	r2, [r7, #4]
 8003032:	883b      	ldrh	r3, [r7, #0]
 8003034:	4413      	add	r3, r2
 8003036:	461a      	mov	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4293      	cmp	r3, r2
 800303c:	d3de      	bcc.n	8002ffc <ST7789H2_DrawRGBImage+0x28>
  }
}
 800303e:	bf00      	nop
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	bd90      	pop	{r4, r7, pc}

08003046 <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b086      	sub	sp, #24
 800304a:	af00      	add	r7, sp, #0
 800304c:	4603      	mov	r3, r0
 800304e:	460a      	mov	r2, r1
 8003050:	80fb      	strh	r3, [r7, #6]
 8003052:	4613      	mov	r3, r2
 8003054:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8003056:	88ba      	ldrh	r2, [r7, #4]
 8003058:	88fb      	ldrh	r3, [r7, #6]
 800305a:	4611      	mov	r1, r2
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff fdd3 	bl	8002c08 <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 8003062:	2200      	movs	r2, #0
 8003064:	2100      	movs	r1, #0
 8003066:	202e      	movs	r0, #46	; 0x2e
 8003068:	f7ff fe55 	bl	8002d16 <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 800306c:	f000 f9f8 	bl	8003460 <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 8003070:	f000 f9f6 	bl	8003460 <LCD_IO_ReadData>
 8003074:	4603      	mov	r3, r0
 8003076:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 8003078:	f000 f9f2 	bl	8003460 <LCD_IO_ReadData>
 800307c:	4603      	mov	r3, r0
 800307e:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 8003080:	8afb      	ldrh	r3, [r7, #22]
 8003082:	121b      	asrs	r3, r3, #8
 8003084:	b2db      	uxtb	r3, r3
 8003086:	f023 0303 	bic.w	r3, r3, #3
 800308a:	b2db      	uxtb	r3, r3
 800308c:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 800308e:	8afb      	ldrh	r3, [r7, #22]
 8003090:	b2db      	uxtb	r3, r3
 8003092:	f023 0303 	bic.w	r3, r3, #3
 8003096:	b2db      	uxtb	r3, r3
 8003098:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 800309a:	8abb      	ldrh	r3, [r7, #20]
 800309c:	121b      	asrs	r3, r3, #8
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	f023 0303 	bic.w	r3, r3, #3
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 80030a8:	f107 0310 	add.w	r3, r7, #16
 80030ac:	f107 020c 	add.w	r2, r7, #12
 80030b0:	6812      	ldr	r2, [r2, #0]
 80030b2:	4611      	mov	r1, r2
 80030b4:	8019      	strh	r1, [r3, #0]
 80030b6:	3302      	adds	r3, #2
 80030b8:	0c12      	lsrs	r2, r2, #16
 80030ba:	701a      	strb	r2, [r3, #0]
 80030bc:	2300      	movs	r3, #0
 80030be:	7c3a      	ldrb	r2, [r7, #16]
 80030c0:	f362 0307 	bfi	r3, r2, #0, #8
 80030c4:	7c7a      	ldrb	r2, [r7, #17]
 80030c6:	f362 230f 	bfi	r3, r2, #8, #8
 80030ca:	7cba      	ldrb	r2, [r7, #18]
 80030cc:	f362 4317 	bfi	r3, r2, #16, #8
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b088      	sub	sp, #32
 80030dc:	af00      	add	r7, sp, #0
 80030de:	607b      	str	r3, [r7, #4]
 80030e0:	4603      	mov	r3, r0
 80030e2:	81fb      	strh	r3, [r7, #14]
 80030e4:	460b      	mov	r3, r1
 80030e6:	81bb      	strh	r3, [r7, #12]
 80030e8:	4613      	mov	r3, r2
 80030ea:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 80030ec:	2300      	movs	r3, #0
 80030ee:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80030f4:	2200      	movs	r2, #0
 80030f6:	2100      	movs	r1, #0
 80030f8:	202c      	movs	r0, #44	; 0x2c
 80030fa:	f7ff fe0c 	bl	8002d16 <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 80030fe:	89fb      	ldrh	r3, [r7, #14]
 8003100:	61bb      	str	r3, [r7, #24]
 8003102:	e02a      	b.n	800315a <ST7789H2_DrawRGBHLine+0x82>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8003104:	4b1a      	ldr	r3, [pc, #104]	; (8003170 <ST7789H2_DrawRGBHLine+0x98>)
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	461a      	mov	r2, r3
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	4293      	cmp	r3, r2
 800310e:	d321      	bcc.n	8003154 <ST7789H2_DrawRGBHLine+0x7c>
 8003110:	4b18      	ldr	r3, [pc, #96]	; (8003174 <ST7789H2_DrawRGBHLine+0x9c>)
 8003112:	881b      	ldrh	r3, [r3, #0]
 8003114:	89ba      	ldrh	r2, [r7, #12]
 8003116:	429a      	cmp	r2, r3
 8003118:	d31c      	bcc.n	8003154 <ST7789H2_DrawRGBHLine+0x7c>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 800311a:	4b17      	ldr	r3, [pc, #92]	; (8003178 <ST7789H2_DrawRGBHLine+0xa0>)
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	4293      	cmp	r3, r2
 8003124:	d816      	bhi.n	8003154 <ST7789H2_DrawRGBHLine+0x7c>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8003126:	4b15      	ldr	r3, [pc, #84]	; (800317c <ST7789H2_DrawRGBHLine+0xa4>)
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	89ba      	ldrh	r2, [r7, #12]
 800312c:	429a      	cmp	r2, r3
 800312e:	d811      	bhi.n	8003154 <ST7789H2_DrawRGBHLine+0x7c>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 8003130:	897a      	ldrh	r2, [r7, #10]
 8003132:	89fb      	ldrh	r3, [r7, #14]
 8003134:	4413      	add	r3, r2
 8003136:	461a      	mov	r2, r3
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	4293      	cmp	r3, r2
 800313c:	d007      	beq.n	800314e <ST7789H2_DrawRGBHLine+0x76>
      {
        LCD_IO_WriteData(rgb565[i]);        
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	4413      	add	r3, r2
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f000 f96f 	bl	800342c <LCD_IO_WriteData>
      }      
      i++;
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	3301      	adds	r3, #1
 8003152:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	3301      	adds	r3, #1
 8003158:	61bb      	str	r3, [r7, #24]
 800315a:	897a      	ldrh	r2, [r7, #10]
 800315c:	89fb      	ldrh	r3, [r7, #14]
 800315e:	4413      	add	r3, r2
 8003160:	461a      	mov	r2, r3
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	4293      	cmp	r3, r2
 8003166:	d3cd      	bcc.n	8003104 <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 8003168:	bf00      	nop
 800316a:	3720      	adds	r7, #32
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	200001d8 	.word	0x200001d8
 8003174:	200001da 	.word	0x200001da
 8003178:	200000e0 	.word	0x200000e0
 800317c:	200000e2 	.word	0x200000e2

08003180 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                    with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b088      	sub	sp, #32
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	460a      	mov	r2, r1
 800318a:	71fb      	strb	r3, [r7, #7]
 800318c:	4613      	mov	r3, r2
 800318e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  WAKEUP_BUTTON_GPIO_CLK_ENABLE();
 8003190:	2300      	movs	r3, #0
 8003192:	60bb      	str	r3, [r7, #8]
 8003194:	4b22      	ldr	r3, [pc, #136]	; (8003220 <BSP_PB_Init+0xa0>)
 8003196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003198:	4a21      	ldr	r2, [pc, #132]	; (8003220 <BSP_PB_Init+0xa0>)
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	6313      	str	r3, [r2, #48]	; 0x30
 80031a0:	4b1f      	ldr	r3, [pc, #124]	; (8003220 <BSP_PB_Init+0xa0>)
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	60bb      	str	r3, [r7, #8]
 80031aa:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80031ac:	79bb      	ldrb	r3, [r7, #6]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d111      	bne.n	80031d6 <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80031b2:	2301      	movs	r3, #1
 80031b4:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80031b6:	2300      	movs	r3, #0
 80031b8:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 80031ba:	2302      	movs	r3, #2
 80031bc:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80031be:	2302      	movs	r3, #2
 80031c0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	4a17      	ldr	r2, [pc, #92]	; (8003224 <BSP_PB_Init+0xa4>)
 80031c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ca:	f107 020c 	add.w	r2, r7, #12
 80031ce:	4611      	mov	r1, r2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f001 fd93 	bl	8004cfc <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80031d6:	79bb      	ldrb	r3, [r7, #6]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d11d      	bne.n	8003218 <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80031dc:	2301      	movs	r3, #1
 80031de:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 80031e0:	2302      	movs	r3, #2
 80031e2:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031e4:	2303      	movs	r3, #3
 80031e6:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80031e8:	4b0f      	ldr	r3, [pc, #60]	; (8003228 <BSP_PB_Init+0xa8>)
 80031ea:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80031ec:	79fb      	ldrb	r3, [r7, #7]
 80031ee:	4a0d      	ldr	r2, [pc, #52]	; (8003224 <BSP_PB_Init+0xa4>)
 80031f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031f4:	f107 020c 	add.w	r2, r7, #12
 80031f8:	4611      	mov	r1, r2
 80031fa:	4618      	mov	r0, r3
 80031fc:	f001 fd7e 	bl	8004cfc <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8003200:	2306      	movs	r3, #6
 8003202:	b25b      	sxtb	r3, r3
 8003204:	2200      	movs	r2, #0
 8003206:	210f      	movs	r1, #15
 8003208:	4618      	mov	r0, r3
 800320a:	f001 fa2f 	bl	800466c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800320e:	2306      	movs	r3, #6
 8003210:	b25b      	sxtb	r3, r3
 8003212:	4618      	mov	r0, r3
 8003214:	f001 fa46 	bl	80046a4 <HAL_NVIC_EnableIRQ>
  }
}
 8003218:	bf00      	nop
 800321a:	3720      	adds	r7, #32
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40023800 	.word	0x40023800
 8003224:	200000e4 	.word	0x200000e4
 8003228:	10110000 	.word	0x10110000

0800322c <FMC_BANK3_MspInit>:
/*************************** FMC Routines ************************************/
/**
  * @brief  Initializes FMC_BANK3 MSP.
  */
static void FMC_BANK3_MspInit(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b08a      	sub	sp, #40	; 0x28
 8003230:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;
    
  /* Enable FSMC clock */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8003232:	2300      	movs	r3, #0
 8003234:	613b      	str	r3, [r7, #16]
 8003236:	4b3a      	ldr	r3, [pc, #232]	; (8003320 <FMC_BANK3_MspInit+0xf4>)
 8003238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323a:	4a39      	ldr	r2, [pc, #228]	; (8003320 <FMC_BANK3_MspInit+0xf4>)
 800323c:	f043 0301 	orr.w	r3, r3, #1
 8003240:	6393      	str	r3, [r2, #56]	; 0x38
 8003242:	4b37      	ldr	r3, [pc, #220]	; (8003320 <FMC_BANK3_MspInit+0xf4>)
 8003244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	693b      	ldr	r3, [r7, #16]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	4b33      	ldr	r3, [pc, #204]	; (8003320 <FMC_BANK3_MspInit+0xf4>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	4a32      	ldr	r2, [pc, #200]	; (8003320 <FMC_BANK3_MspInit+0xf4>)
 8003258:	f043 0308 	orr.w	r3, r3, #8
 800325c:	6313      	str	r3, [r2, #48]	; 0x30
 800325e:	4b30      	ldr	r3, [pc, #192]	; (8003320 <FMC_BANK3_MspInit+0xf4>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	60bb      	str	r3, [r7, #8]
 800326e:	4b2c      	ldr	r3, [pc, #176]	; (8003320 <FMC_BANK3_MspInit+0xf4>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	4a2b      	ldr	r2, [pc, #172]	; (8003320 <FMC_BANK3_MspInit+0xf4>)
 8003274:	f043 0310 	orr.w	r3, r3, #16
 8003278:	6313      	str	r3, [r2, #48]	; 0x30
 800327a:	4b29      	ldr	r3, [pc, #164]	; (8003320 <FMC_BANK3_MspInit+0xf4>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	f003 0310 	and.w	r3, r3, #16
 8003282:	60bb      	str	r3, [r7, #8]
 8003284:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003286:	2300      	movs	r3, #0
 8003288:	607b      	str	r3, [r7, #4]
 800328a:	4b25      	ldr	r3, [pc, #148]	; (8003320 <FMC_BANK3_MspInit+0xf4>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	4a24      	ldr	r2, [pc, #144]	; (8003320 <FMC_BANK3_MspInit+0xf4>)
 8003290:	f043 0320 	orr.w	r3, r3, #32
 8003294:	6313      	str	r3, [r2, #48]	; 0x30
 8003296:	4b22      	ldr	r3, [pc, #136]	; (8003320 <FMC_BANK3_MspInit+0xf4>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	f003 0320 	and.w	r3, r3, #32
 800329e:	607b      	str	r3, [r7, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80032a2:	2300      	movs	r3, #0
 80032a4:	603b      	str	r3, [r7, #0]
 80032a6:	4b1e      	ldr	r3, [pc, #120]	; (8003320 <FMC_BANK3_MspInit+0xf4>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	4a1d      	ldr	r2, [pc, #116]	; (8003320 <FMC_BANK3_MspInit+0xf4>)
 80032ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032b0:	6313      	str	r3, [r2, #48]	; 0x30
 80032b2:	4b1b      	ldr	r3, [pc, #108]	; (8003320 <FMC_BANK3_MspInit+0xf4>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ba:	603b      	str	r3, [r7, #0]
 80032bc:	683b      	ldr	r3, [r7, #0]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80032be:	2302      	movs	r3, #2
 80032c0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80032c2:	2301      	movs	r3, #1
 80032c4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c6:	2303      	movs	r3, #3
 80032c8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FSMC;
 80032ca:	230c      	movs	r3, #12
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* GPIOD configuration: GPIO_PIN_7 is  FMC_NE1 , GPIO_PIN_11 ans GPIO_PIN_12 are PSRAM_A16 and PSRAM_A17 */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 |\
 80032ce:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 80032d2:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7|\
                              GPIO_PIN_11 | GPIO_PIN_12;
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80032d4:	f107 0314 	add.w	r3, r7, #20
 80032d8:	4619      	mov	r1, r3
 80032da:	4812      	ldr	r0, [pc, #72]	; (8003324 <FMC_BANK3_MspInit+0xf8>)
 80032dc:	f001 fd0e 	bl	8004cfc <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 |\
 80032e0:	f64f 7380 	movw	r3, #65408	; 0xff80
 80032e4:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_12 |GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80032e6:	f107 0314 	add.w	r3, r7, #20
 80032ea:	4619      	mov	r1, r3
 80032ec:	480e      	ldr	r0, [pc, #56]	; (8003328 <FMC_BANK3_MspInit+0xfc>)
 80032ee:	f001 fd05 	bl	8004cfc <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80032f2:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80032f6:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15; 
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80032f8:	f107 0314 	add.w	r3, r7, #20
 80032fc:	4619      	mov	r1, r3
 80032fe:	480b      	ldr	r0, [pc, #44]	; (800332c <FMC_BANK3_MspInit+0x100>)
 8003300:	f001 fcfc 	bl	8004cfc <HAL_GPIO_Init>

  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8003304:	f240 433f 	movw	r3, #1087	; 0x43f
 8003308:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_10 ; 
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800330a:	f107 0314 	add.w	r3, r7, #20
 800330e:	4619      	mov	r1, r3
 8003310:	4807      	ldr	r0, [pc, #28]	; (8003330 <FMC_BANK3_MspInit+0x104>)
 8003312:	f001 fcf3 	bl	8004cfc <HAL_GPIO_Init>
}
 8003316:	bf00      	nop
 8003318:	3728      	adds	r7, #40	; 0x28
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40023800 	.word	0x40023800
 8003324:	40020c00 	.word	0x40020c00
 8003328:	40021000 	.word	0x40021000
 800332c:	40021400 	.word	0x40021400
 8003330:	40021800 	.word	0x40021800

08003334 <FMC_BANK3_Init>:

/**
  * @brief  Initializes LCD IOs.
  */ 
static void FMC_BANK3_Init(void) 
{  
 8003334:	b580      	push	{r7, lr}
 8003336:	b09c      	sub	sp, #112	; 0x70
 8003338:	af00      	add	r7, sp, #0
  SRAM_HandleTypeDef hsram;
  FSMC_NORSRAM_TimingTypeDef sram_timing;

  /* Initialize the SRAM controller */
  FMC_BANK3_MspInit();
 800333a:	f7ff ff77 	bl	800322c <FMC_BANK3_MspInit>
  
  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FSMC_NORSRAM_DEVICE;
 800333e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8003342:	623b      	str	r3, [r7, #32]
  hsram.Extended  = FSMC_NORSRAM_EXTENDED_DEVICE;
 8003344:	4b1e      	ldr	r3, [pc, #120]	; (80033c0 <FMC_BANK3_Init+0x8c>)
 8003346:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Timing config */
  sram_timing.AddressSetupTime      = 3;
 8003348:	2303      	movs	r3, #3
 800334a:	607b      	str	r3, [r7, #4]
  sram_timing.AddressHoldTime       = 1;
 800334c:	2301      	movs	r3, #1
 800334e:	60bb      	str	r3, [r7, #8]
  sram_timing.DataSetupTime         = 4;
 8003350:	2304      	movs	r3, #4
 8003352:	60fb      	str	r3, [r7, #12]
  sram_timing.BusTurnAroundDuration = 1;
 8003354:	2301      	movs	r3, #1
 8003356:	613b      	str	r3, [r7, #16]
  sram_timing.CLKDivision           = 2;
 8003358:	2302      	movs	r3, #2
 800335a:	617b      	str	r3, [r7, #20]
  sram_timing.DataLatency           = 2;
 800335c:	2302      	movs	r3, #2
 800335e:	61bb      	str	r3, [r7, #24]
  sram_timing.AccessMode            = FSMC_ACCESS_MODE_A;
 8003360:	2300      	movs	r3, #0
 8003362:	61fb      	str	r3, [r7, #28]
      
  hsram.Init.NSBank             = FSMC_NORSRAM_BANK3;
 8003364:	2304      	movs	r3, #4
 8003366:	62bb      	str	r3, [r7, #40]	; 0x28
  hsram.Init.DataAddressMux     = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8003368:	2300      	movs	r3, #0
 800336a:	62fb      	str	r3, [r7, #44]	; 0x2c
  hsram.Init.MemoryType         = FSMC_MEMORY_TYPE_SRAM;
 800336c:	2300      	movs	r3, #0
 800336e:	633b      	str	r3, [r7, #48]	; 0x30
  hsram.Init.MemoryDataWidth    = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8003370:	2310      	movs	r3, #16
 8003372:	637b      	str	r3, [r7, #52]	; 0x34
  hsram.Init.BurstAccessMode    = FSMC_BURST_ACCESS_MODE_DISABLE;
 8003374:	2300      	movs	r3, #0
 8003376:	63bb      	str	r3, [r7, #56]	; 0x38
  hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8003378:	2300      	movs	r3, #0
 800337a:	63fb      	str	r3, [r7, #60]	; 0x3c
  hsram.Init.WrapMode           = FSMC_WRAP_MODE_DISABLE;
 800337c:	2300      	movs	r3, #0
 800337e:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Init.WaitSignalActive   = FSMC_WAIT_TIMING_BEFORE_WS;
 8003380:	2300      	movs	r3, #0
 8003382:	647b      	str	r3, [r7, #68]	; 0x44
  hsram.Init.WriteOperation     = FSMC_WRITE_OPERATION_ENABLE;
 8003384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003388:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.WaitSignal         = FSMC_WAIT_SIGNAL_DISABLE;
 800338a:	2300      	movs	r3, #0
 800338c:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.ExtendedMode       = FSMC_EXTENDED_MODE_ENABLE;
 800338e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003392:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.AsynchronousWait   = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003394:	2300      	movs	r3, #0
 8003396:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.WriteBurst         = FSMC_WRITE_BURST_DISABLE;
 8003398:	2300      	movs	r3, #0
 800339a:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WriteFifo          = FSMC_WRITE_FIFO_DISABLE;
 800339c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80033a0:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.PageSize           = FSMC_PAGE_SIZE_NONE;
 80033a2:	2300      	movs	r3, #0
 80033a4:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.ContinuousClock    = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80033a6:	2300      	movs	r3, #0
 80033a8:	65fb      	str	r3, [r7, #92]	; 0x5c

  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing);
 80033aa:	1d3a      	adds	r2, r7, #4
 80033ac:	1d39      	adds	r1, r7, #4
 80033ae:	f107 0320 	add.w	r3, r7, #32
 80033b2:	4618      	mov	r0, r3
 80033b4:	f005 ffa0 	bl	80092f8 <HAL_SRAM_Init>
}
 80033b8:	bf00      	nop
 80033ba:	3770      	adds	r7, #112	; 0x70
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	a0000104 	.word	0xa0000104

080033c4 <FMC_BANK3_WriteData>:
/**
  * @brief  Writes register value.
  * @param  Data: Data to be written 
  */
static void FMC_BANK3_WriteData(uint16_t Data) 
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3->RAM = Data;
 80033ce:	f04f 42d0 	mov.w	r2, #1744830464	; 0x68000000
 80033d2:	88fb      	ldrh	r3, [r7, #6]
 80033d4:	8053      	strh	r3, [r2, #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80033d6:	f3bf 8f4f 	dsb	sy
  __DSB();
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <FMC_BANK3_WriteReg>:
/**
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  */
static void FMC_BANK3_WriteReg(uint8_t Reg) 
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	4603      	mov	r3, r0
 80033ee:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK3->REG = Reg;
 80033f0:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 80033f4:	79fa      	ldrb	r2, [r7, #7]
 80033f6:	b292      	uxth	r2, r2
 80033f8:	801a      	strh	r2, [r3, #0]
 80033fa:	f3bf 8f4f 	dsb	sy
  __DSB();
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <FMC_BANK3_ReadData>:
/**
  * @brief  Reads register value.
  * @retval Read value
  */
static uint16_t FMC_BANK3_ReadData(void) 
{
 800340a:	b480      	push	{r7}
 800340c:	af00      	add	r7, sp, #0
  return FMC_BANK3->RAM;
 800340e:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8003412:	885b      	ldrh	r3, [r3, #2]
 8003414:	b29b      	uxth	r3, r3
}
 8003416:	4618      	mov	r0, r3
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <LCD_IO_Init>:
/********************************* LINK LCD ***********************************/
/**
  * @brief  Initializes LCD low level.
  */
void LCD_IO_Init(void) 
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  FMC_BANK3_Init();
 8003424:	f7ff ff86 	bl	8003334 <FMC_BANK3_Init>
}
 8003428:	bf00      	nop
 800342a:	bd80      	pop	{r7, pc}

0800342c <LCD_IO_WriteData>:
/**
  * @brief  Writes data on LCD data register.
  * @param  RegValue: Data to be written
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3_WriteData(RegValue);
 8003436:	88fb      	ldrh	r3, [r7, #6]
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff ffc3 	bl	80033c4 <FMC_BANK3_WriteData>
}
 800343e:	bf00      	nop
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <LCD_IO_WriteReg>:
/**
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b082      	sub	sp, #8
 800344a:	af00      	add	r7, sp, #0
 800344c:	4603      	mov	r3, r0
 800344e:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK3_WriteReg(Reg);
 8003450:	79fb      	ldrb	r3, [r7, #7]
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff ffc7 	bl	80033e6 <FMC_BANK3_WriteReg>
}
 8003458:	bf00      	nop
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <LCD_IO_ReadData>:
/**
  * @brief  Reads data from LCD data register.
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void) 
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  return FMC_BANK3_ReadData();
 8003464:	f7ff ffd1 	bl	800340a <FMC_BANK3_ReadData>
 8003468:	4603      	mov	r3, r0
}
 800346a:	4618      	mov	r0, r3
 800346c:	bd80      	pop	{r7, pc}

0800346e <LCD_IO_Delay>:
/**
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  */
void LCD_IO_Delay(uint32_t Delay)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b082      	sub	sp, #8
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fdac 	bl	8003fd4 <HAL_Delay>
}
 800347c:	bf00      	nop
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in STM32F413H_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 800348c:	f000 f80e 	bl	80034ac <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8003490:	bf00      	nop
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  BSP_AUDIO_OUT_Error_CallBack();
 80034a0:	f000 f80b 	bl	80034ba <BSP_AUDIO_OUT_Error_CallBack>
}
 80034a4:	bf00      	nop
 80034a6:	3708      	adds	r7, #8
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/**
  * @brief  Manages the DMA full Transfer complete event.
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
}
 80034b0:	bf00      	nop
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 80034ba:	b480      	push	{r7}
 80034bc:	af00      	add	r7, sp, #0
}
 80034be:	bf00      	nop
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Reception complete callback.
  * @param  hi2s : I2S handle.
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 80034d0:	f000 f804 	bl	80034dc <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80034d4:	bf00      	nop
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 80034e0:	bf00      	nop
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	af00      	add	r7, sp, #0
 return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 80034ee:	2001      	movs	r0, #1
 80034f0:	f000 f804 	bl	80034fc <BSP_LCD_InitEx>
 80034f4:	4603      	mov	r3, r0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	bd80      	pop	{r7, pc}
	...

080034fc <BSP_LCD_InitEx>:
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  *         or LCD_ORIENTATION_LANDSCAPE_ROT180
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{ 
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	73fb      	strb	r3, [r7, #15]

  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 8003508:	4b2c      	ldr	r3, [pc, #176]	; (80035bc <BSP_LCD_InitEx+0xc0>)
 800350a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800350e:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 8003510:	4b2a      	ldr	r3, [pc, #168]	; (80035bc <BSP_LCD_InitEx+0xc0>)
 8003512:	4a2b      	ldr	r2, [pc, #172]	; (80035c0 <BSP_LCD_InitEx+0xc4>)
 8003514:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 8003516:	4b29      	ldr	r3, [pc, #164]	; (80035bc <BSP_LCD_InitEx+0xc0>)
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]
  
  /* Initialize LCD special pins GPIOs */
  BSP_LCD_MspInit();
 800351c:	f000 fc24 	bl	8003d68 <BSP_LCD_MspInit>
  
  /* Backlight control signal assertion */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8003520:	2201      	movs	r2, #1
 8003522:	2120      	movs	r1, #32
 8003524:	4827      	ldr	r0, [pc, #156]	; (80035c4 <BSP_LCD_InitEx+0xc8>)
 8003526:	f001 fd93 	bl	8005050 <HAL_GPIO_WritePin>
  
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 800352a:	2200      	movs	r2, #0
 800352c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003530:	4825      	ldr	r0, [pc, #148]	; (80035c8 <BSP_LCD_InitEx+0xcc>)
 8003532:	f001 fd8d 	bl	8005050 <HAL_GPIO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 8003536:	2005      	movs	r0, #5
 8003538:	f000 fd4c 	bl	8003fd4 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 800353c:	2201      	movs	r2, #1
 800353e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003542:	4821      	ldr	r0, [pc, #132]	; (80035c8 <BSP_LCD_InitEx+0xcc>)
 8003544:	f001 fd84 	bl	8005050 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8003548:	200a      	movs	r0, #10
 800354a:	f000 fd43 	bl	8003fd4 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 800354e:	2200      	movs	r2, #0
 8003550:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003554:	481c      	ldr	r0, [pc, #112]	; (80035c8 <BSP_LCD_InitEx+0xcc>)
 8003556:	f001 fd7b 	bl	8005050 <HAL_GPIO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 800355a:	2014      	movs	r0, #20
 800355c:	f000 fd3a 	bl	8003fd4 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8003560:	2201      	movs	r2, #1
 8003562:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003566:	4818      	ldr	r0, [pc, #96]	; (80035c8 <BSP_LCD_InitEx+0xcc>)
 8003568:	f001 fd72 	bl	8005050 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 800356c:	200a      	movs	r0, #10
 800356e:	f000 fd31 	bl	8003fd4 <HAL_Delay>
  
  if(ST7789H2_drv.ReadID() == ST7789H2_ID)
 8003572:	4b16      	ldr	r3, [pc, #88]	; (80035cc <BSP_LCD_InitEx+0xd0>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	4798      	blx	r3
 8003578:	4603      	mov	r3, r0
 800357a:	2b85      	cmp	r3, #133	; 0x85
 800357c:	d118      	bne.n	80035b0 <BSP_LCD_InitEx+0xb4>
  {    
    LcdDrv = &ST7789H2_drv;
 800357e:	4b14      	ldr	r3, [pc, #80]	; (80035d0 <BSP_LCD_InitEx+0xd4>)
 8003580:	4a12      	ldr	r2, [pc, #72]	; (80035cc <BSP_LCD_InitEx+0xd0>)
 8003582:	601a      	str	r2, [r3, #0]
    
    /* LCD Init */   
    LcdDrv->Init();
 8003584:	4b12      	ldr	r3, [pc, #72]	; (80035d0 <BSP_LCD_InitEx+0xd4>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4798      	blx	r3
    
    if(orientation == LCD_ORIENTATION_PORTRAIT)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d103      	bne.n	800359a <BSP_LCD_InitEx+0x9e>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT); 
 8003592:	2000      	movs	r0, #0
 8003594:	f7ff fabd 	bl	8002b12 <ST7789H2_SetOrientation>
 8003598:	e005      	b.n	80035a6 <BSP_LCD_InitEx+0xaa>
    }
    else if(orientation == LCD_ORIENTATION_LANDSCAPE_ROT180)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b02      	cmp	r3, #2
 800359e:	d102      	bne.n	80035a6 <BSP_LCD_InitEx+0xaa>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_LANDSCAPE_ROT180);
 80035a0:	2002      	movs	r0, #2
 80035a2:	f7ff fab6 	bl	8002b12 <ST7789H2_SetOrientation>
    else
    {
      /* Default landscape orientation is selected */
    }
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80035a6:	480b      	ldr	r0, [pc, #44]	; (80035d4 <BSP_LCD_InitEx+0xd8>)
 80035a8:	f000 f84e 	bl	8003648 <BSP_LCD_SetFont>
    
    ret = LCD_OK;   
 80035ac:	2300      	movs	r3, #0
 80035ae:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80035b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	20004f74 	.word	0x20004f74
 80035c0:	200000e8 	.word	0x200000e8
 80035c4:	40021000 	.word	0x40021000
 80035c8:	40020400 	.word	0x40020400
 80035cc:	200000a8 	.word	0x200000a8
 80035d0:	200001dc 	.word	0x200001dc
 80035d4:	200000f8 	.word	0x200000f8

080035d8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size. 
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelWidth());
 80035dc:	4b03      	ldr	r3, [pc, #12]	; (80035ec <BSP_LCD_GetXSize+0x14>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e2:	4798      	blx	r3
 80035e4:	4603      	mov	r3, r0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	200001dc 	.word	0x200001dc

080035f0 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size. 
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelHeight());
 80035f4:	4b03      	ldr	r3, [pc, #12]	; (8003604 <BSP_LCD_GetYSize+0x14>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fa:	4798      	blx	r3
 80035fc:	4603      	mov	r3, r0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	200001dc 	.word	0x200001dc

08003608 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	4603      	mov	r3, r0
 8003610:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8003612:	88fb      	ldrh	r3, [r7, #6]
 8003614:	4a03      	ldr	r2, [pc, #12]	; (8003624 <BSP_LCD_SetTextColor+0x1c>)
 8003616:	6013      	str	r3, [r2, #0]
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	20004f74 	.word	0x20004f74

08003628 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 8003632:	88fb      	ldrh	r3, [r7, #6]
 8003634:	4a03      	ldr	r2, [pc, #12]	; (8003644 <BSP_LCD_SetBackColor+0x1c>)
 8003636:	6053      	str	r3, [r2, #4]
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	20004f74 	.word	0x20004f74

08003648 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 8003650:	4a04      	ldr	r2, [pc, #16]	; (8003664 <BSP_LCD_SetFont+0x1c>)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6093      	str	r3, [r2, #8]
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	20004f74 	.word	0x20004f74

08003668 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 8003668:	b590      	push	{r4, r7, lr}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	4603      	mov	r3, r0
 8003670:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003672:	2300      	movs	r3, #0
 8003674:	617b      	str	r3, [r7, #20]
  uint32_t y_size = 0;
 8003676:	2300      	movs	r3, #0
 8003678:	613b      	str	r3, [r7, #16]
  uint32_t color_backup = DrawProp.TextColor; 
 800367a:	4b15      	ldr	r3, [pc, #84]	; (80036d0 <BSP_LCD_Clear+0x68>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = Color;
 8003680:	88fb      	ldrh	r3, [r7, #6]
 8003682:	4a13      	ldr	r2, [pc, #76]	; (80036d0 <BSP_LCD_Clear+0x68>)
 8003684:	6013      	str	r3, [r2, #0]
  y_size =  BSP_LCD_GetYSize();
 8003686:	f7ff ffb3 	bl	80035f0 <BSP_LCD_GetYSize>
 800368a:	6138      	str	r0, [r7, #16]
  
  for(counter = 0; counter < y_size; counter++)
 800368c:	2300      	movs	r3, #0
 800368e:	617b      	str	r3, [r7, #20]
 8003690:	e00d      	b.n	80036ae <BSP_LCD_Clear+0x46>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	b29c      	uxth	r4, r3
 8003696:	f7ff ff9f 	bl	80035d8 <BSP_LCD_GetXSize>
 800369a:	4603      	mov	r3, r0
 800369c:	b29b      	uxth	r3, r3
 800369e:	461a      	mov	r2, r3
 80036a0:	4621      	mov	r1, r4
 80036a2:	2000      	movs	r0, #0
 80036a4:	f000 f8ee 	bl	8003884 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < y_size; counter++)
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	3301      	adds	r3, #1
 80036ac:	617b      	str	r3, [r7, #20]
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d3ed      	bcc.n	8003692 <BSP_LCD_Clear+0x2a>
  }
  DrawProp.TextColor = color_backup; 
 80036b6:	4a06      	ldr	r2, [pc, #24]	; (80036d0 <BSP_LCD_Clear+0x68>)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 80036bc:	4b04      	ldr	r3, [pc, #16]	; (80036d0 <BSP_LCD_Clear+0x68>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff ffa0 	bl	8003608 <BSP_LCD_SetTextColor>
}
 80036c8:	bf00      	nop
 80036ca:	371c      	adds	r7, #28
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd90      	pop	{r4, r7, pc}
 80036d0:	20004f74 	.word	0x20004f74

080036d4 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	4603      	mov	r3, r0
 80036dc:	80fb      	strh	r3, [r7, #6]
 80036de:	460b      	mov	r3, r1
 80036e0:	80bb      	strh	r3, [r7, #4]
 80036e2:	4613      	mov	r3, r2
 80036e4:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80036e6:	4b0f      	ldr	r3, [pc, #60]	; (8003724 <BSP_LCD_DisplayChar+0x50>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	78fb      	ldrb	r3, [r7, #3]
 80036ee:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 80036f0:	490c      	ldr	r1, [pc, #48]	; (8003724 <BSP_LCD_DisplayChar+0x50>)
 80036f2:	6889      	ldr	r1, [r1, #8]
 80036f4:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80036f6:	fb01 f103 	mul.w	r1, r1, r3
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 80036fa:	4b0a      	ldr	r3, [pc, #40]	; (8003724 <BSP_LCD_DisplayChar+0x50>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	889b      	ldrh	r3, [r3, #4]
 8003700:	3307      	adds	r3, #7
 8003702:	2b00      	cmp	r3, #0
 8003704:	da00      	bge.n	8003708 <BSP_LCD_DisplayChar+0x34>
 8003706:	3307      	adds	r3, #7
 8003708:	10db      	asrs	r3, r3, #3
 800370a:	fb03 f301 	mul.w	r3, r3, r1
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800370e:	441a      	add	r2, r3
 8003710:	88b9      	ldrh	r1, [r7, #4]
 8003712:	88fb      	ldrh	r3, [r7, #6]
 8003714:	4618      	mov	r0, r3
 8003716:	f000 fb83 	bl	8003e20 <DrawChar>
}
 800371a:	bf00      	nop
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	20004f74 	.word	0x20004f74

08003728 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 8003728:	b590      	push	{r4, r7, lr}
 800372a:	b089      	sub	sp, #36	; 0x24
 800372c:	af00      	add	r7, sp, #0
 800372e:	60ba      	str	r2, [r7, #8]
 8003730:	461a      	mov	r2, r3
 8003732:	4603      	mov	r3, r0
 8003734:	81fb      	strh	r3, [r7, #14]
 8003736:	460b      	mov	r3, r1
 8003738:	81bb      	strh	r3, [r7, #12]
 800373a:	4613      	mov	r3, r2
 800373c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800373e:	2301      	movs	r3, #1
 8003740:	83fb      	strh	r3, [r7, #30]
 8003742:	2300      	movs	r3, #0
 8003744:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003746:	2300      	movs	r3, #0
 8003748:	61bb      	str	r3, [r7, #24]
 800374a:	2300      	movs	r3, #0
 800374c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003752:	e002      	b.n	800375a <BSP_LCD_DisplayStringAt+0x32>
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	3301      	adds	r3, #1
 8003758:	61bb      	str	r3, [r7, #24]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	617a      	str	r2, [r7, #20]
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f6      	bne.n	8003754 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 8003766:	f7ff ff37 	bl	80035d8 <BSP_LCD_GetXSize>
 800376a:	4602      	mov	r2, r0
 800376c:	4b36      	ldr	r3, [pc, #216]	; (8003848 <BSP_LCD_DisplayStringAt+0x120>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	889b      	ldrh	r3, [r3, #4]
 8003772:	fbb2 f3f3 	udiv	r3, r2, r3
 8003776:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8003778:	79fb      	ldrb	r3, [r7, #7]
 800377a:	2b02      	cmp	r3, #2
 800377c:	d014      	beq.n	80037a8 <BSP_LCD_DisplayStringAt+0x80>
 800377e:	2b03      	cmp	r3, #3
 8003780:	d00f      	beq.n	80037a2 <BSP_LCD_DisplayStringAt+0x7a>
 8003782:	2b01      	cmp	r3, #1
 8003784:	d11e      	bne.n	80037c4 <BSP_LCD_DisplayStringAt+0x9c>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	4a2e      	ldr	r2, [pc, #184]	; (8003848 <BSP_LCD_DisplayStringAt+0x120>)
 800378e:	6892      	ldr	r2, [r2, #8]
 8003790:	8892      	ldrh	r2, [r2, #4]
 8003792:	fb02 f303 	mul.w	r3, r2, r3
 8003796:	085b      	lsrs	r3, r3, #1
 8003798:	b29a      	uxth	r2, r3
 800379a:	89fb      	ldrh	r3, [r7, #14]
 800379c:	4413      	add	r3, r2
 800379e:	83fb      	strh	r3, [r7, #30]
      break;
 80037a0:	e013      	b.n	80037ca <BSP_LCD_DisplayStringAt+0xa2>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 80037a2:	89fb      	ldrh	r3, [r7, #14]
 80037a4:	83fb      	strh	r3, [r7, #30]
      break;
 80037a6:	e010      	b.n	80037ca <BSP_LCD_DisplayStringAt+0xa2>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	4b25      	ldr	r3, [pc, #148]	; (8003848 <BSP_LCD_DisplayStringAt+0x120>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	889b      	ldrh	r3, [r3, #4]
 80037b6:	fb12 f303 	smulbb	r3, r2, r3
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	89fb      	ldrh	r3, [r7, #14]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	83fb      	strh	r3, [r7, #30]
      break;
 80037c2:	e002      	b.n	80037ca <BSP_LCD_DisplayStringAt+0xa2>
    }    
  default:
    {
      refcolumn = Xpos;
 80037c4:	89fb      	ldrh	r3, [r7, #14]
 80037c6:	83fb      	strh	r3, [r7, #30]
      break;
 80037c8:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 80037ca:	8bfb      	ldrh	r3, [r7, #30]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <BSP_LCD_DisplayStringAt+0xb0>
 80037d0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	da15      	bge.n	8003804 <BSP_LCD_DisplayStringAt+0xdc>
  {
    refcolumn = 1;
 80037d8:	2301      	movs	r3, #1
 80037da:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on lCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 80037dc:	e012      	b.n	8003804 <BSP_LCD_DisplayStringAt+0xdc>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	781a      	ldrb	r2, [r3, #0]
 80037e2:	89b9      	ldrh	r1, [r7, #12]
 80037e4:	8bfb      	ldrh	r3, [r7, #30]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff ff74 	bl	80036d4 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 80037ec:	4b16      	ldr	r3, [pc, #88]	; (8003848 <BSP_LCD_DisplayStringAt+0x120>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	889a      	ldrh	r2, [r3, #4]
 80037f2:	8bfb      	ldrh	r3, [r7, #30]
 80037f4:	4413      	add	r3, r2
 80037f6:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	3301      	adds	r3, #1
 80037fc:	60bb      	str	r3, [r7, #8]
    i++;
 80037fe:	8bbb      	ldrh	r3, [r7, #28]
 8003800:	3301      	adds	r3, #1
 8003802:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	bf14      	ite	ne
 800380c:	2301      	movne	r3, #1
 800380e:	2300      	moveq	r3, #0
 8003810:	b2dc      	uxtb	r4, r3
 8003812:	f7ff fee1 	bl	80035d8 <BSP_LCD_GetXSize>
 8003816:	4601      	mov	r1, r0
 8003818:	8bbb      	ldrh	r3, [r7, #28]
 800381a:	4a0b      	ldr	r2, [pc, #44]	; (8003848 <BSP_LCD_DisplayStringAt+0x120>)
 800381c:	6892      	ldr	r2, [r2, #8]
 800381e:	8892      	ldrh	r2, [r2, #4]
 8003820:	fb02 f303 	mul.w	r3, r2, r3
 8003824:	1acb      	subs	r3, r1, r3
 8003826:	b29b      	uxth	r3, r3
 8003828:	4a07      	ldr	r2, [pc, #28]	; (8003848 <BSP_LCD_DisplayStringAt+0x120>)
 800382a:	6892      	ldr	r2, [r2, #8]
 800382c:	8892      	ldrh	r2, [r2, #4]
 800382e:	4293      	cmp	r3, r2
 8003830:	bf2c      	ite	cs
 8003832:	2301      	movcs	r3, #1
 8003834:	2300      	movcc	r3, #0
 8003836:	b2db      	uxtb	r3, r3
 8003838:	4023      	ands	r3, r4
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1ce      	bne.n	80037de <BSP_LCD_DisplayStringAt+0xb6>
  }
}
 8003840:	bf00      	nop
 8003842:	3724      	adds	r7, #36	; 0x24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd90      	pop	{r4, r7, pc}
 8003848:	20004f74 	.word	0x20004f74

0800384c <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position 
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	80fb      	strh	r3, [r7, #6]
 8003856:	460b      	mov	r3, r1
 8003858:	80bb      	strh	r3, [r7, #4]
 800385a:	4613      	mov	r3, r2
 800385c:	807b      	strh	r3, [r7, #2]
  if(LcdDrv->WritePixel != NULL)
 800385e:	4b08      	ldr	r3, [pc, #32]	; (8003880 <BSP_LCD_DrawPixel+0x34>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d006      	beq.n	8003876 <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 8003868:	4b05      	ldr	r3, [pc, #20]	; (8003880 <BSP_LCD_DrawPixel+0x34>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	887a      	ldrh	r2, [r7, #2]
 8003870:	88b9      	ldrh	r1, [r7, #4]
 8003872:	88f8      	ldrh	r0, [r7, #6]
 8003874:	4798      	blx	r3
  }
}
 8003876:	bf00      	nop
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	200001dc 	.word	0x200001dc

08003884 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003884:	b590      	push	{r4, r7, lr}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	80fb      	strh	r3, [r7, #6]
 800388e:	460b      	mov	r3, r1
 8003890:	80bb      	strh	r3, [r7, #4]
 8003892:	4613      	mov	r3, r2
 8003894:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8003896:	2300      	movs	r3, #0
 8003898:	60fb      	str	r3, [r7, #12]
  
  if(LcdDrv->DrawHLine != NULL)
 800389a:	4b15      	ldr	r3, [pc, #84]	; (80038f0 <BSP_LCD_DrawHLine+0x6c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00a      	beq.n	80038ba <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 80038a4:	4b12      	ldr	r3, [pc, #72]	; (80038f0 <BSP_LCD_DrawHLine+0x6c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6a1c      	ldr	r4, [r3, #32]
 80038aa:	4b12      	ldr	r3, [pc, #72]	; (80038f4 <BSP_LCD_DrawHLine+0x70>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	b298      	uxth	r0, r3
 80038b0:	887b      	ldrh	r3, [r7, #2]
 80038b2:	88ba      	ldrh	r2, [r7, #4]
 80038b4:	88f9      	ldrh	r1, [r7, #6]
 80038b6:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 80038b8:	e015      	b.n	80038e6 <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 80038ba:	2300      	movs	r3, #0
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	e00e      	b.n	80038de <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	88fb      	ldrh	r3, [r7, #6]
 80038c6:	4413      	add	r3, r2
 80038c8:	b298      	uxth	r0, r3
 80038ca:	4b0a      	ldr	r3, [pc, #40]	; (80038f4 <BSP_LCD_DrawHLine+0x70>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	88bb      	ldrh	r3, [r7, #4]
 80038d2:	4619      	mov	r1, r3
 80038d4:	f7ff ffba 	bl	800384c <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	3301      	adds	r3, #1
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	887b      	ldrh	r3, [r7, #2]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d3ec      	bcc.n	80038c0 <BSP_LCD_DrawHLine+0x3c>
}
 80038e6:	bf00      	nop
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd90      	pop	{r4, r7, pc}
 80038ee:	bf00      	nop
 80038f0:	200001dc 	.word	0x200001dc
 80038f4:	20004f74 	.word	0x20004f74

080038f8 <BSP_LCD_DrawLine>:
  * @param  y1: Point 1 Y position
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80038f8:	b590      	push	{r4, r7, lr}
 80038fa:	b08b      	sub	sp, #44	; 0x2c
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	4604      	mov	r4, r0
 8003900:	4608      	mov	r0, r1
 8003902:	4611      	mov	r1, r2
 8003904:	461a      	mov	r2, r3
 8003906:	4623      	mov	r3, r4
 8003908:	80fb      	strh	r3, [r7, #6]
 800390a:	4603      	mov	r3, r0
 800390c:	80bb      	strh	r3, [r7, #4]
 800390e:	460b      	mov	r3, r1
 8003910:	807b      	strh	r3, [r7, #2]
 8003912:	4613      	mov	r3, r2
 8003914:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8003916:	2300      	movs	r3, #0
 8003918:	823b      	strh	r3, [r7, #16]
 800391a:	2300      	movs	r3, #0
 800391c:	81fb      	strh	r3, [r7, #14]
 800391e:	2300      	movs	r3, #0
 8003920:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003922:	2300      	movs	r3, #0
 8003924:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003926:	2300      	movs	r3, #0
 8003928:	847b      	strh	r3, [r7, #34]	; 0x22
 800392a:	2300      	movs	r3, #0
 800392c:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 800392e:	2300      	movs	r3, #0
 8003930:	83fb      	strh	r3, [r7, #30]
 8003932:	2300      	movs	r3, #0
 8003934:	83bb      	strh	r3, [r7, #28]
 8003936:	2300      	movs	r3, #0
 8003938:	837b      	strh	r3, [r7, #26]
 800393a:	2300      	movs	r3, #0
 800393c:	833b      	strh	r3, [r7, #24]
 800393e:	2300      	movs	r3, #0
 8003940:	82fb      	strh	r3, [r7, #22]
 8003942:	2300      	movs	r3, #0
 8003944:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8003946:	2300      	movs	r3, #0
 8003948:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800394a:	887a      	ldrh	r2, [r7, #2]
 800394c:	88fb      	ldrh	r3, [r7, #6]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	bfb8      	it	lt
 8003954:	425b      	neglt	r3, r3
 8003956:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8003958:	883a      	ldrh	r2, [r7, #0]
 800395a:	88bb      	ldrh	r3, [r7, #4]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	bfb8      	it	lt
 8003962:	425b      	neglt	r3, r3
 8003964:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8003966:	88fb      	ldrh	r3, [r7, #6]
 8003968:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 800396a:	88bb      	ldrh	r3, [r7, #4]
 800396c:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 800396e:	887a      	ldrh	r2, [r7, #2]
 8003970:	88fb      	ldrh	r3, [r7, #6]
 8003972:	429a      	cmp	r2, r3
 8003974:	d304      	bcc.n	8003980 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8003976:	2301      	movs	r3, #1
 8003978:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 800397a:	2301      	movs	r3, #1
 800397c:	843b      	strh	r3, [r7, #32]
 800397e:	e005      	b.n	800398c <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8003980:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003984:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8003986:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800398a:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 800398c:	883a      	ldrh	r2, [r7, #0]
 800398e:	88bb      	ldrh	r3, [r7, #4]
 8003990:	429a      	cmp	r2, r3
 8003992:	d304      	bcc.n	800399e <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8003994:	2301      	movs	r3, #1
 8003996:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8003998:	2301      	movs	r3, #1
 800399a:	83bb      	strh	r3, [r7, #28]
 800399c:	e005      	b.n	80039aa <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 800399e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039a2:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 80039a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039a8:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80039aa:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80039ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	db10      	blt.n	80039d8 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 80039b6:	2300      	movs	r3, #0
 80039b8:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 80039ba:	2300      	movs	r3, #0
 80039bc:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 80039be:	8a3b      	ldrh	r3, [r7, #16]
 80039c0:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 80039c2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80039c6:	0fda      	lsrs	r2, r3, #31
 80039c8:	4413      	add	r3, r2
 80039ca:	105b      	asrs	r3, r3, #1
 80039cc:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 80039ce:	89fb      	ldrh	r3, [r7, #14]
 80039d0:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 80039d2:	8a3b      	ldrh	r3, [r7, #16]
 80039d4:	82bb      	strh	r3, [r7, #20]
 80039d6:	e00f      	b.n	80039f8 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80039d8:	2300      	movs	r3, #0
 80039da:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80039dc:	2300      	movs	r3, #0
 80039de:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 80039e0:	89fb      	ldrh	r3, [r7, #14]
 80039e2:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 80039e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80039e8:	0fda      	lsrs	r2, r3, #31
 80039ea:	4413      	add	r3, r2
 80039ec:	105b      	asrs	r3, r3, #1
 80039ee:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 80039f0:	8a3b      	ldrh	r3, [r7, #16]
 80039f2:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 80039f4:	89fb      	ldrh	r3, [r7, #14]
 80039f6:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80039f8:	2300      	movs	r3, #0
 80039fa:	827b      	strh	r3, [r7, #18]
 80039fc:	e031      	b.n	8003a62 <BSP_LCD_DrawLine+0x16a>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp.TextColor);  /* Draw the current pixel */
 80039fe:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8003a00:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003a02:	4b1d      	ldr	r3, [pc, #116]	; (8003a78 <BSP_LCD_DrawLine+0x180>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	461a      	mov	r2, r3
 8003a0a:	f7ff ff1f 	bl	800384c <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8003a0e:	8b3a      	ldrh	r2, [r7, #24]
 8003a10:	8afb      	ldrh	r3, [r7, #22]
 8003a12:	4413      	add	r3, r2
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8003a18:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003a1c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	db0e      	blt.n	8003a42 <BSP_LCD_DrawLine+0x14a>
    {
      num -= den;                             /* Calculate the new numerator value */
 8003a24:	8b3a      	ldrh	r2, [r7, #24]
 8003a26:	8b7b      	ldrh	r3, [r7, #26]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8003a2e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003a30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003a32:	4413      	add	r3, r2
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8003a38:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a3a:	8bfb      	ldrh	r3, [r7, #30]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8003a42:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003a44:	8c3b      	ldrh	r3, [r7, #32]
 8003a46:	4413      	add	r3, r2
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8003a4c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a4e:	8bbb      	ldrh	r3, [r7, #28]
 8003a50:	4413      	add	r3, r2
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8003a56:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	827b      	strh	r3, [r7, #18]
 8003a62:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003a66:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	ddc7      	ble.n	80039fe <BSP_LCD_DrawLine+0x106>
  }
}
 8003a6e:	bf00      	nop
 8003a70:	372c      	adds	r7, #44	; 0x2c
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd90      	pop	{r4, r7, pc}
 8003a76:	bf00      	nop
 8003a78:	20004f74 	.word	0x20004f74

08003a7c <BSP_LCD_DrawCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	80fb      	strh	r3, [r7, #6]
 8003a86:	460b      	mov	r3, r1
 8003a88:	80bb      	strh	r3, [r7, #4]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	807b      	strh	r3, [r7, #2]
  int32_t  decision;       /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */ 
  
  decision = 3 - (Radius << 1);
 8003a8e:	887b      	ldrh	r3, [r7, #2]
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	f1c3 0303 	rsb	r3, r3, #3
 8003a96:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8003a9c:	887b      	ldrh	r3, [r7, #2]
 8003a9e:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8003aa0:	e09a      	b.n	8003bd8 <BSP_LCD_DrawCircle+0x15c>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp.TextColor);
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	88fb      	ldrh	r3, [r7, #6]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	b298      	uxth	r0, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	88ba      	ldrh	r2, [r7, #4]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	b299      	uxth	r1, r3
 8003ab6:	4b4d      	ldr	r3, [pc, #308]	; (8003bec <BSP_LCD_DrawCircle+0x170>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	461a      	mov	r2, r3
 8003abe:	f7ff fec5 	bl	800384c <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp.TextColor);
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	88fa      	ldrh	r2, [r7, #6]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	b298      	uxth	r0, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	88ba      	ldrh	r2, [r7, #4]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	b299      	uxth	r1, r3
 8003ad6:	4b45      	ldr	r3, [pc, #276]	; (8003bec <BSP_LCD_DrawCircle+0x170>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	461a      	mov	r2, r3
 8003ade:	f7ff feb5 	bl	800384c <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp.TextColor);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	88fb      	ldrh	r3, [r7, #6]
 8003ae8:	4413      	add	r3, r2
 8003aea:	b298      	uxth	r0, r3
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	88ba      	ldrh	r2, [r7, #4]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	b299      	uxth	r1, r3
 8003af6:	4b3d      	ldr	r3, [pc, #244]	; (8003bec <BSP_LCD_DrawCircle+0x170>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	461a      	mov	r2, r3
 8003afe:	f7ff fea5 	bl	800384c <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp.TextColor);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	88fa      	ldrh	r2, [r7, #6]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	b298      	uxth	r0, r3
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	88ba      	ldrh	r2, [r7, #4]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	b299      	uxth	r1, r3
 8003b16:	4b35      	ldr	r3, [pc, #212]	; (8003bec <BSP_LCD_DrawCircle+0x170>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	f7ff fe95 	bl	800384c <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp.TextColor);
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	88fb      	ldrh	r3, [r7, #6]
 8003b28:	4413      	add	r3, r2
 8003b2a:	b298      	uxth	r0, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	88bb      	ldrh	r3, [r7, #4]
 8003b32:	4413      	add	r3, r2
 8003b34:	b299      	uxth	r1, r3
 8003b36:	4b2d      	ldr	r3, [pc, #180]	; (8003bec <BSP_LCD_DrawCircle+0x170>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	f7ff fe85 	bl	800384c <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp.TextColor);
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	88fa      	ldrh	r2, [r7, #6]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	b298      	uxth	r0, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	88bb      	ldrh	r3, [r7, #4]
 8003b52:	4413      	add	r3, r2
 8003b54:	b299      	uxth	r1, r3
 8003b56:	4b25      	ldr	r3, [pc, #148]	; (8003bec <BSP_LCD_DrawCircle+0x170>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	f7ff fe75 	bl	800384c <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp.TextColor);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	88fb      	ldrh	r3, [r7, #6]
 8003b68:	4413      	add	r3, r2
 8003b6a:	b298      	uxth	r0, r3
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	88bb      	ldrh	r3, [r7, #4]
 8003b72:	4413      	add	r3, r2
 8003b74:	b299      	uxth	r1, r3
 8003b76:	4b1d      	ldr	r3, [pc, #116]	; (8003bec <BSP_LCD_DrawCircle+0x170>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	f7ff fe65 	bl	800384c <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp.TextColor);   
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	88fa      	ldrh	r2, [r7, #6]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	b298      	uxth	r0, r3
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	88bb      	ldrh	r3, [r7, #4]
 8003b92:	4413      	add	r3, r2
 8003b94:	b299      	uxth	r1, r3
 8003b96:	4b15      	ldr	r3, [pc, #84]	; (8003bec <BSP_LCD_DrawCircle+0x170>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	f7ff fe55 	bl	800384c <BSP_LCD_DrawPixel>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003ba2:	4813      	ldr	r0, [pc, #76]	; (8003bf0 <BSP_LCD_DrawCircle+0x174>)
 8003ba4:	f7ff fd50 	bl	8003648 <BSP_LCD_SetFont>

    if (decision < 0)
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	da06      	bge.n	8003bbc <BSP_LCD_DrawCircle+0x140>
    { 
      decision += (current_x << 2) + 6;
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	009a      	lsls	r2, r3, #2
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	3306      	adds	r3, #6
 8003bb8:	617b      	str	r3, [r7, #20]
 8003bba:	e00a      	b.n	8003bd2 <BSP_LCD_DrawCircle+0x156>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	009a      	lsls	r2, r3, #2
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	330a      	adds	r3, #10
 8003bca:	617b      	str	r3, [r7, #20]
      current_y--;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	f67f af60 	bls.w	8003aa2 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8003be2:	bf00      	nop
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	20004f74 	.word	0x20004f74
 8003bf0:	200000f8 	.word	0x200000f8

08003bf4 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003bf4:	b590      	push	{r4, r7, lr}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	4604      	mov	r4, r0
 8003bfc:	4608      	mov	r0, r1
 8003bfe:	4611      	mov	r1, r2
 8003c00:	461a      	mov	r2, r3
 8003c02:	4623      	mov	r3, r4
 8003c04:	80fb      	strh	r3, [r7, #6]
 8003c06:	4603      	mov	r3, r0
 8003c08:	80bb      	strh	r3, [r7, #4]
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	807b      	strh	r3, [r7, #2]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	803b      	strh	r3, [r7, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8003c12:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <BSP_LCD_FillRect+0x4c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7ff fcf5 	bl	8003608 <BSP_LCD_SetTextColor>
  do
  {
    BSP_LCD_DrawHLine(Xpos, Ypos++, Width);    
 8003c1e:	88bb      	ldrh	r3, [r7, #4]
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	80ba      	strh	r2, [r7, #4]
 8003c24:	887a      	ldrh	r2, [r7, #2]
 8003c26:	88f8      	ldrh	r0, [r7, #6]
 8003c28:	4619      	mov	r1, r3
 8003c2a:	f7ff fe2b 	bl	8003884 <BSP_LCD_DrawHLine>
  }
  while(Height--);
 8003c2e:	883b      	ldrh	r3, [r7, #0]
 8003c30:	1e5a      	subs	r2, r3, #1
 8003c32:	803a      	strh	r2, [r7, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1f2      	bne.n	8003c1e <BSP_LCD_FillRect+0x2a>
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd90      	pop	{r4, r7, pc}
 8003c40:	20004f74 	.word	0x20004f74

08003c44 <BSP_LCD_FillCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	80fb      	strh	r3, [r7, #6]
 8003c4e:	460b      	mov	r3, r1
 8003c50:	80bb      	strh	r3, [r7, #4]
 8003c52:	4613      	mov	r3, r2
 8003c54:	807b      	strh	r3, [r7, #2]
  int32_t  decision;        /* Decision Variable */ 
  uint32_t  current_x;    /* Current X Value */
  uint32_t  current_y;    /* Current Y Value */ 
  
  decision = 3 - (Radius << 1);
 8003c56:	887b      	ldrh	r3, [r7, #2]
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	f1c3 0303 	rsb	r3, r3, #3
 8003c5e:	617b      	str	r3, [r7, #20]

  current_x = 0;
 8003c60:	2300      	movs	r3, #0
 8003c62:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8003c64:	887b      	ldrh	r3, [r7, #2]
 8003c66:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8003c68:	4b3e      	ldr	r3, [pc, #248]	; (8003d64 <BSP_LCD_FillCircle+0x120>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7ff fcca 	bl	8003608 <BSP_LCD_SetTextColor>

  while (current_x <= current_y)
 8003c74:	e061      	b.n	8003d3a <BSP_LCD_FillCircle+0xf6>
  {
    if(current_y > 0) 
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d021      	beq.n	8003cc0 <BSP_LCD_FillCircle+0x7c>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	88fa      	ldrh	r2, [r7, #6]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	b298      	uxth	r0, r3
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	88bb      	ldrh	r3, [r7, #4]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	b299      	uxth	r1, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	461a      	mov	r2, r3
 8003c9a:	f7ff fdf3 	bl	8003884 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	88fa      	ldrh	r2, [r7, #6]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	b298      	uxth	r0, r3
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	88ba      	ldrh	r2, [r7, #4]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	b299      	uxth	r1, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	461a      	mov	r2, r3
 8003cbc:	f7ff fde2 	bl	8003884 <BSP_LCD_DrawHLine>
    }

    if(current_x > 0) 
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d021      	beq.n	8003d0a <BSP_LCD_FillCircle+0xc6>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	88fa      	ldrh	r2, [r7, #6]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	b298      	uxth	r0, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	88ba      	ldrh	r2, [r7, #4]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	b299      	uxth	r1, r3
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	f7ff fdce 	bl	8003884 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	88fa      	ldrh	r2, [r7, #6]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	b298      	uxth	r0, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	88bb      	ldrh	r3, [r7, #4]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	b299      	uxth	r1, r3
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	461a      	mov	r2, r3
 8003d06:	f7ff fdbd 	bl	8003884 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	da06      	bge.n	8003d1e <BSP_LCD_FillCircle+0xda>
    { 
      decision += (current_x << 2) + 6;
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	009a      	lsls	r2, r3, #2
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	4413      	add	r3, r2
 8003d18:	3306      	adds	r3, #6
 8003d1a:	617b      	str	r3, [r7, #20]
 8003d1c:	e00a      	b.n	8003d34 <BSP_LCD_FillCircle+0xf0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	009a      	lsls	r2, r3, #2
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	4413      	add	r3, r2
 8003d2a:	330a      	adds	r3, #10
 8003d2c:	617b      	str	r3, [r7, #20]
      current_y--;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	3b01      	subs	r3, #1
 8003d32:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	3301      	adds	r3, #1
 8003d38:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d999      	bls.n	8003c76 <BSP_LCD_FillCircle+0x32>
  }

  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8003d42:	4b08      	ldr	r3, [pc, #32]	; (8003d64 <BSP_LCD_FillCircle+0x120>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff fc5d 	bl	8003608 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003d4e:	887a      	ldrh	r2, [r7, #2]
 8003d50:	88b9      	ldrh	r1, [r7, #4]
 8003d52:	88fb      	ldrh	r3, [r7, #6]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff fe91 	bl	8003a7c <BSP_LCD_DrawCircle>
}
 8003d5a:	bf00      	nop
 8003d5c:	3718      	adds	r7, #24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	20004f74 	.word	0x20004f74

08003d68 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LCD GPIO special pins MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIOs clock */
  LCD_RESET_GPIO_CLK_ENABLE();
 8003d6e:	2300      	movs	r3, #0
 8003d70:	60bb      	str	r3, [r7, #8]
 8003d72:	4b28      	ldr	r3, [pc, #160]	; (8003e14 <BSP_LCD_MspInit+0xac>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	4a27      	ldr	r2, [pc, #156]	; (8003e14 <BSP_LCD_MspInit+0xac>)
 8003d78:	f043 0302 	orr.w	r3, r3, #2
 8003d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d7e:	4b25      	ldr	r3, [pc, #148]	; (8003e14 <BSP_LCD_MspInit+0xac>)
 8003d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	60bb      	str	r3, [r7, #8]
 8003d88:	68bb      	ldr	r3, [r7, #8]
  LCD_TE_GPIO_CLK_ENABLE();
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	607b      	str	r3, [r7, #4]
 8003d8e:	4b21      	ldr	r3, [pc, #132]	; (8003e14 <BSP_LCD_MspInit+0xac>)
 8003d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d92:	4a20      	ldr	r2, [pc, #128]	; (8003e14 <BSP_LCD_MspInit+0xac>)
 8003d94:	f043 0302 	orr.w	r3, r3, #2
 8003d98:	6313      	str	r3, [r2, #48]	; 0x30
 8003d9a:	4b1e      	ldr	r3, [pc, #120]	; (8003e14 <BSP_LCD_MspInit+0xac>)
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	607b      	str	r3, [r7, #4]
 8003da4:	687b      	ldr	r3, [r7, #4]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003da6:	2300      	movs	r3, #0
 8003da8:	603b      	str	r3, [r7, #0]
 8003daa:	4b1a      	ldr	r3, [pc, #104]	; (8003e14 <BSP_LCD_MspInit+0xac>)
 8003dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dae:	4a19      	ldr	r2, [pc, #100]	; (8003e14 <BSP_LCD_MspInit+0xac>)
 8003db0:	f043 0310 	orr.w	r3, r3, #16
 8003db4:	6313      	str	r3, [r2, #48]	; 0x30
 8003db6:	4b17      	ldr	r3, [pc, #92]	; (8003e14 <BSP_LCD_MspInit+0xac>)
 8003db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dba:	f003 0310 	and.w	r3, r3, #16
 8003dbe:	603b      	str	r3, [r7, #0]
 8003dc0:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  gpio_init_structure.Pin       = LCD_RESET_PIN;     /* LCD_RESET pin has to be manually controlled */
 8003dc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003dc6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003dcc:	2302      	movs	r3, #2
 8003dce:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 8003dd4:	f107 030c 	add.w	r3, r7, #12
 8003dd8:	4619      	mov	r1, r3
 8003dda:	480f      	ldr	r0, [pc, #60]	; (8003e18 <BSP_LCD_MspInit+0xb0>)
 8003ddc:	f000 ff8e 	bl	8004cfc <HAL_GPIO_Init>

  /* LCD_TE GPIO configuration */
  gpio_init_structure.Pin       = LCD_TE_PIN;        /* LCD_TE pin has to be manually managed */
 8003de0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003de4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8003de6:	2300      	movs	r3, #0
 8003de8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8003dea:	f107 030c 	add.w	r3, r7, #12
 8003dee:	4619      	mov	r1, r3
 8003df0:	4809      	ldr	r0, [pc, #36]	; (8003e18 <BSP_LCD_MspInit+0xb0>)
 8003df2:	f000 ff83 	bl	8004cfc <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 8003df6:	2320      	movs	r3, #32
 8003df8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003dfe:	f107 030c 	add.w	r3, r7, #12
 8003e02:	4619      	mov	r1, r3
 8003e04:	4805      	ldr	r0, [pc, #20]	; (8003e1c <BSP_LCD_MspInit+0xb4>)
 8003e06:	f000 ff79 	bl	8004cfc <HAL_GPIO_Init>
}
 8003e0a:	bf00      	nop
 8003e0c:	3720      	adds	r7, #32
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40023800 	.word	0x40023800
 8003e18:	40020400 	.word	0x40020400
 8003e1c:	40021000 	.word	0x40021000

08003e20 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	4603      	mov	r3, r0
 8003e28:	603a      	str	r2, [r7, #0]
 8003e2a:	80fb      	strh	r3, [r7, #6]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003e30:	2300      	movs	r3, #0
 8003e32:	61fb      	str	r3, [r7, #28]
 8003e34:	2300      	movs	r3, #0
 8003e36:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;
  
  height = DrawProp.pFont->Height;
 8003e38:	4b44      	ldr	r3, [pc, #272]	; (8003f4c <DrawChar+0x12c>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	88db      	ldrh	r3, [r3, #6]
 8003e3e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp.pFont->Width;
 8003e40:	4b42      	ldr	r3, [pc, #264]	; (8003f4c <DrawChar+0x12c>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	889b      	ldrh	r3, [r3, #4]
 8003e46:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003e48:	8a3b      	ldrh	r3, [r7, #16]
 8003e4a:	3307      	adds	r3, #7
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	da00      	bge.n	8003e52 <DrawChar+0x32>
 8003e50:	3307      	adds	r3, #7
 8003e52:	10db      	asrs	r3, r3, #3
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	b2da      	uxtb	r2, r3
 8003e5a:	8a3b      	ldrh	r3, [r7, #16]
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8003e62:	2300      	movs	r3, #0
 8003e64:	61fb      	str	r3, [r7, #28]
 8003e66:	e069      	b.n	8003f3c <DrawChar+0x11c>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003e68:	8a3b      	ldrh	r3, [r7, #16]
 8003e6a:	3307      	adds	r3, #7
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	da00      	bge.n	8003e72 <DrawChar+0x52>
 8003e70:	3307      	adds	r3, #7
 8003e72:	10db      	asrs	r3, r3, #3
 8003e74:	461a      	mov	r2, r3
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	fb03 f302 	mul.w	r3, r3, r2
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	4413      	add	r3, r2
 8003e80:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8003e82:	8a3b      	ldrh	r3, [r7, #16]
 8003e84:	3307      	adds	r3, #7
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	da00      	bge.n	8003e8c <DrawChar+0x6c>
 8003e8a:	3307      	adds	r3, #7
 8003e8c:	10db      	asrs	r3, r3, #3
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d002      	beq.n	8003e98 <DrawChar+0x78>
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d004      	beq.n	8003ea0 <DrawChar+0x80>
 8003e96:	e00c      	b.n	8003eb2 <DrawChar+0x92>
    {
    case 1:
      line =  pchar[0];
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	617b      	str	r3, [r7, #20]
      break;    
 8003e9e:	e016      	b.n	8003ece <DrawChar+0xae>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	021b      	lsls	r3, r3, #8
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	3201      	adds	r2, #1
 8003eaa:	7812      	ldrb	r2, [r2, #0]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	617b      	str	r3, [r7, #20]
      break;
 8003eb0:	e00d      	b.n	8003ece <DrawChar+0xae>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	041a      	lsls	r2, r3, #16
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	021b      	lsls	r3, r3, #8
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	3202      	adds	r2, #2
 8003ec6:	7812      	ldrb	r2, [r2, #0]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	617b      	str	r3, [r7, #20]
      break;
 8003ecc:	bf00      	nop
    }  
    
    for (j = 0; j < width; j++)
 8003ece:	2300      	movs	r3, #0
 8003ed0:	61bb      	str	r3, [r7, #24]
 8003ed2:	e029      	b.n	8003f28 <DrawChar+0x108>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003ed4:	8a3a      	ldrh	r2, [r7, #16]
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	1ad2      	subs	r2, r2, r3
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
 8003edc:	4413      	add	r3, r2
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	4013      	ands	r3, r2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00c      	beq.n	8003f0a <DrawChar+0xea>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	88fb      	ldrh	r3, [r7, #6]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	b298      	uxth	r0, r3
 8003efa:	4b14      	ldr	r3, [pc, #80]	; (8003f4c <DrawChar+0x12c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	88bb      	ldrh	r3, [r7, #4]
 8003f02:	4619      	mov	r1, r3
 8003f04:	f7ff fca2 	bl	800384c <BSP_LCD_DrawPixel>
 8003f08:	e00b      	b.n	8003f22 <DrawChar+0x102>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	88fb      	ldrh	r3, [r7, #6]
 8003f10:	4413      	add	r3, r2
 8003f12:	b298      	uxth	r0, r3
 8003f14:	4b0d      	ldr	r3, [pc, #52]	; (8003f4c <DrawChar+0x12c>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	88bb      	ldrh	r3, [r7, #4]
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	f7ff fc95 	bl	800384c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	3301      	adds	r3, #1
 8003f26:	61bb      	str	r3, [r7, #24]
 8003f28:	8a3b      	ldrh	r3, [r7, #16]
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d3d1      	bcc.n	8003ed4 <DrawChar+0xb4>
      } 
    }
    Ypos++;
 8003f30:	88bb      	ldrh	r3, [r7, #4]
 8003f32:	3301      	adds	r3, #1
 8003f34:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	61fb      	str	r3, [r7, #28]
 8003f3c:	8a7b      	ldrh	r3, [r7, #18]
 8003f3e:	69fa      	ldr	r2, [r7, #28]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d391      	bcc.n	8003e68 <DrawChar+0x48>
  }
}
 8003f44:	bf00      	nop
 8003f46:	3720      	adds	r7, #32
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	20004f74 	.word	0x20004f74

08003f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f54:	4b0e      	ldr	r3, [pc, #56]	; (8003f90 <HAL_Init+0x40>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a0d      	ldr	r2, [pc, #52]	; (8003f90 <HAL_Init+0x40>)
 8003f5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f60:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <HAL_Init+0x40>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a0a      	ldr	r2, [pc, #40]	; (8003f90 <HAL_Init+0x40>)
 8003f66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f6c:	4b08      	ldr	r3, [pc, #32]	; (8003f90 <HAL_Init+0x40>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a07      	ldr	r2, [pc, #28]	; (8003f90 <HAL_Init+0x40>)
 8003f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f78:	2003      	movs	r0, #3
 8003f7a:	f000 fb6c 	bl	8004656 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f7e:	2000      	movs	r0, #0
 8003f80:	f7fe fbc6 	bl	8002710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f84:	f7fd fe46 	bl	8001c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	40023c00 	.word	0x40023c00

08003f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f98:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <HAL_IncTick+0x20>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	4b06      	ldr	r3, [pc, #24]	; (8003fb8 <HAL_IncTick+0x24>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	4a04      	ldr	r2, [pc, #16]	; (8003fb8 <HAL_IncTick+0x24>)
 8003fa6:	6013      	str	r3, [r2, #0]
}
 8003fa8:	bf00      	nop
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	20000104 	.word	0x20000104
 8003fb8:	20004f80 	.word	0x20004f80

08003fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8003fc0:	4b03      	ldr	r3, [pc, #12]	; (8003fd0 <HAL_GetTick+0x14>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	20004f80 	.word	0x20004f80

08003fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fdc:	f7ff ffee 	bl	8003fbc <HAL_GetTick>
 8003fe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fec:	d005      	beq.n	8003ffa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fee:	4b09      	ldr	r3, [pc, #36]	; (8004014 <HAL_Delay+0x40>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ffa:	bf00      	nop
 8003ffc:	f7ff ffde 	bl	8003fbc <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	429a      	cmp	r2, r3
 800400a:	d8f7      	bhi.n	8003ffc <HAL_Delay+0x28>
  {
  }
}
 800400c:	bf00      	nop
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	20000104 	.word	0x20000104

08004018 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004020:	2300      	movs	r3, #0
 8004022:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e033      	b.n	8004096 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	2b00      	cmp	r3, #0
 8004034:	d109      	bne.n	800404a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7fd fe14 	bl	8001c64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	f003 0310 	and.w	r3, r3, #16
 8004052:	2b00      	cmp	r3, #0
 8004054:	d118      	bne.n	8004088 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800405e:	f023 0302 	bic.w	r3, r3, #2
 8004062:	f043 0202 	orr.w	r2, r3, #2
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f94a 	bl	8004304 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	f023 0303 	bic.w	r3, r3, #3
 800407e:	f043 0201 	orr.w	r2, r3, #1
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	641a      	str	r2, [r3, #64]	; 0x40
 8004086:	e001      	b.n	800408c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004094:	7bfb      	ldrb	r3, [r7, #15]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
	...

080040a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d101      	bne.n	80040bc <HAL_ADC_ConfigChannel+0x1c>
 80040b8:	2302      	movs	r3, #2
 80040ba:	e113      	b.n	80042e4 <HAL_ADC_ConfigChannel+0x244>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b09      	cmp	r3, #9
 80040ca:	d925      	bls.n	8004118 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68d9      	ldr	r1, [r3, #12]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	461a      	mov	r2, r3
 80040da:	4613      	mov	r3, r2
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	4413      	add	r3, r2
 80040e0:	3b1e      	subs	r3, #30
 80040e2:	2207      	movs	r2, #7
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	43da      	mvns	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	400a      	ands	r2, r1
 80040f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68d9      	ldr	r1, [r3, #12]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	b29b      	uxth	r3, r3
 8004102:	4618      	mov	r0, r3
 8004104:	4603      	mov	r3, r0
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	4403      	add	r3, r0
 800410a:	3b1e      	subs	r3, #30
 800410c:	409a      	lsls	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	60da      	str	r2, [r3, #12]
 8004116:	e022      	b.n	800415e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6919      	ldr	r1, [r3, #16]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	b29b      	uxth	r3, r3
 8004124:	461a      	mov	r2, r3
 8004126:	4613      	mov	r3, r2
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	4413      	add	r3, r2
 800412c:	2207      	movs	r2, #7
 800412e:	fa02 f303 	lsl.w	r3, r2, r3
 8004132:	43da      	mvns	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	400a      	ands	r2, r1
 800413a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6919      	ldr	r1, [r3, #16]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	689a      	ldr	r2, [r3, #8]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	b29b      	uxth	r3, r3
 800414c:	4618      	mov	r0, r3
 800414e:	4603      	mov	r3, r0
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	4403      	add	r3, r0
 8004154:	409a      	lsls	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2b06      	cmp	r3, #6
 8004164:	d824      	bhi.n	80041b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	4613      	mov	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	3b05      	subs	r3, #5
 8004178:	221f      	movs	r2, #31
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	43da      	mvns	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	400a      	ands	r2, r1
 8004186:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	b29b      	uxth	r3, r3
 8004194:	4618      	mov	r0, r3
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	4613      	mov	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4413      	add	r3, r2
 80041a0:	3b05      	subs	r3, #5
 80041a2:	fa00 f203 	lsl.w	r2, r0, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	635a      	str	r2, [r3, #52]	; 0x34
 80041ae:	e04c      	b.n	800424a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	2b0c      	cmp	r3, #12
 80041b6:	d824      	bhi.n	8004202 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	4613      	mov	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	3b23      	subs	r3, #35	; 0x23
 80041ca:	221f      	movs	r2, #31
 80041cc:	fa02 f303 	lsl.w	r3, r2, r3
 80041d0:	43da      	mvns	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	400a      	ands	r2, r1
 80041d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	4618      	mov	r0, r3
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	4613      	mov	r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	4413      	add	r3, r2
 80041f2:	3b23      	subs	r3, #35	; 0x23
 80041f4:	fa00 f203 	lsl.w	r2, r0, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	631a      	str	r2, [r3, #48]	; 0x30
 8004200:	e023      	b.n	800424a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	4613      	mov	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	3b41      	subs	r3, #65	; 0x41
 8004214:	221f      	movs	r2, #31
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	43da      	mvns	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	400a      	ands	r2, r1
 8004222:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	b29b      	uxth	r3, r3
 8004230:	4618      	mov	r0, r3
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	4613      	mov	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4413      	add	r3, r2
 800423c:	3b41      	subs	r3, #65	; 0x41
 800423e:	fa00 f203 	lsl.w	r2, r0, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800424a:	4b29      	ldr	r3, [pc, #164]	; (80042f0 <HAL_ADC_ConfigChannel+0x250>)
 800424c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a28      	ldr	r2, [pc, #160]	; (80042f4 <HAL_ADC_ConfigChannel+0x254>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d10f      	bne.n	8004278 <HAL_ADC_ConfigChannel+0x1d8>
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2b12      	cmp	r3, #18
 800425e:	d10b      	bne.n	8004278 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a1d      	ldr	r2, [pc, #116]	; (80042f4 <HAL_ADC_ConfigChannel+0x254>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d12b      	bne.n	80042da <HAL_ADC_ConfigChannel+0x23a>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a1c      	ldr	r2, [pc, #112]	; (80042f8 <HAL_ADC_ConfigChannel+0x258>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d003      	beq.n	8004294 <HAL_ADC_ConfigChannel+0x1f4>
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2b11      	cmp	r3, #17
 8004292:	d122      	bne.n	80042da <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a11      	ldr	r2, [pc, #68]	; (80042f8 <HAL_ADC_ConfigChannel+0x258>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d111      	bne.n	80042da <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80042b6:	4b11      	ldr	r3, [pc, #68]	; (80042fc <HAL_ADC_ConfigChannel+0x25c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a11      	ldr	r2, [pc, #68]	; (8004300 <HAL_ADC_ConfigChannel+0x260>)
 80042bc:	fba2 2303 	umull	r2, r3, r2, r3
 80042c0:	0c9a      	lsrs	r2, r3, #18
 80042c2:	4613      	mov	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4413      	add	r3, r2
 80042c8:	005b      	lsls	r3, r3, #1
 80042ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80042cc:	e002      	b.n	80042d4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	3b01      	subs	r3, #1
 80042d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1f9      	bne.n	80042ce <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3714      	adds	r7, #20
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	40012300 	.word	0x40012300
 80042f4:	40012000 	.word	0x40012000
 80042f8:	10000012 	.word	0x10000012
 80042fc:	200000a4 	.word	0x200000a4
 8004300:	431bde83 	.word	0x431bde83

08004304 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800430c:	4b79      	ldr	r3, [pc, #484]	; (80044f4 <ADC_Init+0x1f0>)
 800430e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	431a      	orrs	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004338:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6859      	ldr	r1, [r3, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	021a      	lsls	r2, r3, #8
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800435c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6859      	ldr	r1, [r3, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	430a      	orrs	r2, r1
 800436e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689a      	ldr	r2, [r3, #8]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800437e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	6899      	ldr	r1, [r3, #8]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004396:	4a58      	ldr	r2, [pc, #352]	; (80044f8 <ADC_Init+0x1f4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d022      	beq.n	80043e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689a      	ldr	r2, [r3, #8]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6899      	ldr	r1, [r3, #8]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6899      	ldr	r1, [r3, #8]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	609a      	str	r2, [r3, #8]
 80043e0:	e00f      	b.n	8004402 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689a      	ldr	r2, [r3, #8]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004400:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 0202 	bic.w	r2, r2, #2
 8004410:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6899      	ldr	r1, [r3, #8]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	7e1b      	ldrb	r3, [r3, #24]
 800441c:	005a      	lsls	r2, r3, #1
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 3020 	ldrb.w	r3, [r3, #32]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d01b      	beq.n	8004468 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800443e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800444e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6859      	ldr	r1, [r3, #4]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445a:	3b01      	subs	r3, #1
 800445c:	035a      	lsls	r2, r3, #13
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	605a      	str	r2, [r3, #4]
 8004466:	e007      	b.n	8004478 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004476:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004486:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	3b01      	subs	r3, #1
 8004494:	051a      	lsls	r2, r3, #20
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	689a      	ldr	r2, [r3, #8]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80044ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6899      	ldr	r1, [r3, #8]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80044ba:	025a      	lsls	r2, r3, #9
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689a      	ldr	r2, [r3, #8]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6899      	ldr	r1, [r3, #8]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	029a      	lsls	r2, r3, #10
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	430a      	orrs	r2, r1
 80044e6:	609a      	str	r2, [r3, #8]
}
 80044e8:	bf00      	nop
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	40012300 	.word	0x40012300
 80044f8:	0f000001 	.word	0x0f000001

080044fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800450c:	4b0c      	ldr	r3, [pc, #48]	; (8004540 <__NVIC_SetPriorityGrouping+0x44>)
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004518:	4013      	ands	r3, r2
 800451a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004524:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800452c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800452e:	4a04      	ldr	r2, [pc, #16]	; (8004540 <__NVIC_SetPriorityGrouping+0x44>)
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	60d3      	str	r3, [r2, #12]
}
 8004534:	bf00      	nop
 8004536:	3714      	adds	r7, #20
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	e000ed00 	.word	0xe000ed00

08004544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004548:	4b04      	ldr	r3, [pc, #16]	; (800455c <__NVIC_GetPriorityGrouping+0x18>)
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	0a1b      	lsrs	r3, r3, #8
 800454e:	f003 0307 	and.w	r3, r3, #7
}
 8004552:	4618      	mov	r0, r3
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	e000ed00 	.word	0xe000ed00

08004560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	4603      	mov	r3, r0
 8004568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800456a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800456e:	2b00      	cmp	r3, #0
 8004570:	db0b      	blt.n	800458a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004572:	79fb      	ldrb	r3, [r7, #7]
 8004574:	f003 021f 	and.w	r2, r3, #31
 8004578:	4907      	ldr	r1, [pc, #28]	; (8004598 <__NVIC_EnableIRQ+0x38>)
 800457a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457e:	095b      	lsrs	r3, r3, #5
 8004580:	2001      	movs	r0, #1
 8004582:	fa00 f202 	lsl.w	r2, r0, r2
 8004586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800458a:	bf00      	nop
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	e000e100 	.word	0xe000e100

0800459c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	4603      	mov	r3, r0
 80045a4:	6039      	str	r1, [r7, #0]
 80045a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	db0a      	blt.n	80045c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	490c      	ldr	r1, [pc, #48]	; (80045e8 <__NVIC_SetPriority+0x4c>)
 80045b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ba:	0112      	lsls	r2, r2, #4
 80045bc:	b2d2      	uxtb	r2, r2
 80045be:	440b      	add	r3, r1
 80045c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045c4:	e00a      	b.n	80045dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	4908      	ldr	r1, [pc, #32]	; (80045ec <__NVIC_SetPriority+0x50>)
 80045cc:	79fb      	ldrb	r3, [r7, #7]
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	3b04      	subs	r3, #4
 80045d4:	0112      	lsls	r2, r2, #4
 80045d6:	b2d2      	uxtb	r2, r2
 80045d8:	440b      	add	r3, r1
 80045da:	761a      	strb	r2, [r3, #24]
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr
 80045e8:	e000e100 	.word	0xe000e100
 80045ec:	e000ed00 	.word	0xe000ed00

080045f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b089      	sub	sp, #36	; 0x24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f003 0307 	and.w	r3, r3, #7
 8004602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	f1c3 0307 	rsb	r3, r3, #7
 800460a:	2b04      	cmp	r3, #4
 800460c:	bf28      	it	cs
 800460e:	2304      	movcs	r3, #4
 8004610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	3304      	adds	r3, #4
 8004616:	2b06      	cmp	r3, #6
 8004618:	d902      	bls.n	8004620 <NVIC_EncodePriority+0x30>
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	3b03      	subs	r3, #3
 800461e:	e000      	b.n	8004622 <NVIC_EncodePriority+0x32>
 8004620:	2300      	movs	r3, #0
 8004622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004624:	f04f 32ff 	mov.w	r2, #4294967295
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	fa02 f303 	lsl.w	r3, r2, r3
 800462e:	43da      	mvns	r2, r3
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	401a      	ands	r2, r3
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004638:	f04f 31ff 	mov.w	r1, #4294967295
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	fa01 f303 	lsl.w	r3, r1, r3
 8004642:	43d9      	mvns	r1, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004648:	4313      	orrs	r3, r2
         );
}
 800464a:	4618      	mov	r0, r3
 800464c:	3724      	adds	r7, #36	; 0x24
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b082      	sub	sp, #8
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7ff ff4c 	bl	80044fc <__NVIC_SetPriorityGrouping>
}
 8004664:	bf00      	nop
 8004666:	3708      	adds	r7, #8
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	4603      	mov	r3, r0
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
 8004678:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800467a:	2300      	movs	r3, #0
 800467c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800467e:	f7ff ff61 	bl	8004544 <__NVIC_GetPriorityGrouping>
 8004682:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	68b9      	ldr	r1, [r7, #8]
 8004688:	6978      	ldr	r0, [r7, #20]
 800468a:	f7ff ffb1 	bl	80045f0 <NVIC_EncodePriority>
 800468e:	4602      	mov	r2, r0
 8004690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004694:	4611      	mov	r1, r2
 8004696:	4618      	mov	r0, r3
 8004698:	f7ff ff80 	bl	800459c <__NVIC_SetPriority>
}
 800469c:	bf00      	nop
 800469e:	3718      	adds	r7, #24
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	4603      	mov	r3, r0
 80046ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff ff54 	bl	8004560 <__NVIC_EnableIRQ>
}
 80046b8:	bf00      	nop
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e014      	b.n	80046fc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	791b      	ldrb	r3, [r3, #4]
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d105      	bne.n	80046e8 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7fd fb3a 	bl	8001d5c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2202      	movs	r2, #2
 80046ec:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3708      	adds	r7, #8
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004712:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800471a:	d118      	bne.n	800474e <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2204      	movs	r2, #4
 8004720:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	f043 0201 	orr.w	r2, r3, #1
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004736:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004746:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f825 	bl	8004798 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004754:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004758:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800475c:	d118      	bne.n	8004790 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2204      	movs	r2, #4
 8004762:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	f043 0202 	orr.w	r2, r3, #2
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004778:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004788:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f85b 	bl	8004846 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8004790:	bf00      	nop
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80047b8:	2300      	movs	r3, #0
 80047ba:	617b      	str	r3, [r7, #20]
 80047bc:	2300      	movs	r3, #0
 80047be:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	795b      	ldrb	r3, [r3, #5]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d101      	bne.n	80047cc <HAL_DAC_ConfigChannel+0x20>
 80047c8:	2302      	movs	r3, #2
 80047ca:	e036      	b.n	800483a <HAL_DAC_ConfigChannel+0x8e>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2201      	movs	r2, #1
 80047d0:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2202      	movs	r2, #2
 80047d6:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80047e0:	f640 72fe 	movw	r2, #4094	; 0xffe
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ea:	43db      	mvns	r3, r3
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	4013      	ands	r3, r2
 80047f0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	fa02 f303 	lsl.w	r3, r2, r3
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	4313      	orrs	r3, r2
 800480a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6819      	ldr	r1, [r3, #0]
 800481a:	22c0      	movs	r2, #192	; 0xc0
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	fa02 f303 	lsl.w	r3, r2, r3
 8004822:	43da      	mvns	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	400a      	ands	r2, r1
 800482a:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2201      	movs	r2, #1
 8004830:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	371c      	adds	r7, #28
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004846:	b480      	push	{r7}
 8004848:	b083      	sub	sp, #12
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
	...

0800485c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e0cf      	b.n	8004a0e <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a69      	ldr	r2, [pc, #420]	; (8004a18 <HAL_DFSDM_ChannelInit+0x1bc>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d00e      	beq.n	8004896 <HAL_DFSDM_ChannelInit+0x3a>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a67      	ldr	r2, [pc, #412]	; (8004a1c <HAL_DFSDM_ChannelInit+0x1c0>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d009      	beq.n	8004896 <HAL_DFSDM_ChannelInit+0x3a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a66      	ldr	r2, [pc, #408]	; (8004a20 <HAL_DFSDM_ChannelInit+0x1c4>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d004      	beq.n	8004896 <HAL_DFSDM_ChannelInit+0x3a>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a64      	ldr	r2, [pc, #400]	; (8004a24 <HAL_DFSDM_ChannelInit+0x1c8>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d106      	bne.n	80048a4 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8004896:	4b64      	ldr	r3, [pc, #400]	; (8004a28 <HAL_DFSDM_ChannelInit+0x1cc>)
 8004898:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 800489a:	4b64      	ldr	r3, [pc, #400]	; (8004a2c <HAL_DFSDM_ChannelInit+0x1d0>)
 800489c:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 800489e:	4b5e      	ldr	r3, [pc, #376]	; (8004a18 <HAL_DFSDM_ChannelInit+0x1bc>)
 80048a0:	60fb      	str	r3, [r7, #12]
 80048a2:	e005      	b.n	80048b0 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 80048a4:	4b62      	ldr	r3, [pc, #392]	; (8004a30 <HAL_DFSDM_ChannelInit+0x1d4>)
 80048a6:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 80048a8:	4b62      	ldr	r3, [pc, #392]	; (8004a34 <HAL_DFSDM_ChannelInit+0x1d8>)
 80048aa:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 80048ac:	4b62      	ldr	r3, [pc, #392]	; (8004a38 <HAL_DFSDM_ChannelInit+0x1dc>)
 80048ae:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f000 f8c1 	bl	8004a3c <DFSDM_GetChannelFromInstance>
 80048ba:	4603      	mov	r3, r0
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	4413      	add	r3, r2
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e0a0      	b.n	8004a0e <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f7fd fa91 	bl	8001df4 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	1c5a      	adds	r2, r3, #1
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d125      	bne.n	8004930 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	431a      	orrs	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	791b      	ldrb	r3, [r3, #4]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d108      	bne.n	8004924 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	3b01      	subs	r3, #1
 800491c:	041b      	lsls	r3, r3, #16
 800491e:	431a      	orrs	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800493e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6819      	ldr	r1, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800494e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8004954:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	430a      	orrs	r2, r1
 800495c:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f022 020f 	bic.w	r2, r2, #15
 800496c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6819      	ldr	r1, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 800497c:	431a      	orrs	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8004994:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6899      	ldr	r1, [r3, #8]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a4:	3b01      	subs	r3, #1
 80049a6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80049a8:	431a      	orrs	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f002 0207 	and.w	r2, r2, #7
 80049c0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6859      	ldr	r1, [r3, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049cc:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80049d4:	431a      	orrs	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80049ec:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f000 f81e 	bl	8004a3c <DFSDM_GetChannelFromInstance>
 8004a00:	4603      	mov	r3, r0
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	4413      	add	r3, r2
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3718      	adds	r7, #24
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	40016000 	.word	0x40016000
 8004a1c:	40016020 	.word	0x40016020
 8004a20:	40016040 	.word	0x40016040
 8004a24:	40016060 	.word	0x40016060
 8004a28:	200001e0 	.word	0x200001e0
 8004a2c:	200001e4 	.word	0x200001e4
 8004a30:	200001f4 	.word	0x200001f4
 8004a34:	200001f8 	.word	0x200001f8
 8004a38:	40016400 	.word	0x40016400

08004a3c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a24      	ldr	r2, [pc, #144]	; (8004ad8 <DFSDM_GetChannelFromInstance+0x9c>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d003      	beq.n	8004a54 <DFSDM_GetChannelFromInstance+0x18>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a23      	ldr	r2, [pc, #140]	; (8004adc <DFSDM_GetChannelFromInstance+0xa0>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d102      	bne.n	8004a5a <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	60fb      	str	r3, [r7, #12]
 8004a58:	e037      	b.n	8004aca <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a20      	ldr	r2, [pc, #128]	; (8004ae0 <DFSDM_GetChannelFromInstance+0xa4>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d003      	beq.n	8004a6a <DFSDM_GetChannelFromInstance+0x2e>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a1f      	ldr	r2, [pc, #124]	; (8004ae4 <DFSDM_GetChannelFromInstance+0xa8>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d102      	bne.n	8004a70 <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	60fb      	str	r3, [r7, #12]
 8004a6e:	e02c      	b.n	8004aca <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a1d      	ldr	r2, [pc, #116]	; (8004ae8 <DFSDM_GetChannelFromInstance+0xac>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d003      	beq.n	8004a80 <DFSDM_GetChannelFromInstance+0x44>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a1c      	ldr	r2, [pc, #112]	; (8004aec <DFSDM_GetChannelFromInstance+0xb0>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d102      	bne.n	8004a86 <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 8004a80:	2302      	movs	r3, #2
 8004a82:	60fb      	str	r3, [r7, #12]
 8004a84:	e021      	b.n	8004aca <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a19      	ldr	r2, [pc, #100]	; (8004af0 <DFSDM_GetChannelFromInstance+0xb4>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d003      	beq.n	8004a96 <DFSDM_GetChannelFromInstance+0x5a>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a18      	ldr	r2, [pc, #96]	; (8004af4 <DFSDM_GetChannelFromInstance+0xb8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d102      	bne.n	8004a9c <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 8004a96:	2303      	movs	r3, #3
 8004a98:	60fb      	str	r3, [r7, #12]
 8004a9a:	e016      	b.n	8004aca <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a16      	ldr	r2, [pc, #88]	; (8004af8 <DFSDM_GetChannelFromInstance+0xbc>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d102      	bne.n	8004aaa <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8004aa4:	2304      	movs	r3, #4
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	e00f      	b.n	8004aca <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a13      	ldr	r2, [pc, #76]	; (8004afc <DFSDM_GetChannelFromInstance+0xc0>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d102      	bne.n	8004ab8 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 8004ab2:	2305      	movs	r3, #5
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	e008      	b.n	8004aca <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a11      	ldr	r2, [pc, #68]	; (8004b00 <DFSDM_GetChannelFromInstance+0xc4>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d102      	bne.n	8004ac6 <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 8004ac0:	2306      	movs	r3, #6
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	e001      	b.n	8004aca <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 8004ac6:	2307      	movs	r3, #7
 8004ac8:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 8004aca:	68fb      	ldr	r3, [r7, #12]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	40016000 	.word	0x40016000
 8004adc:	40016400 	.word	0x40016400
 8004ae0:	40016020 	.word	0x40016020
 8004ae4:	40016420 	.word	0x40016420
 8004ae8:	40016040 	.word	0x40016040
 8004aec:	40016440 	.word	0x40016440
 8004af0:	40016060 	.word	0x40016060
 8004af4:	40016460 	.word	0x40016460
 8004af8:	40016480 	.word	0x40016480
 8004afc:	400164a0 	.word	0x400164a0
 8004b00:	400164c0 	.word	0x400164c0

08004b04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d004      	beq.n	8004b22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2280      	movs	r2, #128	; 0x80
 8004b1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e00c      	b.n	8004b3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2205      	movs	r2, #5
 8004b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 0201 	bic.w	r2, r2, #1
 8004b38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e081      	b.n	8004c5e <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d106      	bne.n	8004b74 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fd fa52 	bl	8002018 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2224      	movs	r2, #36	; 0x24
 8004b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0201 	bic.w	r2, r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685a      	ldr	r2, [r3, #4]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b98:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689a      	ldr	r2, [r3, #8]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ba8:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d107      	bne.n	8004bc2 <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689a      	ldr	r2, [r3, #8]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bbe:	609a      	str	r2, [r3, #8]
 8004bc0:	e006      	b.n	8004bd0 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	689a      	ldr	r2, [r3, #8]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004bce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d104      	bne.n	8004be2 <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004be0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6812      	ldr	r2, [r2, #0]
 8004bec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004bf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bf4:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68da      	ldr	r2, [r3, #12]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c04:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	691a      	ldr	r2, [r3, #16]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	ea42 0103 	orr.w	r1, r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	021a      	lsls	r2, r3, #8
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	69d9      	ldr	r1, [r3, #28]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a1a      	ldr	r2, [r3, #32]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0201 	orr.w	r2, r2, #1
 8004c3e:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2220      	movs	r2, #32
 8004c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3708      	adds	r7, #8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8004c66:	b480      	push	{r7}
 8004c68:	b083      	sub	sp, #12
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
 8004c6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b20      	cmp	r3, #32
 8004c7a:	d138      	bne.n	8004cee <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d101      	bne.n	8004c8a <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8004c86:	2302      	movs	r3, #2
 8004c88:	e032      	b.n	8004cf0 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2224      	movs	r2, #36	; 0x24
 8004c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 0201 	bic.w	r2, r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004cb8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6819      	ldr	r1, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f042 0201 	orr.w	r2, r2, #1
 8004cd8:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2220      	movs	r2, #32
 8004cde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004cea:	2300      	movs	r3, #0
 8004cec:	e000      	b.n	8004cf0 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004cee:	2302      	movs	r3, #2
  }
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b089      	sub	sp, #36	; 0x24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d12:	2300      	movs	r3, #0
 8004d14:	61fb      	str	r3, [r7, #28]
 8004d16:	e165      	b.n	8004fe4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d18:	2201      	movs	r2, #1
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	f040 8154 	bne.w	8004fde <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d00b      	beq.n	8004d56 <HAL_GPIO_Init+0x5a>
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d007      	beq.n	8004d56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d4a:	2b11      	cmp	r3, #17
 8004d4c:	d003      	beq.n	8004d56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	2b12      	cmp	r3, #18
 8004d54:	d130      	bne.n	8004db8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	005b      	lsls	r3, r3, #1
 8004d60:	2203      	movs	r2, #3
 8004d62:	fa02 f303 	lsl.w	r3, r2, r3
 8004d66:	43db      	mvns	r3, r3
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	68da      	ldr	r2, [r3, #12]
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	005b      	lsls	r3, r3, #1
 8004d76:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	43db      	mvns	r3, r3
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	4013      	ands	r3, r2
 8004d9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	091b      	lsrs	r3, r3, #4
 8004da2:	f003 0201 	and.w	r2, r3, #1
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	2203      	movs	r2, #3
 8004dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc8:	43db      	mvns	r3, r3
 8004dca:	69ba      	ldr	r2, [r7, #24]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d003      	beq.n	8004df8 <HAL_GPIO_Init+0xfc>
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	2b12      	cmp	r3, #18
 8004df6:	d123      	bne.n	8004e40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	08da      	lsrs	r2, r3, #3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	3208      	adds	r2, #8
 8004e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	220f      	movs	r2, #15
 8004e10:	fa02 f303 	lsl.w	r3, r2, r3
 8004e14:	43db      	mvns	r3, r3
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	4013      	ands	r3, r2
 8004e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	691a      	ldr	r2, [r3, #16]
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	f003 0307 	and.w	r3, r3, #7
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	08da      	lsrs	r2, r3, #3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	3208      	adds	r2, #8
 8004e3a:	69b9      	ldr	r1, [r7, #24]
 8004e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	2203      	movs	r2, #3
 8004e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e50:	43db      	mvns	r3, r3
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	4013      	ands	r3, r2
 8004e56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f003 0203 	and.w	r2, r3, #3
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	005b      	lsls	r3, r3, #1
 8004e64:	fa02 f303 	lsl.w	r3, r2, r3
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 80ae 	beq.w	8004fde <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e82:	2300      	movs	r3, #0
 8004e84:	60fb      	str	r3, [r7, #12]
 8004e86:	4b5c      	ldr	r3, [pc, #368]	; (8004ff8 <HAL_GPIO_Init+0x2fc>)
 8004e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8a:	4a5b      	ldr	r2, [pc, #364]	; (8004ff8 <HAL_GPIO_Init+0x2fc>)
 8004e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e90:	6453      	str	r3, [r2, #68]	; 0x44
 8004e92:	4b59      	ldr	r3, [pc, #356]	; (8004ff8 <HAL_GPIO_Init+0x2fc>)
 8004e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e9e:	4a57      	ldr	r2, [pc, #348]	; (8004ffc <HAL_GPIO_Init+0x300>)
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	089b      	lsrs	r3, r3, #2
 8004ea4:	3302      	adds	r3, #2
 8004ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	f003 0303 	and.w	r3, r3, #3
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	220f      	movs	r2, #15
 8004eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eba:	43db      	mvns	r3, r3
 8004ebc:	69ba      	ldr	r2, [r7, #24]
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a4e      	ldr	r2, [pc, #312]	; (8005000 <HAL_GPIO_Init+0x304>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d025      	beq.n	8004f16 <HAL_GPIO_Init+0x21a>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a4d      	ldr	r2, [pc, #308]	; (8005004 <HAL_GPIO_Init+0x308>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d01f      	beq.n	8004f12 <HAL_GPIO_Init+0x216>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a4c      	ldr	r2, [pc, #304]	; (8005008 <HAL_GPIO_Init+0x30c>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d019      	beq.n	8004f0e <HAL_GPIO_Init+0x212>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a4b      	ldr	r2, [pc, #300]	; (800500c <HAL_GPIO_Init+0x310>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d013      	beq.n	8004f0a <HAL_GPIO_Init+0x20e>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a4a      	ldr	r2, [pc, #296]	; (8005010 <HAL_GPIO_Init+0x314>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d00d      	beq.n	8004f06 <HAL_GPIO_Init+0x20a>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a49      	ldr	r2, [pc, #292]	; (8005014 <HAL_GPIO_Init+0x318>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d007      	beq.n	8004f02 <HAL_GPIO_Init+0x206>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a48      	ldr	r2, [pc, #288]	; (8005018 <HAL_GPIO_Init+0x31c>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d101      	bne.n	8004efe <HAL_GPIO_Init+0x202>
 8004efa:	2306      	movs	r3, #6
 8004efc:	e00c      	b.n	8004f18 <HAL_GPIO_Init+0x21c>
 8004efe:	2307      	movs	r3, #7
 8004f00:	e00a      	b.n	8004f18 <HAL_GPIO_Init+0x21c>
 8004f02:	2305      	movs	r3, #5
 8004f04:	e008      	b.n	8004f18 <HAL_GPIO_Init+0x21c>
 8004f06:	2304      	movs	r3, #4
 8004f08:	e006      	b.n	8004f18 <HAL_GPIO_Init+0x21c>
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e004      	b.n	8004f18 <HAL_GPIO_Init+0x21c>
 8004f0e:	2302      	movs	r3, #2
 8004f10:	e002      	b.n	8004f18 <HAL_GPIO_Init+0x21c>
 8004f12:	2301      	movs	r3, #1
 8004f14:	e000      	b.n	8004f18 <HAL_GPIO_Init+0x21c>
 8004f16:	2300      	movs	r3, #0
 8004f18:	69fa      	ldr	r2, [r7, #28]
 8004f1a:	f002 0203 	and.w	r2, r2, #3
 8004f1e:	0092      	lsls	r2, r2, #2
 8004f20:	4093      	lsls	r3, r2
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f28:	4934      	ldr	r1, [pc, #208]	; (8004ffc <HAL_GPIO_Init+0x300>)
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	089b      	lsrs	r3, r3, #2
 8004f2e:	3302      	adds	r3, #2
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f36:	4b39      	ldr	r3, [pc, #228]	; (800501c <HAL_GPIO_Init+0x320>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	43db      	mvns	r3, r3
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	4013      	ands	r3, r2
 8004f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f5a:	4a30      	ldr	r2, [pc, #192]	; (800501c <HAL_GPIO_Init+0x320>)
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004f60:	4b2e      	ldr	r3, [pc, #184]	; (800501c <HAL_GPIO_Init+0x320>)
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	43db      	mvns	r3, r3
 8004f6a:	69ba      	ldr	r2, [r7, #24]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f84:	4a25      	ldr	r2, [pc, #148]	; (800501c <HAL_GPIO_Init+0x320>)
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f8a:	4b24      	ldr	r3, [pc, #144]	; (800501c <HAL_GPIO_Init+0x320>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	43db      	mvns	r3, r3
 8004f94:	69ba      	ldr	r2, [r7, #24]
 8004f96:	4013      	ands	r3, r2
 8004f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004fae:	4a1b      	ldr	r2, [pc, #108]	; (800501c <HAL_GPIO_Init+0x320>)
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004fb4:	4b19      	ldr	r3, [pc, #100]	; (800501c <HAL_GPIO_Init+0x320>)
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	43db      	mvns	r3, r3
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d003      	beq.n	8004fd8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004fd8:	4a10      	ldr	r2, [pc, #64]	; (800501c <HAL_GPIO_Init+0x320>)
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	61fb      	str	r3, [r7, #28]
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	2b0f      	cmp	r3, #15
 8004fe8:	f67f ae96 	bls.w	8004d18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004fec:	bf00      	nop
 8004fee:	3724      	adds	r7, #36	; 0x24
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	40023800 	.word	0x40023800
 8004ffc:	40013800 	.word	0x40013800
 8005000:	40020000 	.word	0x40020000
 8005004:	40020400 	.word	0x40020400
 8005008:	40020800 	.word	0x40020800
 800500c:	40020c00 	.word	0x40020c00
 8005010:	40021000 	.word	0x40021000
 8005014:	40021400 	.word	0x40021400
 8005018:	40021800 	.word	0x40021800
 800501c:	40013c00 	.word	0x40013c00

08005020 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	460b      	mov	r3, r1
 800502a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691a      	ldr	r2, [r3, #16]
 8005030:	887b      	ldrh	r3, [r7, #2]
 8005032:	4013      	ands	r3, r2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d002      	beq.n	800503e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005038:	2301      	movs	r3, #1
 800503a:	73fb      	strb	r3, [r7, #15]
 800503c:	e001      	b.n	8005042 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800503e:	2300      	movs	r3, #0
 8005040:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005042:	7bfb      	ldrb	r3, [r7, #15]
}
 8005044:	4618      	mov	r0, r3
 8005046:	3714      	adds	r7, #20
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	460b      	mov	r3, r1
 800505a:	807b      	strh	r3, [r7, #2]
 800505c:	4613      	mov	r3, r2
 800505e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005060:	787b      	ldrb	r3, [r7, #1]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005066:	887a      	ldrh	r2, [r7, #2]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800506c:	e003      	b.n	8005076 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800506e:	887b      	ldrh	r3, [r7, #2]
 8005070:	041a      	lsls	r2, r3, #16
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	619a      	str	r2, [r3, #24]
}
 8005076:	bf00      	nop
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
	...

08005084 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	4603      	mov	r3, r0
 800508c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800508e:	4b08      	ldr	r3, [pc, #32]	; (80050b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005090:	695a      	ldr	r2, [r3, #20]
 8005092:	88fb      	ldrh	r3, [r7, #6]
 8005094:	4013      	ands	r3, r2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d006      	beq.n	80050a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800509a:	4a05      	ldr	r2, [pc, #20]	; (80050b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800509c:	88fb      	ldrh	r3, [r7, #6]
 800509e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050a0:	88fb      	ldrh	r3, [r7, #6]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 f806 	bl	80050b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80050a8:	bf00      	nop
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	40013c00 	.word	0x40013c00

080050b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	4603      	mov	r3, r0
 80050bc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80050be:	bf00      	nop
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80050ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050cc:	b08f      	sub	sp, #60	; 0x3c
 80050ce:	af0a      	add	r7, sp, #40	; 0x28
 80050d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e054      	b.n	8005186 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d106      	bne.n	80050fc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f00c fbb4 	bl	8011864 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2203      	movs	r2, #3
 8005100:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510c:	2b00      	cmp	r3, #0
 800510e:	d102      	bne.n	8005116 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4618      	mov	r0, r3
 800511c:	f005 ff92 	bl	800b044 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	603b      	str	r3, [r7, #0]
 8005126:	687e      	ldr	r6, [r7, #4]
 8005128:	466d      	mov	r5, sp
 800512a:	f106 0410 	add.w	r4, r6, #16
 800512e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005130:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005132:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005134:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005136:	e894 0003 	ldmia.w	r4, {r0, r1}
 800513a:	e885 0003 	stmia.w	r5, {r0, r1}
 800513e:	1d33      	adds	r3, r6, #4
 8005140:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005142:	6838      	ldr	r0, [r7, #0]
 8005144:	f005 ff0c 	bl	800af60 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2101      	movs	r1, #1
 800514e:	4618      	mov	r0, r3
 8005150:	f005 ff89 	bl	800b066 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	603b      	str	r3, [r7, #0]
 800515a:	687e      	ldr	r6, [r7, #4]
 800515c:	466d      	mov	r5, sp
 800515e:	f106 0410 	add.w	r4, r6, #16
 8005162:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005164:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005166:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005168:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800516a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800516e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005172:	1d33      	adds	r3, r6, #4
 8005174:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005176:	6838      	ldr	r0, [r7, #0]
 8005178:	f006 f89c 	bl	800b2b4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800518e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800518e:	b590      	push	{r4, r7, lr}
 8005190:	b089      	sub	sp, #36	; 0x24
 8005192:	af04      	add	r7, sp, #16
 8005194:	6078      	str	r0, [r7, #4]
 8005196:	4608      	mov	r0, r1
 8005198:	4611      	mov	r1, r2
 800519a:	461a      	mov	r2, r3
 800519c:	4603      	mov	r3, r0
 800519e:	70fb      	strb	r3, [r7, #3]
 80051a0:	460b      	mov	r3, r1
 80051a2:	70bb      	strb	r3, [r7, #2]
 80051a4:	4613      	mov	r3, r2
 80051a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d101      	bne.n	80051b6 <HAL_HCD_HC_Init+0x28>
 80051b2:	2302      	movs	r3, #2
 80051b4:	e07f      	b.n	80052b6 <HAL_HCD_HC_Init+0x128>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80051be:	78fa      	ldrb	r2, [r7, #3]
 80051c0:	6879      	ldr	r1, [r7, #4]
 80051c2:	4613      	mov	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4413      	add	r3, r2
 80051c8:	00db      	lsls	r3, r3, #3
 80051ca:	440b      	add	r3, r1
 80051cc:	333d      	adds	r3, #61	; 0x3d
 80051ce:	2200      	movs	r2, #0
 80051d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80051d2:	78fa      	ldrb	r2, [r7, #3]
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	4613      	mov	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4413      	add	r3, r2
 80051dc:	00db      	lsls	r3, r3, #3
 80051de:	440b      	add	r3, r1
 80051e0:	3338      	adds	r3, #56	; 0x38
 80051e2:	787a      	ldrb	r2, [r7, #1]
 80051e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80051e6:	78fa      	ldrb	r2, [r7, #3]
 80051e8:	6879      	ldr	r1, [r7, #4]
 80051ea:	4613      	mov	r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4413      	add	r3, r2
 80051f0:	00db      	lsls	r3, r3, #3
 80051f2:	440b      	add	r3, r1
 80051f4:	3340      	adds	r3, #64	; 0x40
 80051f6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80051f8:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80051fa:	78fa      	ldrb	r2, [r7, #3]
 80051fc:	6879      	ldr	r1, [r7, #4]
 80051fe:	4613      	mov	r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	00db      	lsls	r3, r3, #3
 8005206:	440b      	add	r3, r1
 8005208:	3339      	adds	r3, #57	; 0x39
 800520a:	78fa      	ldrb	r2, [r7, #3]
 800520c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800520e:	78fa      	ldrb	r2, [r7, #3]
 8005210:	6879      	ldr	r1, [r7, #4]
 8005212:	4613      	mov	r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	4413      	add	r3, r2
 8005218:	00db      	lsls	r3, r3, #3
 800521a:	440b      	add	r3, r1
 800521c:	333f      	adds	r3, #63	; 0x3f
 800521e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005222:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005224:	78fa      	ldrb	r2, [r7, #3]
 8005226:	78bb      	ldrb	r3, [r7, #2]
 8005228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800522c:	b2d8      	uxtb	r0, r3
 800522e:	6879      	ldr	r1, [r7, #4]
 8005230:	4613      	mov	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	440b      	add	r3, r1
 800523a:	333a      	adds	r3, #58	; 0x3a
 800523c:	4602      	mov	r2, r0
 800523e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8005240:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005244:	2b00      	cmp	r3, #0
 8005246:	da0a      	bge.n	800525e <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005248:	78fa      	ldrb	r2, [r7, #3]
 800524a:	6879      	ldr	r1, [r7, #4]
 800524c:	4613      	mov	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4413      	add	r3, r2
 8005252:	00db      	lsls	r3, r3, #3
 8005254:	440b      	add	r3, r1
 8005256:	333b      	adds	r3, #59	; 0x3b
 8005258:	2201      	movs	r2, #1
 800525a:	701a      	strb	r2, [r3, #0]
 800525c:	e009      	b.n	8005272 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800525e:	78fa      	ldrb	r2, [r7, #3]
 8005260:	6879      	ldr	r1, [r7, #4]
 8005262:	4613      	mov	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4413      	add	r3, r2
 8005268:	00db      	lsls	r3, r3, #3
 800526a:	440b      	add	r3, r1
 800526c:	333b      	adds	r3, #59	; 0x3b
 800526e:	2200      	movs	r2, #0
 8005270:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8005272:	78fa      	ldrb	r2, [r7, #3]
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	4613      	mov	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	440b      	add	r3, r1
 8005280:	333c      	adds	r3, #60	; 0x3c
 8005282:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005286:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6818      	ldr	r0, [r3, #0]
 800528c:	787c      	ldrb	r4, [r7, #1]
 800528e:	78ba      	ldrb	r2, [r7, #2]
 8005290:	78f9      	ldrb	r1, [r7, #3]
 8005292:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005294:	9302      	str	r3, [sp, #8]
 8005296:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800529a:	9301      	str	r3, [sp, #4]
 800529c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	4623      	mov	r3, r4
 80052a4:	f006 f982 	bl	800b5ac <USB_HC_Init>
 80052a8:	4603      	mov	r3, r0
 80052aa:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80052b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd90      	pop	{r4, r7, pc}

080052be <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b084      	sub	sp, #16
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
 80052c6:	460b      	mov	r3, r1
 80052c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80052ca:	2300      	movs	r3, #0
 80052cc:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d101      	bne.n	80052dc <HAL_HCD_HC_Halt+0x1e>
 80052d8:	2302      	movs	r3, #2
 80052da:	e00f      	b.n	80052fc <HAL_HCD_HC_Halt+0x3e>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	78fa      	ldrb	r2, [r7, #3]
 80052ea:	4611      	mov	r1, r2
 80052ec:	4618      	mov	r0, r3
 80052ee:	f006 fbbe 	bl	800ba6e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80052fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	4608      	mov	r0, r1
 800530e:	4611      	mov	r1, r2
 8005310:	461a      	mov	r2, r3
 8005312:	4603      	mov	r3, r0
 8005314:	70fb      	strb	r3, [r7, #3]
 8005316:	460b      	mov	r3, r1
 8005318:	70bb      	strb	r3, [r7, #2]
 800531a:	4613      	mov	r3, r2
 800531c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800531e:	78fa      	ldrb	r2, [r7, #3]
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	4613      	mov	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	00db      	lsls	r3, r3, #3
 800532a:	440b      	add	r3, r1
 800532c:	333b      	adds	r3, #59	; 0x3b
 800532e:	78ba      	ldrb	r2, [r7, #2]
 8005330:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005332:	78fa      	ldrb	r2, [r7, #3]
 8005334:	6879      	ldr	r1, [r7, #4]
 8005336:	4613      	mov	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	00db      	lsls	r3, r3, #3
 800533e:	440b      	add	r3, r1
 8005340:	333f      	adds	r3, #63	; 0x3f
 8005342:	787a      	ldrb	r2, [r7, #1]
 8005344:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005346:	7c3b      	ldrb	r3, [r7, #16]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d114      	bne.n	8005376 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800534c:	78fa      	ldrb	r2, [r7, #3]
 800534e:	6879      	ldr	r1, [r7, #4]
 8005350:	4613      	mov	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	440b      	add	r3, r1
 800535a:	3342      	adds	r3, #66	; 0x42
 800535c:	2203      	movs	r2, #3
 800535e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005360:	78fa      	ldrb	r2, [r7, #3]
 8005362:	6879      	ldr	r1, [r7, #4]
 8005364:	4613      	mov	r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4413      	add	r3, r2
 800536a:	00db      	lsls	r3, r3, #3
 800536c:	440b      	add	r3, r1
 800536e:	333d      	adds	r3, #61	; 0x3d
 8005370:	7f3a      	ldrb	r2, [r7, #28]
 8005372:	701a      	strb	r2, [r3, #0]
 8005374:	e009      	b.n	800538a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005376:	78fa      	ldrb	r2, [r7, #3]
 8005378:	6879      	ldr	r1, [r7, #4]
 800537a:	4613      	mov	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4413      	add	r3, r2
 8005380:	00db      	lsls	r3, r3, #3
 8005382:	440b      	add	r3, r1
 8005384:	3342      	adds	r3, #66	; 0x42
 8005386:	2202      	movs	r2, #2
 8005388:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800538a:	787b      	ldrb	r3, [r7, #1]
 800538c:	2b03      	cmp	r3, #3
 800538e:	f200 80d6 	bhi.w	800553e <HAL_HCD_HC_SubmitRequest+0x23a>
 8005392:	a201      	add	r2, pc, #4	; (adr r2, 8005398 <HAL_HCD_HC_SubmitRequest+0x94>)
 8005394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005398:	080053a9 	.word	0x080053a9
 800539c:	08005529 	.word	0x08005529
 80053a0:	08005415 	.word	0x08005415
 80053a4:	0800549f 	.word	0x0800549f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80053a8:	7c3b      	ldrb	r3, [r7, #16]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	f040 80c9 	bne.w	8005542 <HAL_HCD_HC_SubmitRequest+0x23e>
 80053b0:	78bb      	ldrb	r3, [r7, #2]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f040 80c5 	bne.w	8005542 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80053b8:	8b3b      	ldrh	r3, [r7, #24]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d109      	bne.n	80053d2 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80053be:	78fa      	ldrb	r2, [r7, #3]
 80053c0:	6879      	ldr	r1, [r7, #4]
 80053c2:	4613      	mov	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4413      	add	r3, r2
 80053c8:	00db      	lsls	r3, r3, #3
 80053ca:	440b      	add	r3, r1
 80053cc:	3351      	adds	r3, #81	; 0x51
 80053ce:	2201      	movs	r2, #1
 80053d0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80053d2:	78fa      	ldrb	r2, [r7, #3]
 80053d4:	6879      	ldr	r1, [r7, #4]
 80053d6:	4613      	mov	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	00db      	lsls	r3, r3, #3
 80053de:	440b      	add	r3, r1
 80053e0:	3351      	adds	r3, #81	; 0x51
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10a      	bne.n	80053fe <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80053e8:	78fa      	ldrb	r2, [r7, #3]
 80053ea:	6879      	ldr	r1, [r7, #4]
 80053ec:	4613      	mov	r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	00db      	lsls	r3, r3, #3
 80053f4:	440b      	add	r3, r1
 80053f6:	3342      	adds	r3, #66	; 0x42
 80053f8:	2200      	movs	r2, #0
 80053fa:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80053fc:	e0a1      	b.n	8005542 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80053fe:	78fa      	ldrb	r2, [r7, #3]
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	4613      	mov	r3, r2
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	4413      	add	r3, r2
 8005408:	00db      	lsls	r3, r3, #3
 800540a:	440b      	add	r3, r1
 800540c:	3342      	adds	r3, #66	; 0x42
 800540e:	2202      	movs	r2, #2
 8005410:	701a      	strb	r2, [r3, #0]
      break;
 8005412:	e096      	b.n	8005542 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005414:	78bb      	ldrb	r3, [r7, #2]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d120      	bne.n	800545c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800541a:	78fa      	ldrb	r2, [r7, #3]
 800541c:	6879      	ldr	r1, [r7, #4]
 800541e:	4613      	mov	r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4413      	add	r3, r2
 8005424:	00db      	lsls	r3, r3, #3
 8005426:	440b      	add	r3, r1
 8005428:	3351      	adds	r3, #81	; 0x51
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10a      	bne.n	8005446 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005430:	78fa      	ldrb	r2, [r7, #3]
 8005432:	6879      	ldr	r1, [r7, #4]
 8005434:	4613      	mov	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4413      	add	r3, r2
 800543a:	00db      	lsls	r3, r3, #3
 800543c:	440b      	add	r3, r1
 800543e:	3342      	adds	r3, #66	; 0x42
 8005440:	2200      	movs	r2, #0
 8005442:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005444:	e07e      	b.n	8005544 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005446:	78fa      	ldrb	r2, [r7, #3]
 8005448:	6879      	ldr	r1, [r7, #4]
 800544a:	4613      	mov	r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	00db      	lsls	r3, r3, #3
 8005452:	440b      	add	r3, r1
 8005454:	3342      	adds	r3, #66	; 0x42
 8005456:	2202      	movs	r2, #2
 8005458:	701a      	strb	r2, [r3, #0]
      break;
 800545a:	e073      	b.n	8005544 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800545c:	78fa      	ldrb	r2, [r7, #3]
 800545e:	6879      	ldr	r1, [r7, #4]
 8005460:	4613      	mov	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4413      	add	r3, r2
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	440b      	add	r3, r1
 800546a:	3350      	adds	r3, #80	; 0x50
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10a      	bne.n	8005488 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005472:	78fa      	ldrb	r2, [r7, #3]
 8005474:	6879      	ldr	r1, [r7, #4]
 8005476:	4613      	mov	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4413      	add	r3, r2
 800547c:	00db      	lsls	r3, r3, #3
 800547e:	440b      	add	r3, r1
 8005480:	3342      	adds	r3, #66	; 0x42
 8005482:	2200      	movs	r2, #0
 8005484:	701a      	strb	r2, [r3, #0]
      break;
 8005486:	e05d      	b.n	8005544 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005488:	78fa      	ldrb	r2, [r7, #3]
 800548a:	6879      	ldr	r1, [r7, #4]
 800548c:	4613      	mov	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	440b      	add	r3, r1
 8005496:	3342      	adds	r3, #66	; 0x42
 8005498:	2202      	movs	r2, #2
 800549a:	701a      	strb	r2, [r3, #0]
      break;
 800549c:	e052      	b.n	8005544 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800549e:	78bb      	ldrb	r3, [r7, #2]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d120      	bne.n	80054e6 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80054a4:	78fa      	ldrb	r2, [r7, #3]
 80054a6:	6879      	ldr	r1, [r7, #4]
 80054a8:	4613      	mov	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4413      	add	r3, r2
 80054ae:	00db      	lsls	r3, r3, #3
 80054b0:	440b      	add	r3, r1
 80054b2:	3351      	adds	r3, #81	; 0x51
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10a      	bne.n	80054d0 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80054ba:	78fa      	ldrb	r2, [r7, #3]
 80054bc:	6879      	ldr	r1, [r7, #4]
 80054be:	4613      	mov	r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	4413      	add	r3, r2
 80054c4:	00db      	lsls	r3, r3, #3
 80054c6:	440b      	add	r3, r1
 80054c8:	3342      	adds	r3, #66	; 0x42
 80054ca:	2200      	movs	r2, #0
 80054cc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80054ce:	e039      	b.n	8005544 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80054d0:	78fa      	ldrb	r2, [r7, #3]
 80054d2:	6879      	ldr	r1, [r7, #4]
 80054d4:	4613      	mov	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	00db      	lsls	r3, r3, #3
 80054dc:	440b      	add	r3, r1
 80054de:	3342      	adds	r3, #66	; 0x42
 80054e0:	2202      	movs	r2, #2
 80054e2:	701a      	strb	r2, [r3, #0]
      break;
 80054e4:	e02e      	b.n	8005544 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80054e6:	78fa      	ldrb	r2, [r7, #3]
 80054e8:	6879      	ldr	r1, [r7, #4]
 80054ea:	4613      	mov	r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4413      	add	r3, r2
 80054f0:	00db      	lsls	r3, r3, #3
 80054f2:	440b      	add	r3, r1
 80054f4:	3350      	adds	r3, #80	; 0x50
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10a      	bne.n	8005512 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80054fc:	78fa      	ldrb	r2, [r7, #3]
 80054fe:	6879      	ldr	r1, [r7, #4]
 8005500:	4613      	mov	r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4413      	add	r3, r2
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	440b      	add	r3, r1
 800550a:	3342      	adds	r3, #66	; 0x42
 800550c:	2200      	movs	r2, #0
 800550e:	701a      	strb	r2, [r3, #0]
      break;
 8005510:	e018      	b.n	8005544 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005512:	78fa      	ldrb	r2, [r7, #3]
 8005514:	6879      	ldr	r1, [r7, #4]
 8005516:	4613      	mov	r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4413      	add	r3, r2
 800551c:	00db      	lsls	r3, r3, #3
 800551e:	440b      	add	r3, r1
 8005520:	3342      	adds	r3, #66	; 0x42
 8005522:	2202      	movs	r2, #2
 8005524:	701a      	strb	r2, [r3, #0]
      break;
 8005526:	e00d      	b.n	8005544 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005528:	78fa      	ldrb	r2, [r7, #3]
 800552a:	6879      	ldr	r1, [r7, #4]
 800552c:	4613      	mov	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	440b      	add	r3, r1
 8005536:	3342      	adds	r3, #66	; 0x42
 8005538:	2200      	movs	r2, #0
 800553a:	701a      	strb	r2, [r3, #0]
      break;
 800553c:	e002      	b.n	8005544 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800553e:	bf00      	nop
 8005540:	e000      	b.n	8005544 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8005542:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005544:	78fa      	ldrb	r2, [r7, #3]
 8005546:	6879      	ldr	r1, [r7, #4]
 8005548:	4613      	mov	r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4413      	add	r3, r2
 800554e:	00db      	lsls	r3, r3, #3
 8005550:	440b      	add	r3, r1
 8005552:	3344      	adds	r3, #68	; 0x44
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005558:	78fa      	ldrb	r2, [r7, #3]
 800555a:	8b39      	ldrh	r1, [r7, #24]
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	4613      	mov	r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4413      	add	r3, r2
 8005564:	00db      	lsls	r3, r3, #3
 8005566:	4403      	add	r3, r0
 8005568:	3348      	adds	r3, #72	; 0x48
 800556a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800556c:	78fa      	ldrb	r2, [r7, #3]
 800556e:	6879      	ldr	r1, [r7, #4]
 8005570:	4613      	mov	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	440b      	add	r3, r1
 800557a:	335c      	adds	r3, #92	; 0x5c
 800557c:	2200      	movs	r2, #0
 800557e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005580:	78fa      	ldrb	r2, [r7, #3]
 8005582:	6879      	ldr	r1, [r7, #4]
 8005584:	4613      	mov	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4413      	add	r3, r2
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	440b      	add	r3, r1
 800558e:	334c      	adds	r3, #76	; 0x4c
 8005590:	2200      	movs	r2, #0
 8005592:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005594:	78fa      	ldrb	r2, [r7, #3]
 8005596:	6879      	ldr	r1, [r7, #4]
 8005598:	4613      	mov	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	440b      	add	r3, r1
 80055a2:	3339      	adds	r3, #57	; 0x39
 80055a4:	78fa      	ldrb	r2, [r7, #3]
 80055a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80055a8:	78fa      	ldrb	r2, [r7, #3]
 80055aa:	6879      	ldr	r1, [r7, #4]
 80055ac:	4613      	mov	r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	00db      	lsls	r3, r3, #3
 80055b4:	440b      	add	r3, r1
 80055b6:	335d      	adds	r3, #93	; 0x5d
 80055b8:	2200      	movs	r2, #0
 80055ba:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6818      	ldr	r0, [r3, #0]
 80055c0:	78fa      	ldrb	r2, [r7, #3]
 80055c2:	4613      	mov	r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	00db      	lsls	r3, r3, #3
 80055ca:	3338      	adds	r3, #56	; 0x38
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	18d1      	adds	r1, r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	461a      	mov	r2, r3
 80055d8:	f006 f8f2 	bl	800b7c0 <USB_HC_StartXfer>
 80055dc:	4603      	mov	r3, r0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3708      	adds	r7, #8
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop

080055e8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b086      	sub	sp, #24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4618      	mov	r0, r3
 8005600:	f005 fe15 	bl	800b22e <USB_GetMode>
 8005604:	4603      	mov	r3, r0
 8005606:	2b01      	cmp	r3, #1
 8005608:	f040 80ef 	bne.w	80057ea <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4618      	mov	r0, r3
 8005612:	f005 fdf9 	bl	800b208 <USB_ReadInterrupts>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 80e5 	beq.w	80057e8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4618      	mov	r0, r3
 8005624:	f005 fdf0 	bl	800b208 <USB_ReadInterrupts>
 8005628:	4603      	mov	r3, r0
 800562a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800562e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005632:	d104      	bne.n	800563e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800563c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4618      	mov	r0, r3
 8005644:	f005 fde0 	bl	800b208 <USB_ReadInterrupts>
 8005648:	4603      	mov	r3, r0
 800564a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800564e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005652:	d104      	bne.n	800565e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800565c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4618      	mov	r0, r3
 8005664:	f005 fdd0 	bl	800b208 <USB_ReadInterrupts>
 8005668:	4603      	mov	r3, r0
 800566a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800566e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005672:	d104      	bne.n	800567e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800567c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4618      	mov	r0, r3
 8005684:	f005 fdc0 	bl	800b208 <USB_ReadInterrupts>
 8005688:	4603      	mov	r3, r0
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	2b02      	cmp	r3, #2
 8005690:	d103      	bne.n	800569a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2202      	movs	r2, #2
 8005698:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4618      	mov	r0, r3
 80056a0:	f005 fdb2 	bl	800b208 <USB_ReadInterrupts>
 80056a4:	4603      	mov	r3, r0
 80056a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056ae:	d115      	bne.n	80056dc <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80056b8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d108      	bne.n	80056dc <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f00c f948 	bl	8011960 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2101      	movs	r1, #1
 80056d6:	4618      	mov	r0, r3
 80056d8:	f005 fea2 	bl	800b420 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4618      	mov	r0, r3
 80056e2:	f005 fd91 	bl	800b208 <USB_ReadInterrupts>
 80056e6:	4603      	mov	r3, r0
 80056e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056f0:	d102      	bne.n	80056f8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f001 f966 	bl	80069c4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4618      	mov	r0, r3
 80056fe:	f005 fd83 	bl	800b208 <USB_ReadInterrupts>
 8005702:	4603      	mov	r3, r0
 8005704:	f003 0308 	and.w	r3, r3, #8
 8005708:	2b08      	cmp	r3, #8
 800570a:	d106      	bne.n	800571a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f00c f90b 	bl	8011928 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2208      	movs	r2, #8
 8005718:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4618      	mov	r0, r3
 8005720:	f005 fd72 	bl	800b208 <USB_ReadInterrupts>
 8005724:	4603      	mov	r3, r0
 8005726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800572a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800572e:	d138      	bne.n	80057a2 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4618      	mov	r0, r3
 8005736:	f006 f989 	bl	800ba4c <USB_HC_ReadInterrupt>
 800573a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800573c:	2300      	movs	r3, #0
 800573e:	617b      	str	r3, [r7, #20]
 8005740:	e025      	b.n	800578e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f003 030f 	and.w	r3, r3, #15
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	fa22 f303 	lsr.w	r3, r2, r3
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b00      	cmp	r3, #0
 8005754:	d018      	beq.n	8005788 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	4413      	add	r3, r2
 800575e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005768:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800576c:	d106      	bne.n	800577c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	b2db      	uxtb	r3, r3
 8005772:	4619      	mov	r1, r3
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f8cf 	bl	8005918 <HCD_HC_IN_IRQHandler>
 800577a:	e005      	b.n	8005788 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	b2db      	uxtb	r3, r3
 8005780:	4619      	mov	r1, r3
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 fcfd 	bl	8006182 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	3301      	adds	r3, #1
 800578c:	617b      	str	r3, [r7, #20]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	429a      	cmp	r2, r3
 8005796:	d3d4      	bcc.n	8005742 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f005 fd2e 	bl	800b208 <USB_ReadInterrupts>
 80057ac:	4603      	mov	r3, r0
 80057ae:	f003 0310 	and.w	r3, r3, #16
 80057b2:	2b10      	cmp	r3, #16
 80057b4:	d101      	bne.n	80057ba <HAL_HCD_IRQHandler+0x1d2>
 80057b6:	2301      	movs	r3, #1
 80057b8:	e000      	b.n	80057bc <HAL_HCD_IRQHandler+0x1d4>
 80057ba:	2300      	movs	r3, #0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d014      	beq.n	80057ea <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	699a      	ldr	r2, [r3, #24]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 0210 	bic.w	r2, r2, #16
 80057ce:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f001 f84b 	bl	800686c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	699a      	ldr	r2, [r3, #24]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f042 0210 	orr.w	r2, r2, #16
 80057e4:	619a      	str	r2, [r3, #24]
 80057e6:	e000      	b.n	80057ea <HAL_HCD_IRQHandler+0x202>
      return;
 80057e8:	bf00      	nop
    }
  }
}
 80057ea:	3718      	adds	r7, #24
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d101      	bne.n	8005806 <HAL_HCD_Start+0x16>
 8005802:	2302      	movs	r3, #2
 8005804:	e013      	b.n	800582e <HAL_HCD_Start+0x3e>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4618      	mov	r0, r3
 8005814:	f005 fc05 	bl	800b022 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2101      	movs	r1, #1
 800581e:	4618      	mov	r0, r3
 8005820:	f005 fe62 	bl	800b4e8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3708      	adds	r7, #8
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005836:	b580      	push	{r7, lr}
 8005838:	b082      	sub	sp, #8
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005844:	2b01      	cmp	r3, #1
 8005846:	d101      	bne.n	800584c <HAL_HCD_Stop+0x16>
 8005848:	2302      	movs	r3, #2
 800584a:	e00d      	b.n	8005868 <HAL_HCD_Stop+0x32>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4618      	mov	r0, r3
 800585a:	f006 fa43 	bl	800bce4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3708      	adds	r7, #8
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4618      	mov	r0, r3
 800587e:	f005 fe09 	bl	800b494 <USB_ResetPort>
 8005882:	4603      	mov	r3, r0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3708      	adds	r7, #8
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	460b      	mov	r3, r1
 8005896:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005898:	78fa      	ldrb	r2, [r7, #3]
 800589a:	6879      	ldr	r1, [r7, #4]
 800589c:	4613      	mov	r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4413      	add	r3, r2
 80058a2:	00db      	lsls	r3, r3, #3
 80058a4:	440b      	add	r3, r1
 80058a6:	335c      	adds	r3, #92	; 0x5c
 80058a8:	781b      	ldrb	r3, [r3, #0]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	460b      	mov	r3, r1
 80058c0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80058c2:	78fa      	ldrb	r2, [r7, #3]
 80058c4:	6879      	ldr	r1, [r7, #4]
 80058c6:	4613      	mov	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4413      	add	r3, r2
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	440b      	add	r3, r1
 80058d0:	334c      	adds	r3, #76	; 0x4c
 80058d2:	681b      	ldr	r3, [r3, #0]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f005 fe4b 	bl	800b588 <USB_GetCurrentFrame>
 80058f2:	4603      	mov	r3, r0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3708      	adds	r7, #8
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4618      	mov	r0, r3
 800590a:	f005 fe26 	bl	800b55a <USB_GetHostSpeed>
 800590e:	4603      	mov	r3, r0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	460b      	mov	r3, r1
 8005922:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800592e:	78fb      	ldrb	r3, [r7, #3]
 8005930:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	4413      	add	r3, r2
 800593a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f003 0304 	and.w	r3, r3, #4
 8005944:	2b04      	cmp	r3, #4
 8005946:	d119      	bne.n	800597c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	015a      	lsls	r2, r3, #5
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	4413      	add	r3, r2
 8005950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005954:	461a      	mov	r2, r3
 8005956:	2304      	movs	r3, #4
 8005958:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	4413      	add	r3, r2
 8005962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	0151      	lsls	r1, r2, #5
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	440a      	add	r2, r1
 8005970:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005974:	f043 0302 	orr.w	r3, r3, #2
 8005978:	60d3      	str	r3, [r2, #12]
 800597a:	e0ce      	b.n	8005b1a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	4413      	add	r3, r2
 8005984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800598e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005992:	d12c      	bne.n	80059ee <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	4413      	add	r3, r2
 800599c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a0:	461a      	mov	r2, r3
 80059a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80059a8:	6879      	ldr	r1, [r7, #4]
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	4613      	mov	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	440b      	add	r3, r1
 80059b6:	335d      	adds	r3, #93	; 0x5d
 80059b8:	2207      	movs	r2, #7
 80059ba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	0151      	lsls	r1, r2, #5
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	440a      	add	r2, r1
 80059d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059d6:	f043 0302 	orr.w	r3, r3, #2
 80059da:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	b2d2      	uxtb	r2, r2
 80059e4:	4611      	mov	r1, r2
 80059e6:	4618      	mov	r0, r3
 80059e8:	f006 f841 	bl	800ba6e <USB_HC_Halt>
 80059ec:	e095      	b.n	8005b1a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	015a      	lsls	r2, r3, #5
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	4413      	add	r3, r2
 80059f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f003 0320 	and.w	r3, r3, #32
 8005a00:	2b20      	cmp	r3, #32
 8005a02:	d109      	bne.n	8005a18 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	015a      	lsls	r2, r3, #5
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a10:	461a      	mov	r2, r3
 8005a12:	2320      	movs	r3, #32
 8005a14:	6093      	str	r3, [r2, #8]
 8005a16:	e080      	b.n	8005b1a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f003 0308 	and.w	r3, r3, #8
 8005a2a:	2b08      	cmp	r3, #8
 8005a2c:	d134      	bne.n	8005a98 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	0151      	lsls	r1, r2, #5
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	440a      	add	r2, r1
 8005a44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a48:	f043 0302 	orr.w	r3, r3, #2
 8005a4c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005a4e:	6879      	ldr	r1, [r7, #4]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	4613      	mov	r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	4413      	add	r3, r2
 8005a58:	00db      	lsls	r3, r3, #3
 8005a5a:	440b      	add	r3, r1
 8005a5c:	335d      	adds	r3, #93	; 0x5d
 8005a5e:	2205      	movs	r2, #5
 8005a60:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	015a      	lsls	r2, r3, #5
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a6e:	461a      	mov	r2, r3
 8005a70:	2310      	movs	r3, #16
 8005a72:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	015a      	lsls	r2, r3, #5
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a80:	461a      	mov	r2, r3
 8005a82:	2308      	movs	r3, #8
 8005a84:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	b2d2      	uxtb	r2, r2
 8005a8e:	4611      	mov	r1, r2
 8005a90:	4618      	mov	r0, r3
 8005a92:	f005 ffec 	bl	800ba6e <USB_HC_Halt>
 8005a96:	e040      	b.n	8005b1a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aae:	d134      	bne.n	8005b1a <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	0151      	lsls	r1, r2, #5
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	440a      	add	r2, r1
 8005ac6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aca:	f043 0302 	orr.w	r3, r3, #2
 8005ace:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	b2d2      	uxtb	r2, r2
 8005ad8:	4611      	mov	r1, r2
 8005ada:	4618      	mov	r0, r3
 8005adc:	f005 ffc7 	bl	800ba6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aec:	461a      	mov	r2, r3
 8005aee:	2310      	movs	r3, #16
 8005af0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005af2:	6879      	ldr	r1, [r7, #4]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	4613      	mov	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	00db      	lsls	r3, r3, #3
 8005afe:	440b      	add	r3, r1
 8005b00:	335d      	adds	r3, #93	; 0x5d
 8005b02:	2208      	movs	r2, #8
 8005b04:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b12:	461a      	mov	r2, r3
 8005b14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b18:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	015a      	lsls	r2, r3, #5
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b30:	d122      	bne.n	8005b78 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	0151      	lsls	r1, r2, #5
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	440a      	add	r2, r1
 8005b48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b4c:	f043 0302 	orr.w	r3, r3, #2
 8005b50:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	b2d2      	uxtb	r2, r2
 8005b5a:	4611      	mov	r1, r2
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f005 ff86 	bl	800ba6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b6e:	461a      	mov	r2, r3
 8005b70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b74:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005b76:	e300      	b.n	800617a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	f040 80fd 	bne.w	8005d8a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d01b      	beq.n	8005bd0 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005b98:	6879      	ldr	r1, [r7, #4]
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	00db      	lsls	r3, r3, #3
 8005ba4:	440b      	add	r3, r1
 8005ba6:	3348      	adds	r3, #72	; 0x48
 8005ba8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	0159      	lsls	r1, r3, #5
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	440b      	add	r3, r1
 8005bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005bbc:	1ad1      	subs	r1, r2, r3
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4413      	add	r3, r2
 8005bc8:	00db      	lsls	r3, r3, #3
 8005bca:	4403      	add	r3, r0
 8005bcc:	334c      	adds	r3, #76	; 0x4c
 8005bce:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005bd0:	6879      	ldr	r1, [r7, #4]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	4413      	add	r3, r2
 8005bda:	00db      	lsls	r3, r3, #3
 8005bdc:	440b      	add	r3, r1
 8005bde:	335d      	adds	r3, #93	; 0x5d
 8005be0:	2201      	movs	r2, #1
 8005be2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005be4:	6879      	ldr	r1, [r7, #4]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	4613      	mov	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	00db      	lsls	r3, r3, #3
 8005bf0:	440b      	add	r3, r1
 8005bf2:	3358      	adds	r3, #88	; 0x58
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c04:	461a      	mov	r2, r3
 8005c06:	2301      	movs	r3, #1
 8005c08:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005c0a:	6879      	ldr	r1, [r7, #4]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4613      	mov	r3, r2
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4413      	add	r3, r2
 8005c14:	00db      	lsls	r3, r3, #3
 8005c16:	440b      	add	r3, r1
 8005c18:	333f      	adds	r3, #63	; 0x3f
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00a      	beq.n	8005c36 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005c20:	6879      	ldr	r1, [r7, #4]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	4613      	mov	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4413      	add	r3, r2
 8005c2a:	00db      	lsls	r3, r3, #3
 8005c2c:	440b      	add	r3, r1
 8005c2e:	333f      	adds	r3, #63	; 0x3f
 8005c30:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d121      	bne.n	8005c7a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	0151      	lsls	r1, r2, #5
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	440a      	add	r2, r1
 8005c4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c50:	f043 0302 	orr.w	r3, r3, #2
 8005c54:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	b2d2      	uxtb	r2, r2
 8005c5e:	4611      	mov	r1, r2
 8005c60:	4618      	mov	r0, r3
 8005c62:	f005 ff04 	bl	800ba6e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c72:	461a      	mov	r2, r3
 8005c74:	2310      	movs	r3, #16
 8005c76:	6093      	str	r3, [r2, #8]
 8005c78:	e070      	b.n	8005d5c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005c7a:	6879      	ldr	r1, [r7, #4]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	00db      	lsls	r3, r3, #3
 8005c86:	440b      	add	r3, r1
 8005c88:	333f      	adds	r3, #63	; 0x3f
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	2b03      	cmp	r3, #3
 8005c8e:	d12a      	bne.n	8005ce6 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	0151      	lsls	r1, r2, #5
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	440a      	add	r2, r1
 8005ca6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005caa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005cae:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005cb0:	6879      	ldr	r1, [r7, #4]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4413      	add	r3, r2
 8005cba:	00db      	lsls	r3, r3, #3
 8005cbc:	440b      	add	r3, r1
 8005cbe:	335c      	adds	r3, #92	; 0x5c
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	b2d8      	uxtb	r0, r3
 8005cc8:	6879      	ldr	r1, [r7, #4]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4413      	add	r3, r2
 8005cd2:	00db      	lsls	r3, r3, #3
 8005cd4:	440b      	add	r3, r1
 8005cd6:	335c      	adds	r3, #92	; 0x5c
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	4601      	mov	r1, r0
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f00b fe4c 	bl	801197c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005ce4:	e03a      	b.n	8005d5c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8005ce6:	6879      	ldr	r1, [r7, #4]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	4613      	mov	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	00db      	lsls	r3, r3, #3
 8005cf2:	440b      	add	r3, r1
 8005cf4:	333f      	adds	r3, #63	; 0x3f
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d12f      	bne.n	8005d5c <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005cfc:	6879      	ldr	r1, [r7, #4]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	4613      	mov	r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4413      	add	r3, r2
 8005d06:	00db      	lsls	r3, r3, #3
 8005d08:	440b      	add	r3, r1
 8005d0a:	335c      	adds	r3, #92	; 0x5c
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005d10:	6879      	ldr	r1, [r7, #4]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	4613      	mov	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	440b      	add	r3, r1
 8005d1e:	3350      	adds	r3, #80	; 0x50
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	f083 0301 	eor.w	r3, r3, #1
 8005d26:	b2d8      	uxtb	r0, r3
 8005d28:	6879      	ldr	r1, [r7, #4]
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4413      	add	r3, r2
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	440b      	add	r3, r1
 8005d36:	3350      	adds	r3, #80	; 0x50
 8005d38:	4602      	mov	r2, r0
 8005d3a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	b2d8      	uxtb	r0, r3
 8005d40:	6879      	ldr	r1, [r7, #4]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	4613      	mov	r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	00db      	lsls	r3, r3, #3
 8005d4c:	440b      	add	r3, r1
 8005d4e:	335c      	adds	r3, #92	; 0x5c
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	461a      	mov	r2, r3
 8005d54:	4601      	mov	r1, r0
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f00b fe10 	bl	801197c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8005d5c:	6879      	ldr	r1, [r7, #4]
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	4613      	mov	r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4413      	add	r3, r2
 8005d66:	00db      	lsls	r3, r3, #3
 8005d68:	440b      	add	r3, r1
 8005d6a:	3350      	adds	r3, #80	; 0x50
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	f083 0301 	eor.w	r3, r3, #1
 8005d72:	b2d8      	uxtb	r0, r3
 8005d74:	6879      	ldr	r1, [r7, #4]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	4613      	mov	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	00db      	lsls	r3, r3, #3
 8005d80:	440b      	add	r3, r1
 8005d82:	3350      	adds	r3, #80	; 0x50
 8005d84:	4602      	mov	r2, r0
 8005d86:	701a      	strb	r2, [r3, #0]
}
 8005d88:	e1f7      	b.n	800617a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f003 0302 	and.w	r3, r3, #2
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	f040 811a 	bne.w	8005fd6 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	015a      	lsls	r2, r3, #5
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	4413      	add	r3, r2
 8005daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	0151      	lsls	r1, r2, #5
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	440a      	add	r2, r1
 8005db8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dbc:	f023 0302 	bic.w	r3, r3, #2
 8005dc0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005dc2:	6879      	ldr	r1, [r7, #4]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4413      	add	r3, r2
 8005dcc:	00db      	lsls	r3, r3, #3
 8005dce:	440b      	add	r3, r1
 8005dd0:	335d      	adds	r3, #93	; 0x5d
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d10a      	bne.n	8005dee <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005dd8:	6879      	ldr	r1, [r7, #4]
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	440b      	add	r3, r1
 8005de6:	335c      	adds	r3, #92	; 0x5c
 8005de8:	2201      	movs	r2, #1
 8005dea:	701a      	strb	r2, [r3, #0]
 8005dec:	e0d9      	b.n	8005fa2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005dee:	6879      	ldr	r1, [r7, #4]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	4613      	mov	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	00db      	lsls	r3, r3, #3
 8005dfa:	440b      	add	r3, r1
 8005dfc:	335d      	adds	r3, #93	; 0x5d
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	2b05      	cmp	r3, #5
 8005e02:	d10a      	bne.n	8005e1a <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005e04:	6879      	ldr	r1, [r7, #4]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	00db      	lsls	r3, r3, #3
 8005e10:	440b      	add	r3, r1
 8005e12:	335c      	adds	r3, #92	; 0x5c
 8005e14:	2205      	movs	r2, #5
 8005e16:	701a      	strb	r2, [r3, #0]
 8005e18:	e0c3      	b.n	8005fa2 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005e1a:	6879      	ldr	r1, [r7, #4]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4413      	add	r3, r2
 8005e24:	00db      	lsls	r3, r3, #3
 8005e26:	440b      	add	r3, r1
 8005e28:	335d      	adds	r3, #93	; 0x5d
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	2b06      	cmp	r3, #6
 8005e2e:	d00a      	beq.n	8005e46 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005e30:	6879      	ldr	r1, [r7, #4]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	4613      	mov	r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4413      	add	r3, r2
 8005e3a:	00db      	lsls	r3, r3, #3
 8005e3c:	440b      	add	r3, r1
 8005e3e:	335d      	adds	r3, #93	; 0x5d
 8005e40:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005e42:	2b08      	cmp	r3, #8
 8005e44:	d156      	bne.n	8005ef4 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8005e46:	6879      	ldr	r1, [r7, #4]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	4413      	add	r3, r2
 8005e50:	00db      	lsls	r3, r3, #3
 8005e52:	440b      	add	r3, r1
 8005e54:	3358      	adds	r3, #88	; 0x58
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	1c59      	adds	r1, r3, #1
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4413      	add	r3, r2
 8005e64:	00db      	lsls	r3, r3, #3
 8005e66:	4403      	add	r3, r0
 8005e68:	3358      	adds	r3, #88	; 0x58
 8005e6a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005e6c:	6879      	ldr	r1, [r7, #4]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	4613      	mov	r3, r2
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	4413      	add	r3, r2
 8005e76:	00db      	lsls	r3, r3, #3
 8005e78:	440b      	add	r3, r1
 8005e7a:	3358      	adds	r3, #88	; 0x58
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b03      	cmp	r3, #3
 8005e80:	d914      	bls.n	8005eac <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005e82:	6879      	ldr	r1, [r7, #4]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	4613      	mov	r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	00db      	lsls	r3, r3, #3
 8005e8e:	440b      	add	r3, r1
 8005e90:	3358      	adds	r3, #88	; 0x58
 8005e92:	2200      	movs	r2, #0
 8005e94:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005e96:	6879      	ldr	r1, [r7, #4]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4413      	add	r3, r2
 8005ea0:	00db      	lsls	r3, r3, #3
 8005ea2:	440b      	add	r3, r1
 8005ea4:	335c      	adds	r3, #92	; 0x5c
 8005ea6:	2204      	movs	r2, #4
 8005ea8:	701a      	strb	r2, [r3, #0]
 8005eaa:	e009      	b.n	8005ec0 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005eac:	6879      	ldr	r1, [r7, #4]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	00db      	lsls	r3, r3, #3
 8005eb8:	440b      	add	r3, r1
 8005eba:	335c      	adds	r3, #92	; 0x5c
 8005ebc:	2202      	movs	r2, #2
 8005ebe:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	015a      	lsls	r2, r3, #5
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ed6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ede:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eec:	461a      	mov	r2, r3
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	6013      	str	r3, [r2, #0]
 8005ef2:	e056      	b.n	8005fa2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005ef4:	6879      	ldr	r1, [r7, #4]
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	00db      	lsls	r3, r3, #3
 8005f00:	440b      	add	r3, r1
 8005f02:	335d      	adds	r3, #93	; 0x5d
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	2b03      	cmp	r3, #3
 8005f08:	d123      	bne.n	8005f52 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005f0a:	6879      	ldr	r1, [r7, #4]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	4413      	add	r3, r2
 8005f14:	00db      	lsls	r3, r3, #3
 8005f16:	440b      	add	r3, r1
 8005f18:	335c      	adds	r3, #92	; 0x5c
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	015a      	lsls	r2, r3, #5
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f34:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f3c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	6013      	str	r3, [r2, #0]
 8005f50:	e027      	b.n	8005fa2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005f52:	6879      	ldr	r1, [r7, #4]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	4613      	mov	r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4413      	add	r3, r2
 8005f5c:	00db      	lsls	r3, r3, #3
 8005f5e:	440b      	add	r3, r1
 8005f60:	335d      	adds	r3, #93	; 0x5d
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	2b07      	cmp	r3, #7
 8005f66:	d11c      	bne.n	8005fa2 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8005f68:	6879      	ldr	r1, [r7, #4]
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4413      	add	r3, r2
 8005f72:	00db      	lsls	r3, r3, #3
 8005f74:	440b      	add	r3, r1
 8005f76:	3358      	adds	r3, #88	; 0x58
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	1c59      	adds	r1, r3, #1
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	4613      	mov	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	4403      	add	r3, r0
 8005f8a:	3358      	adds	r3, #88	; 0x58
 8005f8c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005f8e:	6879      	ldr	r1, [r7, #4]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	4613      	mov	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	00db      	lsls	r3, r3, #3
 8005f9a:	440b      	add	r3, r1
 8005f9c:	335c      	adds	r3, #92	; 0x5c
 8005f9e:	2204      	movs	r2, #4
 8005fa0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fae:	461a      	mov	r2, r3
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	b2d8      	uxtb	r0, r3
 8005fb8:	6879      	ldr	r1, [r7, #4]
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	00db      	lsls	r3, r3, #3
 8005fc4:	440b      	add	r3, r1
 8005fc6:	335c      	adds	r3, #92	; 0x5c
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	4601      	mov	r1, r0
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f00b fcd4 	bl	801197c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005fd4:	e0d1      	b.n	800617a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fe8:	2b80      	cmp	r3, #128	; 0x80
 8005fea:	d13e      	bne.n	800606a <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	015a      	lsls	r2, r3, #5
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	0151      	lsls	r1, r2, #5
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	440a      	add	r2, r1
 8006002:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006006:	f043 0302 	orr.w	r3, r3, #2
 800600a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800600c:	6879      	ldr	r1, [r7, #4]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	4613      	mov	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	00db      	lsls	r3, r3, #3
 8006018:	440b      	add	r3, r1
 800601a:	3358      	adds	r3, #88	; 0x58
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	1c59      	adds	r1, r3, #1
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	4613      	mov	r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	4413      	add	r3, r2
 800602a:	00db      	lsls	r3, r3, #3
 800602c:	4403      	add	r3, r0
 800602e:	3358      	adds	r3, #88	; 0x58
 8006030:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006032:	6879      	ldr	r1, [r7, #4]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	4613      	mov	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	00db      	lsls	r3, r3, #3
 800603e:	440b      	add	r3, r1
 8006040:	335d      	adds	r3, #93	; 0x5d
 8006042:	2206      	movs	r2, #6
 8006044:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	b2d2      	uxtb	r2, r2
 800604e:	4611      	mov	r1, r2
 8006050:	4618      	mov	r0, r3
 8006052:	f005 fd0c 	bl	800ba6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	015a      	lsls	r2, r3, #5
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	4413      	add	r3, r2
 800605e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006062:	461a      	mov	r2, r3
 8006064:	2380      	movs	r3, #128	; 0x80
 8006066:	6093      	str	r3, [r2, #8]
}
 8006068:	e087      	b.n	800617a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	015a      	lsls	r2, r3, #5
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	4413      	add	r3, r2
 8006072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f003 0310 	and.w	r3, r3, #16
 800607c:	2b10      	cmp	r3, #16
 800607e:	d17c      	bne.n	800617a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006080:	6879      	ldr	r1, [r7, #4]
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	4613      	mov	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	440b      	add	r3, r1
 800608e:	333f      	adds	r3, #63	; 0x3f
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	2b03      	cmp	r3, #3
 8006094:	d122      	bne.n	80060dc <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006096:	6879      	ldr	r1, [r7, #4]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	4613      	mov	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4413      	add	r3, r2
 80060a0:	00db      	lsls	r3, r3, #3
 80060a2:	440b      	add	r3, r1
 80060a4:	3358      	adds	r3, #88	; 0x58
 80060a6:	2200      	movs	r2, #0
 80060a8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	0151      	lsls	r1, r2, #5
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	440a      	add	r2, r1
 80060c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060c4:	f043 0302 	orr.w	r3, r3, #2
 80060c8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	b2d2      	uxtb	r2, r2
 80060d2:	4611      	mov	r1, r2
 80060d4:	4618      	mov	r0, r3
 80060d6:	f005 fcca 	bl	800ba6e <USB_HC_Halt>
 80060da:	e045      	b.n	8006168 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80060dc:	6879      	ldr	r1, [r7, #4]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	4613      	mov	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	00db      	lsls	r3, r3, #3
 80060e8:	440b      	add	r3, r1
 80060ea:	333f      	adds	r3, #63	; 0x3f
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00a      	beq.n	8006108 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80060f2:	6879      	ldr	r1, [r7, #4]
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	4613      	mov	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	00db      	lsls	r3, r3, #3
 80060fe:	440b      	add	r3, r1
 8006100:	333f      	adds	r3, #63	; 0x3f
 8006102:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006104:	2b02      	cmp	r3, #2
 8006106:	d12f      	bne.n	8006168 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006108:	6879      	ldr	r1, [r7, #4]
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	4613      	mov	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4413      	add	r3, r2
 8006112:	00db      	lsls	r3, r3, #3
 8006114:	440b      	add	r3, r1
 8006116:	3358      	adds	r3, #88	; 0x58
 8006118:	2200      	movs	r2, #0
 800611a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d121      	bne.n	8006168 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8006124:	6879      	ldr	r1, [r7, #4]
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	4613      	mov	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4413      	add	r3, r2
 800612e:	00db      	lsls	r3, r3, #3
 8006130:	440b      	add	r3, r1
 8006132:	335d      	adds	r3, #93	; 0x5d
 8006134:	2203      	movs	r2, #3
 8006136:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	015a      	lsls	r2, r3, #5
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	4413      	add	r3, r2
 8006140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	0151      	lsls	r1, r2, #5
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	440a      	add	r2, r1
 800614e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006152:	f043 0302 	orr.w	r3, r3, #2
 8006156:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	b2d2      	uxtb	r2, r2
 8006160:	4611      	mov	r1, r2
 8006162:	4618      	mov	r0, r3
 8006164:	f005 fc83 	bl	800ba6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	015a      	lsls	r2, r3, #5
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	4413      	add	r3, r2
 8006170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006174:	461a      	mov	r2, r3
 8006176:	2310      	movs	r3, #16
 8006178:	6093      	str	r3, [r2, #8]
}
 800617a:	bf00      	nop
 800617c:	3718      	adds	r7, #24
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b086      	sub	sp, #24
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
 800618a:	460b      	mov	r3, r1
 800618c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8006198:	78fb      	ldrb	r3, [r7, #3]
 800619a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	015a      	lsls	r2, r3, #5
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	4413      	add	r3, r2
 80061a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f003 0304 	and.w	r3, r3, #4
 80061ae:	2b04      	cmp	r3, #4
 80061b0:	d119      	bne.n	80061e6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	015a      	lsls	r2, r3, #5
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061be:	461a      	mov	r2, r3
 80061c0:	2304      	movs	r3, #4
 80061c2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	0151      	lsls	r1, r2, #5
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	440a      	add	r2, r1
 80061da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061de:	f043 0302 	orr.w	r3, r3, #2
 80061e2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80061e4:	e33e      	b.n	8006864 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	015a      	lsls	r2, r3, #5
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	4413      	add	r3, r2
 80061ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f003 0320 	and.w	r3, r3, #32
 80061f8:	2b20      	cmp	r3, #32
 80061fa:	d141      	bne.n	8006280 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	4413      	add	r3, r2
 8006204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006208:	461a      	mov	r2, r3
 800620a:	2320      	movs	r3, #32
 800620c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800620e:	6879      	ldr	r1, [r7, #4]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	4613      	mov	r3, r2
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	4413      	add	r3, r2
 8006218:	00db      	lsls	r3, r3, #3
 800621a:	440b      	add	r3, r1
 800621c:	333d      	adds	r3, #61	; 0x3d
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	2b01      	cmp	r3, #1
 8006222:	f040 831f 	bne.w	8006864 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8006226:	6879      	ldr	r1, [r7, #4]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	4613      	mov	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	00db      	lsls	r3, r3, #3
 8006232:	440b      	add	r3, r1
 8006234:	333d      	adds	r3, #61	; 0x3d
 8006236:	2200      	movs	r2, #0
 8006238:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800623a:	6879      	ldr	r1, [r7, #4]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	4613      	mov	r3, r2
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4413      	add	r3, r2
 8006244:	00db      	lsls	r3, r3, #3
 8006246:	440b      	add	r3, r1
 8006248:	335c      	adds	r3, #92	; 0x5c
 800624a:	2202      	movs	r2, #2
 800624c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	4413      	add	r3, r2
 8006256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	0151      	lsls	r1, r2, #5
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	440a      	add	r2, r1
 8006264:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006268:	f043 0302 	orr.w	r3, r3, #2
 800626c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	b2d2      	uxtb	r2, r2
 8006276:	4611      	mov	r1, r2
 8006278:	4618      	mov	r0, r3
 800627a:	f005 fbf8 	bl	800ba6e <USB_HC_Halt>
}
 800627e:	e2f1      	b.n	8006864 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	4413      	add	r3, r2
 8006288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006292:	2b40      	cmp	r3, #64	; 0x40
 8006294:	d13f      	bne.n	8006316 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8006296:	6879      	ldr	r1, [r7, #4]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	4613      	mov	r3, r2
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4413      	add	r3, r2
 80062a0:	00db      	lsls	r3, r3, #3
 80062a2:	440b      	add	r3, r1
 80062a4:	335d      	adds	r3, #93	; 0x5d
 80062a6:	2204      	movs	r2, #4
 80062a8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80062aa:	6879      	ldr	r1, [r7, #4]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	4613      	mov	r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4413      	add	r3, r2
 80062b4:	00db      	lsls	r3, r3, #3
 80062b6:	440b      	add	r3, r1
 80062b8:	333d      	adds	r3, #61	; 0x3d
 80062ba:	2201      	movs	r2, #1
 80062bc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80062be:	6879      	ldr	r1, [r7, #4]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	4613      	mov	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4413      	add	r3, r2
 80062c8:	00db      	lsls	r3, r3, #3
 80062ca:	440b      	add	r3, r1
 80062cc:	3358      	adds	r3, #88	; 0x58
 80062ce:	2200      	movs	r2, #0
 80062d0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	0151      	lsls	r1, r2, #5
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	440a      	add	r2, r1
 80062e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062ec:	f043 0302 	orr.w	r3, r3, #2
 80062f0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	b2d2      	uxtb	r2, r2
 80062fa:	4611      	mov	r1, r2
 80062fc:	4618      	mov	r0, r3
 80062fe:	f005 fbb6 	bl	800ba6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	015a      	lsls	r2, r3, #5
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	4413      	add	r3, r2
 800630a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800630e:	461a      	mov	r2, r3
 8006310:	2340      	movs	r3, #64	; 0x40
 8006312:	6093      	str	r3, [r2, #8]
}
 8006314:	e2a6      	b.n	8006864 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	4413      	add	r3, r2
 800631e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800632c:	d122      	bne.n	8006374 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	015a      	lsls	r2, r3, #5
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	4413      	add	r3, r2
 8006336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	0151      	lsls	r1, r2, #5
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	440a      	add	r2, r1
 8006344:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006348:	f043 0302 	orr.w	r3, r3, #2
 800634c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	b2d2      	uxtb	r2, r2
 8006356:	4611      	mov	r1, r2
 8006358:	4618      	mov	r0, r3
 800635a:	f005 fb88 	bl	800ba6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	015a      	lsls	r2, r3, #5
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	4413      	add	r3, r2
 8006366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800636a:	461a      	mov	r2, r3
 800636c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006370:	6093      	str	r3, [r2, #8]
}
 8006372:	e277      	b.n	8006864 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	4413      	add	r3, r2
 800637c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b01      	cmp	r3, #1
 8006388:	d135      	bne.n	80063f6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800638a:	6879      	ldr	r1, [r7, #4]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	4613      	mov	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4413      	add	r3, r2
 8006394:	00db      	lsls	r3, r3, #3
 8006396:	440b      	add	r3, r1
 8006398:	3358      	adds	r3, #88	; 0x58
 800639a:	2200      	movs	r2, #0
 800639c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	0151      	lsls	r1, r2, #5
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	440a      	add	r2, r1
 80063b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063b8:	f043 0302 	orr.w	r3, r3, #2
 80063bc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	b2d2      	uxtb	r2, r2
 80063c6:	4611      	mov	r1, r2
 80063c8:	4618      	mov	r0, r3
 80063ca:	f005 fb50 	bl	800ba6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063da:	461a      	mov	r2, r3
 80063dc:	2301      	movs	r3, #1
 80063de:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80063e0:	6879      	ldr	r1, [r7, #4]
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	4613      	mov	r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	4413      	add	r3, r2
 80063ea:	00db      	lsls	r3, r3, #3
 80063ec:	440b      	add	r3, r1
 80063ee:	335d      	adds	r3, #93	; 0x5d
 80063f0:	2201      	movs	r2, #1
 80063f2:	701a      	strb	r2, [r3, #0]
}
 80063f4:	e236      	b.n	8006864 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f003 0308 	and.w	r3, r3, #8
 8006408:	2b08      	cmp	r3, #8
 800640a:	d12b      	bne.n	8006464 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	4413      	add	r3, r2
 8006414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006418:	461a      	mov	r2, r3
 800641a:	2308      	movs	r3, #8
 800641c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	015a      	lsls	r2, r3, #5
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	4413      	add	r3, r2
 8006426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	0151      	lsls	r1, r2, #5
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	440a      	add	r2, r1
 8006434:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006438:	f043 0302 	orr.w	r3, r3, #2
 800643c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	b2d2      	uxtb	r2, r2
 8006446:	4611      	mov	r1, r2
 8006448:	4618      	mov	r0, r3
 800644a:	f005 fb10 	bl	800ba6e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800644e:	6879      	ldr	r1, [r7, #4]
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	4613      	mov	r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	4413      	add	r3, r2
 8006458:	00db      	lsls	r3, r3, #3
 800645a:	440b      	add	r3, r1
 800645c:	335d      	adds	r3, #93	; 0x5d
 800645e:	2205      	movs	r2, #5
 8006460:	701a      	strb	r2, [r3, #0]
}
 8006462:	e1ff      	b.n	8006864 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	4413      	add	r3, r2
 800646c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f003 0310 	and.w	r3, r3, #16
 8006476:	2b10      	cmp	r3, #16
 8006478:	d155      	bne.n	8006526 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800647a:	6879      	ldr	r1, [r7, #4]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	4613      	mov	r3, r2
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	4413      	add	r3, r2
 8006484:	00db      	lsls	r3, r3, #3
 8006486:	440b      	add	r3, r1
 8006488:	3358      	adds	r3, #88	; 0x58
 800648a:	2200      	movs	r2, #0
 800648c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800648e:	6879      	ldr	r1, [r7, #4]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	4613      	mov	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	00db      	lsls	r3, r3, #3
 800649a:	440b      	add	r3, r1
 800649c:	335d      	adds	r3, #93	; 0x5d
 800649e:	2203      	movs	r2, #3
 80064a0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80064a2:	6879      	ldr	r1, [r7, #4]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	4613      	mov	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	00db      	lsls	r3, r3, #3
 80064ae:	440b      	add	r3, r1
 80064b0:	333d      	adds	r3, #61	; 0x3d
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d114      	bne.n	80064e2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80064b8:	6879      	ldr	r1, [r7, #4]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	4613      	mov	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	00db      	lsls	r3, r3, #3
 80064c4:	440b      	add	r3, r1
 80064c6:	333c      	adds	r3, #60	; 0x3c
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d109      	bne.n	80064e2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80064ce:	6879      	ldr	r1, [r7, #4]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	4613      	mov	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4413      	add	r3, r2
 80064d8:	00db      	lsls	r3, r3, #3
 80064da:	440b      	add	r3, r1
 80064dc:	333d      	adds	r3, #61	; 0x3d
 80064de:	2201      	movs	r2, #1
 80064e0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	0151      	lsls	r1, r2, #5
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	440a      	add	r2, r1
 80064f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064fc:	f043 0302 	orr.w	r3, r3, #2
 8006500:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	b2d2      	uxtb	r2, r2
 800650a:	4611      	mov	r1, r2
 800650c:	4618      	mov	r0, r3
 800650e:	f005 faae 	bl	800ba6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	4413      	add	r3, r2
 800651a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800651e:	461a      	mov	r2, r3
 8006520:	2310      	movs	r3, #16
 8006522:	6093      	str	r3, [r2, #8]
}
 8006524:	e19e      	b.n	8006864 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	015a      	lsls	r2, r3, #5
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	4413      	add	r3, r2
 800652e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006538:	2b80      	cmp	r3, #128	; 0x80
 800653a:	d12b      	bne.n	8006594 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	015a      	lsls	r2, r3, #5
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	4413      	add	r3, r2
 8006544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	0151      	lsls	r1, r2, #5
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	440a      	add	r2, r1
 8006552:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006556:	f043 0302 	orr.w	r3, r3, #2
 800655a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	b2d2      	uxtb	r2, r2
 8006564:	4611      	mov	r1, r2
 8006566:	4618      	mov	r0, r3
 8006568:	f005 fa81 	bl	800ba6e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800656c:	6879      	ldr	r1, [r7, #4]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	4613      	mov	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	00db      	lsls	r3, r3, #3
 8006578:	440b      	add	r3, r1
 800657a:	335d      	adds	r3, #93	; 0x5d
 800657c:	2206      	movs	r2, #6
 800657e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	015a      	lsls	r2, r3, #5
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	4413      	add	r3, r2
 8006588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800658c:	461a      	mov	r2, r3
 800658e:	2380      	movs	r3, #128	; 0x80
 8006590:	6093      	str	r3, [r2, #8]
}
 8006592:	e167      	b.n	8006864 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	4413      	add	r3, r2
 800659c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065aa:	d135      	bne.n	8006618 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	0151      	lsls	r1, r2, #5
 80065be:	693a      	ldr	r2, [r7, #16]
 80065c0:	440a      	add	r2, r1
 80065c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065c6:	f043 0302 	orr.w	r3, r3, #2
 80065ca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	b2d2      	uxtb	r2, r2
 80065d4:	4611      	mov	r1, r2
 80065d6:	4618      	mov	r0, r3
 80065d8:	f005 fa49 	bl	800ba6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	015a      	lsls	r2, r3, #5
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	4413      	add	r3, r2
 80065e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e8:	461a      	mov	r2, r3
 80065ea:	2310      	movs	r3, #16
 80065ec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	015a      	lsls	r2, r3, #5
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	4413      	add	r3, r2
 80065f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065fa:	461a      	mov	r2, r3
 80065fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006600:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006602:	6879      	ldr	r1, [r7, #4]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	4613      	mov	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	00db      	lsls	r3, r3, #3
 800660e:	440b      	add	r3, r1
 8006610:	335d      	adds	r3, #93	; 0x5d
 8006612:	2208      	movs	r2, #8
 8006614:	701a      	strb	r2, [r3, #0]
}
 8006616:	e125      	b.n	8006864 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	4413      	add	r3, r2
 8006620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f003 0302 	and.w	r3, r3, #2
 800662a:	2b02      	cmp	r3, #2
 800662c:	f040 811a 	bne.w	8006864 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	015a      	lsls	r2, r3, #5
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	4413      	add	r3, r2
 8006638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	0151      	lsls	r1, r2, #5
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	440a      	add	r2, r1
 8006646:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800664a:	f023 0302 	bic.w	r3, r3, #2
 800664e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006650:	6879      	ldr	r1, [r7, #4]
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	4613      	mov	r3, r2
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4413      	add	r3, r2
 800665a:	00db      	lsls	r3, r3, #3
 800665c:	440b      	add	r3, r1
 800665e:	335d      	adds	r3, #93	; 0x5d
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	2b01      	cmp	r3, #1
 8006664:	d137      	bne.n	80066d6 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006666:	6879      	ldr	r1, [r7, #4]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	4613      	mov	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	00db      	lsls	r3, r3, #3
 8006672:	440b      	add	r3, r1
 8006674:	335c      	adds	r3, #92	; 0x5c
 8006676:	2201      	movs	r2, #1
 8006678:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800667a:	6879      	ldr	r1, [r7, #4]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	4613      	mov	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	00db      	lsls	r3, r3, #3
 8006686:	440b      	add	r3, r1
 8006688:	333f      	adds	r3, #63	; 0x3f
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	2b02      	cmp	r3, #2
 800668e:	d00b      	beq.n	80066a8 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006690:	6879      	ldr	r1, [r7, #4]
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	4613      	mov	r3, r2
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	00db      	lsls	r3, r3, #3
 800669c:	440b      	add	r3, r1
 800669e:	333f      	adds	r3, #63	; 0x3f
 80066a0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80066a2:	2b03      	cmp	r3, #3
 80066a4:	f040 80c5 	bne.w	8006832 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80066a8:	6879      	ldr	r1, [r7, #4]
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	4613      	mov	r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	00db      	lsls	r3, r3, #3
 80066b4:	440b      	add	r3, r1
 80066b6:	3351      	adds	r3, #81	; 0x51
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	f083 0301 	eor.w	r3, r3, #1
 80066be:	b2d8      	uxtb	r0, r3
 80066c0:	6879      	ldr	r1, [r7, #4]
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	4613      	mov	r3, r2
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	4413      	add	r3, r2
 80066ca:	00db      	lsls	r3, r3, #3
 80066cc:	440b      	add	r3, r1
 80066ce:	3351      	adds	r3, #81	; 0x51
 80066d0:	4602      	mov	r2, r0
 80066d2:	701a      	strb	r2, [r3, #0]
 80066d4:	e0ad      	b.n	8006832 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80066d6:	6879      	ldr	r1, [r7, #4]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	4613      	mov	r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	00db      	lsls	r3, r3, #3
 80066e2:	440b      	add	r3, r1
 80066e4:	335d      	adds	r3, #93	; 0x5d
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	2b03      	cmp	r3, #3
 80066ea:	d10a      	bne.n	8006702 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80066ec:	6879      	ldr	r1, [r7, #4]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	4613      	mov	r3, r2
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	4413      	add	r3, r2
 80066f6:	00db      	lsls	r3, r3, #3
 80066f8:	440b      	add	r3, r1
 80066fa:	335c      	adds	r3, #92	; 0x5c
 80066fc:	2202      	movs	r2, #2
 80066fe:	701a      	strb	r2, [r3, #0]
 8006700:	e097      	b.n	8006832 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006702:	6879      	ldr	r1, [r7, #4]
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	4613      	mov	r3, r2
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	4413      	add	r3, r2
 800670c:	00db      	lsls	r3, r3, #3
 800670e:	440b      	add	r3, r1
 8006710:	335d      	adds	r3, #93	; 0x5d
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	2b04      	cmp	r3, #4
 8006716:	d10a      	bne.n	800672e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006718:	6879      	ldr	r1, [r7, #4]
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	4613      	mov	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	00db      	lsls	r3, r3, #3
 8006724:	440b      	add	r3, r1
 8006726:	335c      	adds	r3, #92	; 0x5c
 8006728:	2202      	movs	r2, #2
 800672a:	701a      	strb	r2, [r3, #0]
 800672c:	e081      	b.n	8006832 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800672e:	6879      	ldr	r1, [r7, #4]
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	4613      	mov	r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4413      	add	r3, r2
 8006738:	00db      	lsls	r3, r3, #3
 800673a:	440b      	add	r3, r1
 800673c:	335d      	adds	r3, #93	; 0x5d
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	2b05      	cmp	r3, #5
 8006742:	d10a      	bne.n	800675a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006744:	6879      	ldr	r1, [r7, #4]
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	4613      	mov	r3, r2
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	4413      	add	r3, r2
 800674e:	00db      	lsls	r3, r3, #3
 8006750:	440b      	add	r3, r1
 8006752:	335c      	adds	r3, #92	; 0x5c
 8006754:	2205      	movs	r2, #5
 8006756:	701a      	strb	r2, [r3, #0]
 8006758:	e06b      	b.n	8006832 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800675a:	6879      	ldr	r1, [r7, #4]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	4613      	mov	r3, r2
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4413      	add	r3, r2
 8006764:	00db      	lsls	r3, r3, #3
 8006766:	440b      	add	r3, r1
 8006768:	335d      	adds	r3, #93	; 0x5d
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	2b06      	cmp	r3, #6
 800676e:	d00a      	beq.n	8006786 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006770:	6879      	ldr	r1, [r7, #4]
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	4613      	mov	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4413      	add	r3, r2
 800677a:	00db      	lsls	r3, r3, #3
 800677c:	440b      	add	r3, r1
 800677e:	335d      	adds	r3, #93	; 0x5d
 8006780:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006782:	2b08      	cmp	r3, #8
 8006784:	d155      	bne.n	8006832 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8006786:	6879      	ldr	r1, [r7, #4]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	4613      	mov	r3, r2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4413      	add	r3, r2
 8006790:	00db      	lsls	r3, r3, #3
 8006792:	440b      	add	r3, r1
 8006794:	3358      	adds	r3, #88	; 0x58
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	1c59      	adds	r1, r3, #1
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	4613      	mov	r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	4413      	add	r3, r2
 80067a4:	00db      	lsls	r3, r3, #3
 80067a6:	4403      	add	r3, r0
 80067a8:	3358      	adds	r3, #88	; 0x58
 80067aa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80067ac:	6879      	ldr	r1, [r7, #4]
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	4613      	mov	r3, r2
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	00db      	lsls	r3, r3, #3
 80067b8:	440b      	add	r3, r1
 80067ba:	3358      	adds	r3, #88	; 0x58
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b03      	cmp	r3, #3
 80067c0:	d914      	bls.n	80067ec <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80067c2:	6879      	ldr	r1, [r7, #4]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	4613      	mov	r3, r2
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	4413      	add	r3, r2
 80067cc:	00db      	lsls	r3, r3, #3
 80067ce:	440b      	add	r3, r1
 80067d0:	3358      	adds	r3, #88	; 0x58
 80067d2:	2200      	movs	r2, #0
 80067d4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80067d6:	6879      	ldr	r1, [r7, #4]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	4613      	mov	r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4413      	add	r3, r2
 80067e0:	00db      	lsls	r3, r3, #3
 80067e2:	440b      	add	r3, r1
 80067e4:	335c      	adds	r3, #92	; 0x5c
 80067e6:	2204      	movs	r2, #4
 80067e8:	701a      	strb	r2, [r3, #0]
 80067ea:	e009      	b.n	8006800 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80067ec:	6879      	ldr	r1, [r7, #4]
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	4613      	mov	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4413      	add	r3, r2
 80067f6:	00db      	lsls	r3, r3, #3
 80067f8:	440b      	add	r3, r1
 80067fa:	335c      	adds	r3, #92	; 0x5c
 80067fc:	2202      	movs	r2, #2
 80067fe:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	015a      	lsls	r2, r3, #5
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	4413      	add	r3, r2
 8006808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006816:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800681e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	015a      	lsls	r2, r3, #5
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	4413      	add	r3, r2
 8006828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800682c:	461a      	mov	r2, r3
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	4413      	add	r3, r2
 800683a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800683e:	461a      	mov	r2, r3
 8006840:	2302      	movs	r3, #2
 8006842:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	b2d8      	uxtb	r0, r3
 8006848:	6879      	ldr	r1, [r7, #4]
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	4613      	mov	r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	00db      	lsls	r3, r3, #3
 8006854:	440b      	add	r3, r1
 8006856:	335c      	adds	r3, #92	; 0x5c
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	461a      	mov	r2, r3
 800685c:	4601      	mov	r1, r0
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f00b f88c 	bl	801197c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006864:	bf00      	nop
 8006866:	3718      	adds	r7, #24
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b08a      	sub	sp, #40	; 0x28
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	6a1b      	ldr	r3, [r3, #32]
 8006884:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	f003 030f 	and.w	r3, r3, #15
 800688c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	0c5b      	lsrs	r3, r3, #17
 8006892:	f003 030f 	and.w	r3, r3, #15
 8006896:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	091b      	lsrs	r3, r3, #4
 800689c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068a0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d003      	beq.n	80068b0 <HCD_RXQLVL_IRQHandler+0x44>
 80068a8:	2b05      	cmp	r3, #5
 80068aa:	f000 8082 	beq.w	80069b2 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80068ae:	e083      	b.n	80069b8 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d07f      	beq.n	80069b6 <HCD_RXQLVL_IRQHandler+0x14a>
 80068b6:	6879      	ldr	r1, [r7, #4]
 80068b8:	69ba      	ldr	r2, [r7, #24]
 80068ba:	4613      	mov	r3, r2
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4413      	add	r3, r2
 80068c0:	00db      	lsls	r3, r3, #3
 80068c2:	440b      	add	r3, r1
 80068c4:	3344      	adds	r3, #68	; 0x44
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d074      	beq.n	80069b6 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6818      	ldr	r0, [r3, #0]
 80068d0:	6879      	ldr	r1, [r7, #4]
 80068d2:	69ba      	ldr	r2, [r7, #24]
 80068d4:	4613      	mov	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	00db      	lsls	r3, r3, #3
 80068dc:	440b      	add	r3, r1
 80068de:	3344      	adds	r3, #68	; 0x44
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	b292      	uxth	r2, r2
 80068e6:	4619      	mov	r1, r3
 80068e8:	f004 fc65 	bl	800b1b6 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80068ec:	6879      	ldr	r1, [r7, #4]
 80068ee:	69ba      	ldr	r2, [r7, #24]
 80068f0:	4613      	mov	r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	00db      	lsls	r3, r3, #3
 80068f8:	440b      	add	r3, r1
 80068fa:	3344      	adds	r3, #68	; 0x44
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	18d1      	adds	r1, r2, r3
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	69ba      	ldr	r2, [r7, #24]
 8006906:	4613      	mov	r3, r2
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	4413      	add	r3, r2
 800690c:	00db      	lsls	r3, r3, #3
 800690e:	4403      	add	r3, r0
 8006910:	3344      	adds	r3, #68	; 0x44
 8006912:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8006914:	6879      	ldr	r1, [r7, #4]
 8006916:	69ba      	ldr	r2, [r7, #24]
 8006918:	4613      	mov	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	00db      	lsls	r3, r3, #3
 8006920:	440b      	add	r3, r1
 8006922:	334c      	adds	r3, #76	; 0x4c
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	18d1      	adds	r1, r2, r3
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	69ba      	ldr	r2, [r7, #24]
 800692e:	4613      	mov	r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4413      	add	r3, r2
 8006934:	00db      	lsls	r3, r3, #3
 8006936:	4403      	add	r3, r0
 8006938:	334c      	adds	r3, #76	; 0x4c
 800693a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	015a      	lsls	r2, r3, #5
 8006940:	6a3b      	ldr	r3, [r7, #32]
 8006942:	4413      	add	r3, r2
 8006944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006948:	691a      	ldr	r2, [r3, #16]
 800694a:	4b1d      	ldr	r3, [pc, #116]	; (80069c0 <HCD_RXQLVL_IRQHandler+0x154>)
 800694c:	4013      	ands	r3, r2
 800694e:	2b00      	cmp	r3, #0
 8006950:	d031      	beq.n	80069b6 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	015a      	lsls	r2, r3, #5
 8006956:	6a3b      	ldr	r3, [r7, #32]
 8006958:	4413      	add	r3, r2
 800695a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006968:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006970:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	015a      	lsls	r2, r3, #5
 8006976:	6a3b      	ldr	r3, [r7, #32]
 8006978:	4413      	add	r3, r2
 800697a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800697e:	461a      	mov	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8006984:	6879      	ldr	r1, [r7, #4]
 8006986:	69ba      	ldr	r2, [r7, #24]
 8006988:	4613      	mov	r3, r2
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	4413      	add	r3, r2
 800698e:	00db      	lsls	r3, r3, #3
 8006990:	440b      	add	r3, r1
 8006992:	3350      	adds	r3, #80	; 0x50
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	f083 0301 	eor.w	r3, r3, #1
 800699a:	b2d8      	uxtb	r0, r3
 800699c:	6879      	ldr	r1, [r7, #4]
 800699e:	69ba      	ldr	r2, [r7, #24]
 80069a0:	4613      	mov	r3, r2
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4413      	add	r3, r2
 80069a6:	00db      	lsls	r3, r3, #3
 80069a8:	440b      	add	r3, r1
 80069aa:	3350      	adds	r3, #80	; 0x50
 80069ac:	4602      	mov	r2, r0
 80069ae:	701a      	strb	r2, [r3, #0]
      break;
 80069b0:	e001      	b.n	80069b6 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80069b2:	bf00      	nop
 80069b4:	e000      	b.n	80069b8 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80069b6:	bf00      	nop
  }
}
 80069b8:	bf00      	nop
 80069ba:	3728      	adds	r7, #40	; 0x28
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	1ff80000 	.word	0x1ff80000

080069c4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80069f0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f003 0302 	and.w	r3, r3, #2
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d10b      	bne.n	8006a14 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d102      	bne.n	8006a0c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f00a ff9c 	bl	8011944 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	f043 0302 	orr.w	r3, r3, #2
 8006a12:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f003 0308 	and.w	r3, r3, #8
 8006a1a:	2b08      	cmp	r3, #8
 8006a1c:	d132      	bne.n	8006a84 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	f043 0308 	orr.w	r3, r3, #8
 8006a24:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f003 0304 	and.w	r3, r3, #4
 8006a2c:	2b04      	cmp	r3, #4
 8006a2e:	d126      	bne.n	8006a7e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d113      	bne.n	8006a60 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006a3e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a42:	d106      	bne.n	8006a52 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2102      	movs	r1, #2
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f004 fce8 	bl	800b420 <USB_InitFSLSPClkSel>
 8006a50:	e011      	b.n	8006a76 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2101      	movs	r1, #1
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f004 fce1 	bl	800b420 <USB_InitFSLSPClkSel>
 8006a5e:	e00a      	b.n	8006a76 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d106      	bne.n	8006a76 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a6e:	461a      	mov	r2, r3
 8006a70:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006a74:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f00a ff92 	bl	80119a0 <HAL_HCD_PortEnabled_Callback>
 8006a7c:	e002      	b.n	8006a84 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f00a ff9c 	bl	80119bc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f003 0320 	and.w	r3, r3, #32
 8006a8a:	2b20      	cmp	r3, #32
 8006a8c:	d103      	bne.n	8006a96 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	f043 0320 	orr.w	r3, r3, #32
 8006a94:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	6013      	str	r3, [r2, #0]
}
 8006aa2:	bf00      	nop
 8006aa4:	3718      	adds	r7, #24
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
	...

08006aac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d101      	bne.n	8006abe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e11f      	b.n	8006cfe <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d106      	bne.n	8006ad8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7fb fae8 	bl	80020a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2224      	movs	r2, #36	; 0x24
 8006adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f022 0201 	bic.w	r2, r2, #1
 8006aee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006afe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006b10:	f001 f80e 	bl	8007b30 <HAL_RCC_GetPCLK1Freq>
 8006b14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	4a7b      	ldr	r2, [pc, #492]	; (8006d08 <HAL_I2C_Init+0x25c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d807      	bhi.n	8006b30 <HAL_I2C_Init+0x84>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	4a7a      	ldr	r2, [pc, #488]	; (8006d0c <HAL_I2C_Init+0x260>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	bf94      	ite	ls
 8006b28:	2301      	movls	r3, #1
 8006b2a:	2300      	movhi	r3, #0
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	e006      	b.n	8006b3e <HAL_I2C_Init+0x92>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	4a77      	ldr	r2, [pc, #476]	; (8006d10 <HAL_I2C_Init+0x264>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	bf94      	ite	ls
 8006b38:	2301      	movls	r3, #1
 8006b3a:	2300      	movhi	r3, #0
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d001      	beq.n	8006b46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e0db      	b.n	8006cfe <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	4a72      	ldr	r2, [pc, #456]	; (8006d14 <HAL_I2C_Init+0x268>)
 8006b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b4e:	0c9b      	lsrs	r3, r3, #18
 8006b50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	430a      	orrs	r2, r1
 8006b64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	6a1b      	ldr	r3, [r3, #32]
 8006b6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	4a64      	ldr	r2, [pc, #400]	; (8006d08 <HAL_I2C_Init+0x25c>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d802      	bhi.n	8006b80 <HAL_I2C_Init+0xd4>
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	e009      	b.n	8006b94 <HAL_I2C_Init+0xe8>
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006b86:	fb02 f303 	mul.w	r3, r2, r3
 8006b8a:	4a63      	ldr	r2, [pc, #396]	; (8006d18 <HAL_I2C_Init+0x26c>)
 8006b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b90:	099b      	lsrs	r3, r3, #6
 8006b92:	3301      	adds	r3, #1
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	6812      	ldr	r2, [r2, #0]
 8006b98:	430b      	orrs	r3, r1
 8006b9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	69db      	ldr	r3, [r3, #28]
 8006ba2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006ba6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	4956      	ldr	r1, [pc, #344]	; (8006d08 <HAL_I2C_Init+0x25c>)
 8006bb0:	428b      	cmp	r3, r1
 8006bb2:	d80d      	bhi.n	8006bd0 <HAL_I2C_Init+0x124>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	1e59      	subs	r1, r3, #1
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	005b      	lsls	r3, r3, #1
 8006bbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bc8:	2b04      	cmp	r3, #4
 8006bca:	bf38      	it	cc
 8006bcc:	2304      	movcc	r3, #4
 8006bce:	e04f      	b.n	8006c70 <HAL_I2C_Init+0x1c4>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d111      	bne.n	8006bfc <HAL_I2C_Init+0x150>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	1e58      	subs	r0, r3, #1
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6859      	ldr	r1, [r3, #4]
 8006be0:	460b      	mov	r3, r1
 8006be2:	005b      	lsls	r3, r3, #1
 8006be4:	440b      	add	r3, r1
 8006be6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006bea:	3301      	adds	r3, #1
 8006bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	bf0c      	ite	eq
 8006bf4:	2301      	moveq	r3, #1
 8006bf6:	2300      	movne	r3, #0
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	e012      	b.n	8006c22 <HAL_I2C_Init+0x176>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	1e58      	subs	r0, r3, #1
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6859      	ldr	r1, [r3, #4]
 8006c04:	460b      	mov	r3, r1
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	440b      	add	r3, r1
 8006c0a:	0099      	lsls	r1, r3, #2
 8006c0c:	440b      	add	r3, r1
 8006c0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c12:	3301      	adds	r3, #1
 8006c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	bf0c      	ite	eq
 8006c1c:	2301      	moveq	r3, #1
 8006c1e:	2300      	movne	r3, #0
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d001      	beq.n	8006c2a <HAL_I2C_Init+0x17e>
 8006c26:	2301      	movs	r3, #1
 8006c28:	e022      	b.n	8006c70 <HAL_I2C_Init+0x1c4>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10e      	bne.n	8006c50 <HAL_I2C_Init+0x1a4>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	1e58      	subs	r0, r3, #1
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6859      	ldr	r1, [r3, #4]
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	005b      	lsls	r3, r3, #1
 8006c3e:	440b      	add	r3, r1
 8006c40:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c44:	3301      	adds	r3, #1
 8006c46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c4e:	e00f      	b.n	8006c70 <HAL_I2C_Init+0x1c4>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	1e58      	subs	r0, r3, #1
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6859      	ldr	r1, [r3, #4]
 8006c58:	460b      	mov	r3, r1
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	440b      	add	r3, r1
 8006c5e:	0099      	lsls	r1, r3, #2
 8006c60:	440b      	add	r3, r1
 8006c62:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c66:	3301      	adds	r3, #1
 8006c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c70:	6879      	ldr	r1, [r7, #4]
 8006c72:	6809      	ldr	r1, [r1, #0]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	69da      	ldr	r2, [r3, #28]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	431a      	orrs	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	430a      	orrs	r2, r1
 8006c92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006c9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	6911      	ldr	r1, [r2, #16]
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	68d2      	ldr	r2, [r2, #12]
 8006caa:	4311      	orrs	r1, r2
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	6812      	ldr	r2, [r2, #0]
 8006cb0:	430b      	orrs	r3, r1
 8006cb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	695a      	ldr	r2, [r3, #20]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	430a      	orrs	r2, r1
 8006cce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f042 0201 	orr.w	r2, r2, #1
 8006cde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2220      	movs	r2, #32
 8006cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	000186a0 	.word	0x000186a0
 8006d0c:	001e847f 	.word	0x001e847f
 8006d10:	003d08ff 	.word	0x003d08ff
 8006d14:	431bde83 	.word	0x431bde83
 8006d18:	10624dd3 	.word	0x10624dd3

08006d1c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b088      	sub	sp, #32
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d101      	bne.n	8006d2e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e154      	b.n	8006fd8 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d109      	bne.n	8006d4e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a98      	ldr	r2, [pc, #608]	; (8006fa8 <HAL_I2S_Init+0x28c>)
 8006d46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f7fb f9f5 	bl	8002138 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2202      	movs	r2, #2
 8006d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	69db      	ldr	r3, [r3, #28]
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	6812      	ldr	r2, [r2, #0]
 8006d60:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006d64:	f023 030f 	bic.w	r3, r3, #15
 8006d68:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2202      	movs	r2, #2
 8006d70:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	695b      	ldr	r3, [r3, #20]
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d06f      	beq.n	8006e5a <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d102      	bne.n	8006d88 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006d82:	2310      	movs	r3, #16
 8006d84:	617b      	str	r3, [r7, #20]
 8006d86:	e001      	b.n	8006d8c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006d88:	2320      	movs	r3, #32
 8006d8a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	2b20      	cmp	r3, #32
 8006d92:	d802      	bhi.n	8006d9a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	005b      	lsls	r3, r3, #1
 8006d98:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a83      	ldr	r2, [pc, #524]	; (8006fac <HAL_I2S_Init+0x290>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d004      	beq.n	8006dae <HAL_I2S_Init+0x92>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a81      	ldr	r2, [pc, #516]	; (8006fb0 <HAL_I2S_Init+0x294>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d104      	bne.n	8006db8 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8006dae:	2001      	movs	r0, #1
 8006db0:	f001 f9a4 	bl	80080fc <HAL_RCCEx_GetPeriphCLKFreq>
 8006db4:	60f8      	str	r0, [r7, #12]
 8006db6:	e003      	b.n	8006dc0 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8006db8:	2002      	movs	r0, #2
 8006dba:	f001 f99f 	bl	80080fc <HAL_RCCEx_GetPeriphCLKFreq>
 8006dbe:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dc8:	d125      	bne.n	8006e16 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d010      	beq.n	8006df4 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ddc:	4613      	mov	r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	4413      	add	r3, r2
 8006de2:	005b      	lsls	r3, r3, #1
 8006de4:	461a      	mov	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dee:	3305      	adds	r3, #5
 8006df0:	613b      	str	r3, [r7, #16]
 8006df2:	e01f      	b.n	8006e34 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	00db      	lsls	r3, r3, #3
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	fbb2 f2f3 	udiv	r2, r2, r3
 8006dfe:	4613      	mov	r3, r2
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	4413      	add	r3, r2
 8006e04:	005b      	lsls	r3, r3, #1
 8006e06:	461a      	mov	r2, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	695b      	ldr	r3, [r3, #20]
 8006e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e10:	3305      	adds	r3, #5
 8006e12:	613b      	str	r3, [r7, #16]
 8006e14:	e00e      	b.n	8006e34 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e1e:	4613      	mov	r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	005b      	lsls	r3, r3, #1
 8006e26:	461a      	mov	r2, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	695b      	ldr	r3, [r3, #20]
 8006e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e30:	3305      	adds	r3, #5
 8006e32:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	4a5f      	ldr	r2, [pc, #380]	; (8006fb4 <HAL_I2S_Init+0x298>)
 8006e38:	fba2 2303 	umull	r2, r3, r2, r3
 8006e3c:	08db      	lsrs	r3, r3, #3
 8006e3e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	085b      	lsrs	r3, r3, #1
 8006e50:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	021b      	lsls	r3, r3, #8
 8006e56:	61bb      	str	r3, [r7, #24]
 8006e58:	e003      	b.n	8006e62 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006e5a:	2302      	movs	r3, #2
 8006e5c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d902      	bls.n	8006e6e <HAL_I2S_Init+0x152>
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	2bff      	cmp	r3, #255	; 0xff
 8006e6c:	d907      	bls.n	8006e7e <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e72:	f043 0210 	orr.w	r2, r3, #16
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e0ac      	b.n	8006fd8 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	691a      	ldr	r2, [r3, #16]
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	ea42 0103 	orr.w	r1, r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	69fa      	ldr	r2, [r7, #28]
 8006e8e:	430a      	orrs	r2, r1
 8006e90:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	69db      	ldr	r3, [r3, #28]
 8006e98:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006e9c:	f023 030f 	bic.w	r3, r3, #15
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	6851      	ldr	r1, [r2, #4]
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	6892      	ldr	r2, [r2, #8]
 8006ea8:	4311      	orrs	r1, r2
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	68d2      	ldr	r2, [r2, #12]
 8006eae:	4311      	orrs	r1, r2
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	6992      	ldr	r2, [r2, #24]
 8006eb4:	430a      	orrs	r2, r1
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ec0:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	2b30      	cmp	r3, #48	; 0x30
 8006ec8:	d003      	beq.n	8006ed2 <HAL_I2S_Init+0x1b6>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	2bb0      	cmp	r3, #176	; 0xb0
 8006ed0:	d107      	bne.n	8006ee2 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	69da      	ldr	r2, [r3, #28]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ee0:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d16e      	bne.n	8006fc8 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a32      	ldr	r2, [pc, #200]	; (8006fb8 <HAL_I2S_Init+0x29c>)
 8006eee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a2d      	ldr	r2, [pc, #180]	; (8006fac <HAL_I2S_Init+0x290>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d101      	bne.n	8006efe <HAL_I2S_Init+0x1e2>
 8006efa:	4b30      	ldr	r3, [pc, #192]	; (8006fbc <HAL_I2S_Init+0x2a0>)
 8006efc:	e001      	b.n	8006f02 <HAL_I2S_Init+0x1e6>
 8006efe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f02:	69db      	ldr	r3, [r3, #28]
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	6812      	ldr	r2, [r2, #0]
 8006f08:	4928      	ldr	r1, [pc, #160]	; (8006fac <HAL_I2S_Init+0x290>)
 8006f0a:	428a      	cmp	r2, r1
 8006f0c:	d101      	bne.n	8006f12 <HAL_I2S_Init+0x1f6>
 8006f0e:	4a2b      	ldr	r2, [pc, #172]	; (8006fbc <HAL_I2S_Init+0x2a0>)
 8006f10:	e001      	b.n	8006f16 <HAL_I2S_Init+0x1fa>
 8006f12:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006f16:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006f1a:	f023 030f 	bic.w	r3, r3, #15
 8006f1e:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a21      	ldr	r2, [pc, #132]	; (8006fac <HAL_I2S_Init+0x290>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d101      	bne.n	8006f2e <HAL_I2S_Init+0x212>
 8006f2a:	4b24      	ldr	r3, [pc, #144]	; (8006fbc <HAL_I2S_Init+0x2a0>)
 8006f2c:	e001      	b.n	8006f32 <HAL_I2S_Init+0x216>
 8006f2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f32:	2202      	movs	r2, #2
 8006f34:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a1c      	ldr	r2, [pc, #112]	; (8006fac <HAL_I2S_Init+0x290>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d101      	bne.n	8006f44 <HAL_I2S_Init+0x228>
 8006f40:	4b1e      	ldr	r3, [pc, #120]	; (8006fbc <HAL_I2S_Init+0x2a0>)
 8006f42:	e001      	b.n	8006f48 <HAL_I2S_Init+0x22c>
 8006f44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f54:	d003      	beq.n	8006f5e <HAL_I2S_Init+0x242>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d103      	bne.n	8006f66 <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006f5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f62:	613b      	str	r3, [r7, #16]
 8006f64:	e001      	b.n	8006f6a <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006f66:	2300      	movs	r3, #0
 8006f68:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	b299      	uxth	r1, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8006f80:	4303      	orrs	r3, r0
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	430b      	orrs	r3, r1
 8006f86:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	897b      	ldrh	r3, [r7, #10]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006f96:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a03      	ldr	r2, [pc, #12]	; (8006fac <HAL_I2S_Init+0x290>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d10e      	bne.n	8006fc0 <HAL_I2S_Init+0x2a4>
 8006fa2:	4b06      	ldr	r3, [pc, #24]	; (8006fbc <HAL_I2S_Init+0x2a0>)
 8006fa4:	e00e      	b.n	8006fc4 <HAL_I2S_Init+0x2a8>
 8006fa6:	bf00      	nop
 8006fa8:	0800709b 	.word	0x0800709b
 8006fac:	40003800 	.word	0x40003800
 8006fb0:	40003c00 	.word	0x40003c00
 8006fb4:	cccccccd 	.word	0xcccccccd
 8006fb8:	080071b1 	.word	0x080071b1
 8006fbc:	40003400 	.word	0x40003400
 8006fc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006fc4:	897a      	ldrh	r2, [r7, #10]
 8006fc6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3720      	adds	r7, #32
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fec:	881a      	ldrh	r2, [r3, #0]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff8:	1c9a      	adds	r2, r3, #2
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007002:	b29b      	uxth	r3, r3
 8007004:	3b01      	subs	r3, #1
 8007006:	b29a      	uxth	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007010:	b29b      	uxth	r3, r3
 8007012:	2b00      	cmp	r3, #0
 8007014:	d10e      	bne.n	8007034 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	685a      	ldr	r2, [r3, #4]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007024:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2201      	movs	r2, #1
 800702a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f7fc fa28 	bl	8003484 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007034:	bf00      	nop
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68da      	ldr	r2, [r3, #12]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704e:	b292      	uxth	r2, r2
 8007050:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007056:	1c9a      	adds	r2, r3, #2
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007060:	b29b      	uxth	r3, r3
 8007062:	3b01      	subs	r3, #1
 8007064:	b29a      	uxth	r2, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800706e:	b29b      	uxth	r3, r3
 8007070:	2b00      	cmp	r3, #0
 8007072:	d10e      	bne.n	8007092 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	685a      	ldr	r2, [r3, #4]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007082:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f7fc fa1b 	bl	80034c8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007092:	bf00      	nop
 8007094:	3708      	adds	r7, #8
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b086      	sub	sp, #24
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	2b04      	cmp	r3, #4
 80070b4:	d13a      	bne.n	800712c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f003 0301 	and.w	r3, r3, #1
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d109      	bne.n	80070d4 <I2S_IRQHandler+0x3a>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ca:	2b40      	cmp	r3, #64	; 0x40
 80070cc:	d102      	bne.n	80070d4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f7ff ffb4 	bl	800703c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070da:	2b40      	cmp	r3, #64	; 0x40
 80070dc:	d126      	bne.n	800712c <I2S_IRQHandler+0x92>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	f003 0320 	and.w	r3, r3, #32
 80070e8:	2b20      	cmp	r3, #32
 80070ea:	d11f      	bne.n	800712c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	685a      	ldr	r2, [r3, #4]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80070fa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80070fc:	2300      	movs	r3, #0
 80070fe:	613b      	str	r3, [r7, #16]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	613b      	str	r3, [r7, #16]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	613b      	str	r3, [r7, #16]
 8007110:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800711e:	f043 0202 	orr.w	r2, r3, #2
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f7fc f9b6 	bl	8003498 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007132:	b2db      	uxtb	r3, r3
 8007134:	2b03      	cmp	r3, #3
 8007136:	d136      	bne.n	80071a6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	f003 0302 	and.w	r3, r3, #2
 800713e:	2b02      	cmp	r3, #2
 8007140:	d109      	bne.n	8007156 <I2S_IRQHandler+0xbc>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800714c:	2b80      	cmp	r3, #128	; 0x80
 800714e:	d102      	bne.n	8007156 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f7ff ff45 	bl	8006fe0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	f003 0308 	and.w	r3, r3, #8
 800715c:	2b08      	cmp	r3, #8
 800715e:	d122      	bne.n	80071a6 <I2S_IRQHandler+0x10c>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	f003 0320 	and.w	r3, r3, #32
 800716a:	2b20      	cmp	r3, #32
 800716c:	d11b      	bne.n	80071a6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	685a      	ldr	r2, [r3, #4]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800717c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800717e:	2300      	movs	r3, #0
 8007180:	60fb      	str	r3, [r7, #12]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	60fb      	str	r3, [r7, #12]
 800718a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007198:	f043 0204 	orr.w	r2, r3, #4
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f7fc f979 	bl	8003498 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80071a6:	bf00      	nop
 80071a8:	3718      	adds	r7, #24
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
	...

080071b0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b088      	sub	sp, #32
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4aa2      	ldr	r2, [pc, #648]	; (8007450 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d101      	bne.n	80071ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80071ca:	4ba2      	ldr	r3, [pc, #648]	; (8007454 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80071cc:	e001      	b.n	80071d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80071ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a9b      	ldr	r2, [pc, #620]	; (8007450 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d101      	bne.n	80071ec <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80071e8:	4b9a      	ldr	r3, [pc, #616]	; (8007454 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80071ea:	e001      	b.n	80071f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80071ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071fc:	d004      	beq.n	8007208 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	f040 8099 	bne.w	800733a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	f003 0302 	and.w	r3, r3, #2
 800720e:	2b02      	cmp	r3, #2
 8007210:	d107      	bne.n	8007222 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007218:	2b00      	cmp	r3, #0
 800721a:	d002      	beq.n	8007222 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 f925 	bl	800746c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	f003 0301 	and.w	r3, r3, #1
 8007228:	2b01      	cmp	r3, #1
 800722a:	d107      	bne.n	800723c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007232:	2b00      	cmp	r3, #0
 8007234:	d002      	beq.n	800723c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f9c8 	bl	80075cc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007242:	2b40      	cmp	r3, #64	; 0x40
 8007244:	d13a      	bne.n	80072bc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	f003 0320 	and.w	r3, r3, #32
 800724c:	2b00      	cmp	r3, #0
 800724e:	d035      	beq.n	80072bc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a7e      	ldr	r2, [pc, #504]	; (8007450 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d101      	bne.n	800725e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800725a:	4b7e      	ldr	r3, [pc, #504]	; (8007454 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800725c:	e001      	b.n	8007262 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800725e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007262:	685a      	ldr	r2, [r3, #4]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4979      	ldr	r1, [pc, #484]	; (8007450 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800726a:	428b      	cmp	r3, r1
 800726c:	d101      	bne.n	8007272 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800726e:	4b79      	ldr	r3, [pc, #484]	; (8007454 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007270:	e001      	b.n	8007276 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8007272:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007276:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800727a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	685a      	ldr	r2, [r3, #4]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800728a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800728c:	2300      	movs	r3, #0
 800728e:	60fb      	str	r3, [r7, #12]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	60fb      	str	r3, [r7, #12]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	60fb      	str	r3, [r7, #12]
 80072a0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ae:	f043 0202 	orr.w	r2, r3, #2
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f7fc f8ee 	bl	8003498 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	f003 0308 	and.w	r3, r3, #8
 80072c2:	2b08      	cmp	r3, #8
 80072c4:	f040 80be 	bne.w	8007444 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	f003 0320 	and.w	r3, r3, #32
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f000 80b8 	beq.w	8007444 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	685a      	ldr	r2, [r3, #4]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80072e2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a59      	ldr	r2, [pc, #356]	; (8007450 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d101      	bne.n	80072f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80072ee:	4b59      	ldr	r3, [pc, #356]	; (8007454 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80072f0:	e001      	b.n	80072f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80072f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072f6:	685a      	ldr	r2, [r3, #4]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4954      	ldr	r1, [pc, #336]	; (8007450 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80072fe:	428b      	cmp	r3, r1
 8007300:	d101      	bne.n	8007306 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8007302:	4b54      	ldr	r3, [pc, #336]	; (8007454 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007304:	e001      	b.n	800730a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8007306:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800730a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800730e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007310:	2300      	movs	r3, #0
 8007312:	60bb      	str	r3, [r7, #8]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	60bb      	str	r3, [r7, #8]
 800731c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2201      	movs	r2, #1
 8007322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800732a:	f043 0204 	orr.w	r2, r3, #4
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f7fc f8b0 	bl	8003498 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007338:	e084      	b.n	8007444 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	f003 0302 	and.w	r3, r3, #2
 8007340:	2b02      	cmp	r3, #2
 8007342:	d107      	bne.n	8007354 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800734a:	2b00      	cmp	r3, #0
 800734c:	d002      	beq.n	8007354 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f8be 	bl	80074d0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	2b01      	cmp	r3, #1
 800735c:	d107      	bne.n	800736e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007364:	2b00      	cmp	r3, #0
 8007366:	d002      	beq.n	800736e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f8fd 	bl	8007568 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007374:	2b40      	cmp	r3, #64	; 0x40
 8007376:	d12f      	bne.n	80073d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	f003 0320 	and.w	r3, r3, #32
 800737e:	2b00      	cmp	r3, #0
 8007380:	d02a      	beq.n	80073d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	685a      	ldr	r2, [r3, #4]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007390:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a2e      	ldr	r2, [pc, #184]	; (8007450 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d101      	bne.n	80073a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800739c:	4b2d      	ldr	r3, [pc, #180]	; (8007454 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800739e:	e001      	b.n	80073a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80073a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80073a4:	685a      	ldr	r2, [r3, #4]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4929      	ldr	r1, [pc, #164]	; (8007450 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80073ac:	428b      	cmp	r3, r1
 80073ae:	d101      	bne.n	80073b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80073b0:	4b28      	ldr	r3, [pc, #160]	; (8007454 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80073b2:	e001      	b.n	80073b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80073b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80073b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80073bc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2201      	movs	r2, #1
 80073c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ca:	f043 0202 	orr.w	r2, r3, #2
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f7fc f860 	bl	8003498 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	f003 0308 	and.w	r3, r3, #8
 80073de:	2b08      	cmp	r3, #8
 80073e0:	d131      	bne.n	8007446 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	f003 0320 	and.w	r3, r3, #32
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d02c      	beq.n	8007446 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a17      	ldr	r2, [pc, #92]	; (8007450 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d101      	bne.n	80073fa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80073f6:	4b17      	ldr	r3, [pc, #92]	; (8007454 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80073f8:	e001      	b.n	80073fe <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80073fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80073fe:	685a      	ldr	r2, [r3, #4]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4912      	ldr	r1, [pc, #72]	; (8007450 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007406:	428b      	cmp	r3, r1
 8007408:	d101      	bne.n	800740e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800740a:	4b12      	ldr	r3, [pc, #72]	; (8007454 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800740c:	e001      	b.n	8007412 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800740e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007412:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007416:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	685a      	ldr	r2, [r3, #4]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007426:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007434:	f043 0204 	orr.w	r2, r3, #4
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f7fc f82b 	bl	8003498 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007442:	e000      	b.n	8007446 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007444:	bf00      	nop
}
 8007446:	bf00      	nop
 8007448:	3720      	adds	r7, #32
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	40003800 	.word	0x40003800
 8007454:	40003400 	.word	0x40003400

08007458 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007478:	1c99      	adds	r1, r3, #2
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	6251      	str	r1, [r2, #36]	; 0x24
 800747e:	881a      	ldrh	r2, [r3, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800748a:	b29b      	uxth	r3, r3
 800748c:	3b01      	subs	r3, #1
 800748e:	b29a      	uxth	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007498:	b29b      	uxth	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d113      	bne.n	80074c6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	685a      	ldr	r2, [r3, #4]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80074ac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d106      	bne.n	80074c6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f7ff ffc9 	bl	8007458 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80074c6:	bf00      	nop
 80074c8:	3708      	adds	r7, #8
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
	...

080074d0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074dc:	1c99      	adds	r1, r3, #2
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	6251      	str	r1, [r2, #36]	; 0x24
 80074e2:	8819      	ldrh	r1, [r3, #0]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a1d      	ldr	r2, [pc, #116]	; (8007560 <I2SEx_TxISR_I2SExt+0x90>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d101      	bne.n	80074f2 <I2SEx_TxISR_I2SExt+0x22>
 80074ee:	4b1d      	ldr	r3, [pc, #116]	; (8007564 <I2SEx_TxISR_I2SExt+0x94>)
 80074f0:	e001      	b.n	80074f6 <I2SEx_TxISR_I2SExt+0x26>
 80074f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80074f6:	460a      	mov	r2, r1
 80074f8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074fe:	b29b      	uxth	r3, r3
 8007500:	3b01      	subs	r3, #1
 8007502:	b29a      	uxth	r2, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800750c:	b29b      	uxth	r3, r3
 800750e:	2b00      	cmp	r3, #0
 8007510:	d121      	bne.n	8007556 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a12      	ldr	r2, [pc, #72]	; (8007560 <I2SEx_TxISR_I2SExt+0x90>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d101      	bne.n	8007520 <I2SEx_TxISR_I2SExt+0x50>
 800751c:	4b11      	ldr	r3, [pc, #68]	; (8007564 <I2SEx_TxISR_I2SExt+0x94>)
 800751e:	e001      	b.n	8007524 <I2SEx_TxISR_I2SExt+0x54>
 8007520:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007524:	685a      	ldr	r2, [r3, #4]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	490d      	ldr	r1, [pc, #52]	; (8007560 <I2SEx_TxISR_I2SExt+0x90>)
 800752c:	428b      	cmp	r3, r1
 800752e:	d101      	bne.n	8007534 <I2SEx_TxISR_I2SExt+0x64>
 8007530:	4b0c      	ldr	r3, [pc, #48]	; (8007564 <I2SEx_TxISR_I2SExt+0x94>)
 8007532:	e001      	b.n	8007538 <I2SEx_TxISR_I2SExt+0x68>
 8007534:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007538:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800753c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007542:	b29b      	uxth	r3, r3
 8007544:	2b00      	cmp	r3, #0
 8007546:	d106      	bne.n	8007556 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f7ff ff81 	bl	8007458 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007556:	bf00      	nop
 8007558:	3708      	adds	r7, #8
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	40003800 	.word	0x40003800
 8007564:	40003400 	.word	0x40003400

08007568 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68d8      	ldr	r0, [r3, #12]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757a:	1c99      	adds	r1, r3, #2
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007580:	b282      	uxth	r2, r0
 8007582:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007588:	b29b      	uxth	r3, r3
 800758a:	3b01      	subs	r3, #1
 800758c:	b29a      	uxth	r2, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007596:	b29b      	uxth	r3, r3
 8007598:	2b00      	cmp	r3, #0
 800759a:	d113      	bne.n	80075c4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	685a      	ldr	r2, [r3, #4]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80075aa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d106      	bne.n	80075c4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2201      	movs	r2, #1
 80075ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f7ff ff4a 	bl	8007458 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80075c4:	bf00      	nop
 80075c6:	3708      	adds	r7, #8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a20      	ldr	r2, [pc, #128]	; (800765c <I2SEx_RxISR_I2SExt+0x90>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d101      	bne.n	80075e2 <I2SEx_RxISR_I2SExt+0x16>
 80075de:	4b20      	ldr	r3, [pc, #128]	; (8007660 <I2SEx_RxISR_I2SExt+0x94>)
 80075e0:	e001      	b.n	80075e6 <I2SEx_RxISR_I2SExt+0x1a>
 80075e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80075e6:	68d8      	ldr	r0, [r3, #12]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ec:	1c99      	adds	r1, r3, #2
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80075f2:	b282      	uxth	r2, r0
 80075f4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	3b01      	subs	r3, #1
 80075fe:	b29a      	uxth	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007608:	b29b      	uxth	r3, r3
 800760a:	2b00      	cmp	r3, #0
 800760c:	d121      	bne.n	8007652 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a12      	ldr	r2, [pc, #72]	; (800765c <I2SEx_RxISR_I2SExt+0x90>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d101      	bne.n	800761c <I2SEx_RxISR_I2SExt+0x50>
 8007618:	4b11      	ldr	r3, [pc, #68]	; (8007660 <I2SEx_RxISR_I2SExt+0x94>)
 800761a:	e001      	b.n	8007620 <I2SEx_RxISR_I2SExt+0x54>
 800761c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007620:	685a      	ldr	r2, [r3, #4]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	490d      	ldr	r1, [pc, #52]	; (800765c <I2SEx_RxISR_I2SExt+0x90>)
 8007628:	428b      	cmp	r3, r1
 800762a:	d101      	bne.n	8007630 <I2SEx_RxISR_I2SExt+0x64>
 800762c:	4b0c      	ldr	r3, [pc, #48]	; (8007660 <I2SEx_RxISR_I2SExt+0x94>)
 800762e:	e001      	b.n	8007634 <I2SEx_RxISR_I2SExt+0x68>
 8007630:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007634:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007638:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800763e:	b29b      	uxth	r3, r3
 8007640:	2b00      	cmp	r3, #0
 8007642:	d106      	bne.n	8007652 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f7ff ff03 	bl	8007458 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007652:	bf00      	nop
 8007654:	3708      	adds	r7, #8
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	40003800 	.word	0x40003800
 8007660:	40003400 	.word	0x40003400

08007664 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af02      	add	r7, sp, #8
 800766a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800766c:	f7fc fca6 	bl	8003fbc <HAL_GetTick>
 8007670:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d101      	bne.n	800767c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	e069      	b.n	8007750 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007682:	b2db      	uxtb	r3, r3
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10b      	bne.n	80076a0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f7fa fe0b 	bl	80022ac <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007696:	f241 3188 	movw	r1, #5000	; 0x1388
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 f85e 	bl	800775c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	3b01      	subs	r3, #1
 80076b0:	021a      	lsls	r2, r3, #8
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	430a      	orrs	r2, r1
 80076b8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076be:	9300      	str	r3, [sp, #0]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	2120      	movs	r1, #32
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 f856 	bl	8007778 <QSPI_WaitFlagStateUntilTimeout>
 80076cc:	4603      	mov	r3, r0
 80076ce:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80076d0:	7afb      	ldrb	r3, [r7, #11]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d137      	bne.n	8007746 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80076e0:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	6852      	ldr	r2, [r2, #4]
 80076e8:	0611      	lsls	r1, r2, #24
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	68d2      	ldr	r2, [r2, #12]
 80076ee:	4311      	orrs	r1, r2
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	69d2      	ldr	r2, [r2, #28]
 80076f4:	4311      	orrs	r1, r2
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	6a12      	ldr	r2, [r2, #32]
 80076fa:	4311      	orrs	r1, r2
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	6812      	ldr	r2, [r2, #0]
 8007700:	430b      	orrs	r3, r1
 8007702:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	685a      	ldr	r2, [r3, #4]
 800770a:	4b13      	ldr	r3, [pc, #76]	; (8007758 <HAL_QSPI_Init+0xf4>)
 800770c:	4013      	ands	r3, r2
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	6912      	ldr	r2, [r2, #16]
 8007712:	0411      	lsls	r1, r2, #16
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	6952      	ldr	r2, [r2, #20]
 8007718:	4311      	orrs	r1, r2
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	6992      	ldr	r2, [r2, #24]
 800771e:	4311      	orrs	r1, r2
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	6812      	ldr	r2, [r2, #0]
 8007724:	430b      	orrs	r3, r1
 8007726:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f042 0201 	orr.w	r2, r2, #1
 8007736:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2201      	movs	r2, #1
 8007742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800774e:	7afb      	ldrb	r3, [r7, #11]
}
 8007750:	4618      	mov	r0, r3
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	ffe0f8fe 	.word	0xffe0f8fe

0800775c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	683a      	ldr	r2, [r7, #0]
 800776a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800776c:	bf00      	nop
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	603b      	str	r3, [r7, #0]
 8007784:	4613      	mov	r3, r2
 8007786:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007788:	e01a      	b.n	80077c0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007790:	d016      	beq.n	80077c0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007792:	f7fc fc13 	bl	8003fbc <HAL_GetTick>
 8007796:	4602      	mov	r2, r0
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	69ba      	ldr	r2, [r7, #24]
 800779e:	429a      	cmp	r2, r3
 80077a0:	d302      	bcc.n	80077a8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10b      	bne.n	80077c0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2204      	movs	r2, #4
 80077ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b4:	f043 0201 	orr.w	r2, r3, #1
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	e00e      	b.n	80077de <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	689a      	ldr	r2, [r3, #8]
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	4013      	ands	r3, r2
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	bf14      	ite	ne
 80077ce:	2301      	movne	r3, #1
 80077d0:	2300      	moveq	r3, #0
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	461a      	mov	r2, r3
 80077d6:	79fb      	ldrb	r3, [r7, #7]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d1d6      	bne.n	800778a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
	...

080077e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d101      	bne.n	80077fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e0cc      	b.n	8007996 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80077fc:	4b68      	ldr	r3, [pc, #416]	; (80079a0 <HAL_RCC_ClockConfig+0x1b8>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 030f 	and.w	r3, r3, #15
 8007804:	683a      	ldr	r2, [r7, #0]
 8007806:	429a      	cmp	r2, r3
 8007808:	d90c      	bls.n	8007824 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800780a:	4b65      	ldr	r3, [pc, #404]	; (80079a0 <HAL_RCC_ClockConfig+0x1b8>)
 800780c:	683a      	ldr	r2, [r7, #0]
 800780e:	b2d2      	uxtb	r2, r2
 8007810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007812:	4b63      	ldr	r3, [pc, #396]	; (80079a0 <HAL_RCC_ClockConfig+0x1b8>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f003 030f 	and.w	r3, r3, #15
 800781a:	683a      	ldr	r2, [r7, #0]
 800781c:	429a      	cmp	r2, r3
 800781e:	d001      	beq.n	8007824 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	e0b8      	b.n	8007996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 0302 	and.w	r3, r3, #2
 800782c:	2b00      	cmp	r3, #0
 800782e:	d020      	beq.n	8007872 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0304 	and.w	r3, r3, #4
 8007838:	2b00      	cmp	r3, #0
 800783a:	d005      	beq.n	8007848 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800783c:	4b59      	ldr	r3, [pc, #356]	; (80079a4 <HAL_RCC_ClockConfig+0x1bc>)
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	4a58      	ldr	r2, [pc, #352]	; (80079a4 <HAL_RCC_ClockConfig+0x1bc>)
 8007842:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007846:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 0308 	and.w	r3, r3, #8
 8007850:	2b00      	cmp	r3, #0
 8007852:	d005      	beq.n	8007860 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007854:	4b53      	ldr	r3, [pc, #332]	; (80079a4 <HAL_RCC_ClockConfig+0x1bc>)
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	4a52      	ldr	r2, [pc, #328]	; (80079a4 <HAL_RCC_ClockConfig+0x1bc>)
 800785a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800785e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007860:	4b50      	ldr	r3, [pc, #320]	; (80079a4 <HAL_RCC_ClockConfig+0x1bc>)
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	494d      	ldr	r1, [pc, #308]	; (80079a4 <HAL_RCC_ClockConfig+0x1bc>)
 800786e:	4313      	orrs	r3, r2
 8007870:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 0301 	and.w	r3, r3, #1
 800787a:	2b00      	cmp	r3, #0
 800787c:	d044      	beq.n	8007908 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	2b01      	cmp	r3, #1
 8007884:	d107      	bne.n	8007896 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007886:	4b47      	ldr	r3, [pc, #284]	; (80079a4 <HAL_RCC_ClockConfig+0x1bc>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800788e:	2b00      	cmp	r3, #0
 8007890:	d119      	bne.n	80078c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e07f      	b.n	8007996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	2b02      	cmp	r3, #2
 800789c:	d003      	beq.n	80078a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80078a2:	2b03      	cmp	r3, #3
 80078a4:	d107      	bne.n	80078b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078a6:	4b3f      	ldr	r3, [pc, #252]	; (80079a4 <HAL_RCC_ClockConfig+0x1bc>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d109      	bne.n	80078c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e06f      	b.n	8007996 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078b6:	4b3b      	ldr	r3, [pc, #236]	; (80079a4 <HAL_RCC_ClockConfig+0x1bc>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 0302 	and.w	r3, r3, #2
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d101      	bne.n	80078c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	e067      	b.n	8007996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80078c6:	4b37      	ldr	r3, [pc, #220]	; (80079a4 <HAL_RCC_ClockConfig+0x1bc>)
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	f023 0203 	bic.w	r2, r3, #3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	4934      	ldr	r1, [pc, #208]	; (80079a4 <HAL_RCC_ClockConfig+0x1bc>)
 80078d4:	4313      	orrs	r3, r2
 80078d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80078d8:	f7fc fb70 	bl	8003fbc <HAL_GetTick>
 80078dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078de:	e00a      	b.n	80078f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078e0:	f7fc fb6c 	bl	8003fbc <HAL_GetTick>
 80078e4:	4602      	mov	r2, r0
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	1ad3      	subs	r3, r2, r3
 80078ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d901      	bls.n	80078f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80078f2:	2303      	movs	r3, #3
 80078f4:	e04f      	b.n	8007996 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078f6:	4b2b      	ldr	r3, [pc, #172]	; (80079a4 <HAL_RCC_ClockConfig+0x1bc>)
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	f003 020c 	and.w	r2, r3, #12
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	429a      	cmp	r2, r3
 8007906:	d1eb      	bne.n	80078e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007908:	4b25      	ldr	r3, [pc, #148]	; (80079a0 <HAL_RCC_ClockConfig+0x1b8>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 030f 	and.w	r3, r3, #15
 8007910:	683a      	ldr	r2, [r7, #0]
 8007912:	429a      	cmp	r2, r3
 8007914:	d20c      	bcs.n	8007930 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007916:	4b22      	ldr	r3, [pc, #136]	; (80079a0 <HAL_RCC_ClockConfig+0x1b8>)
 8007918:	683a      	ldr	r2, [r7, #0]
 800791a:	b2d2      	uxtb	r2, r2
 800791c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800791e:	4b20      	ldr	r3, [pc, #128]	; (80079a0 <HAL_RCC_ClockConfig+0x1b8>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f003 030f 	and.w	r3, r3, #15
 8007926:	683a      	ldr	r2, [r7, #0]
 8007928:	429a      	cmp	r2, r3
 800792a:	d001      	beq.n	8007930 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	e032      	b.n	8007996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 0304 	and.w	r3, r3, #4
 8007938:	2b00      	cmp	r3, #0
 800793a:	d008      	beq.n	800794e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800793c:	4b19      	ldr	r3, [pc, #100]	; (80079a4 <HAL_RCC_ClockConfig+0x1bc>)
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	4916      	ldr	r1, [pc, #88]	; (80079a4 <HAL_RCC_ClockConfig+0x1bc>)
 800794a:	4313      	orrs	r3, r2
 800794c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 0308 	and.w	r3, r3, #8
 8007956:	2b00      	cmp	r3, #0
 8007958:	d009      	beq.n	800796e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800795a:	4b12      	ldr	r3, [pc, #72]	; (80079a4 <HAL_RCC_ClockConfig+0x1bc>)
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	00db      	lsls	r3, r3, #3
 8007968:	490e      	ldr	r1, [pc, #56]	; (80079a4 <HAL_RCC_ClockConfig+0x1bc>)
 800796a:	4313      	orrs	r3, r2
 800796c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800796e:	f000 f821 	bl	80079b4 <HAL_RCC_GetSysClockFreq>
 8007972:	4601      	mov	r1, r0
 8007974:	4b0b      	ldr	r3, [pc, #44]	; (80079a4 <HAL_RCC_ClockConfig+0x1bc>)
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	091b      	lsrs	r3, r3, #4
 800797a:	f003 030f 	and.w	r3, r3, #15
 800797e:	4a0a      	ldr	r2, [pc, #40]	; (80079a8 <HAL_RCC_ClockConfig+0x1c0>)
 8007980:	5cd3      	ldrb	r3, [r2, r3]
 8007982:	fa21 f303 	lsr.w	r3, r1, r3
 8007986:	4a09      	ldr	r2, [pc, #36]	; (80079ac <HAL_RCC_ClockConfig+0x1c4>)
 8007988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800798a:	4b09      	ldr	r3, [pc, #36]	; (80079b0 <HAL_RCC_ClockConfig+0x1c8>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4618      	mov	r0, r3
 8007990:	f7fa febe 	bl	8002710 <HAL_InitTick>

  return HAL_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	40023c00 	.word	0x40023c00
 80079a4:	40023800 	.word	0x40023800
 80079a8:	080121d4 	.word	0x080121d4
 80079ac:	200000a4 	.word	0x200000a4
 80079b0:	20000100 	.word	0x20000100

080079b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079b6:	b085      	sub	sp, #20
 80079b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80079ba:	2300      	movs	r3, #0
 80079bc:	607b      	str	r3, [r7, #4]
 80079be:	2300      	movs	r3, #0
 80079c0:	60fb      	str	r3, [r7, #12]
 80079c2:	2300      	movs	r3, #0
 80079c4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80079c6:	2300      	movs	r3, #0
 80079c8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80079ca:	4b50      	ldr	r3, [pc, #320]	; (8007b0c <HAL_RCC_GetSysClockFreq+0x158>)
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	f003 030c 	and.w	r3, r3, #12
 80079d2:	2b04      	cmp	r3, #4
 80079d4:	d007      	beq.n	80079e6 <HAL_RCC_GetSysClockFreq+0x32>
 80079d6:	2b08      	cmp	r3, #8
 80079d8:	d008      	beq.n	80079ec <HAL_RCC_GetSysClockFreq+0x38>
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f040 808d 	bne.w	8007afa <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80079e0:	4b4b      	ldr	r3, [pc, #300]	; (8007b10 <HAL_RCC_GetSysClockFreq+0x15c>)
 80079e2:	60bb      	str	r3, [r7, #8]
       break;
 80079e4:	e08c      	b.n	8007b00 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80079e6:	4b4b      	ldr	r3, [pc, #300]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x160>)
 80079e8:	60bb      	str	r3, [r7, #8]
      break;
 80079ea:	e089      	b.n	8007b00 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079ec:	4b47      	ldr	r3, [pc, #284]	; (8007b0c <HAL_RCC_GetSysClockFreq+0x158>)
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079f4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80079f6:	4b45      	ldr	r3, [pc, #276]	; (8007b0c <HAL_RCC_GetSysClockFreq+0x158>)
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d023      	beq.n	8007a4a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a02:	4b42      	ldr	r3, [pc, #264]	; (8007b0c <HAL_RCC_GetSysClockFreq+0x158>)
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	099b      	lsrs	r3, r3, #6
 8007a08:	f04f 0400 	mov.w	r4, #0
 8007a0c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007a10:	f04f 0200 	mov.w	r2, #0
 8007a14:	ea03 0501 	and.w	r5, r3, r1
 8007a18:	ea04 0602 	and.w	r6, r4, r2
 8007a1c:	4a3d      	ldr	r2, [pc, #244]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x160>)
 8007a1e:	fb02 f106 	mul.w	r1, r2, r6
 8007a22:	2200      	movs	r2, #0
 8007a24:	fb02 f205 	mul.w	r2, r2, r5
 8007a28:	440a      	add	r2, r1
 8007a2a:	493a      	ldr	r1, [pc, #232]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x160>)
 8007a2c:	fba5 0101 	umull	r0, r1, r5, r1
 8007a30:	1853      	adds	r3, r2, r1
 8007a32:	4619      	mov	r1, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f04f 0400 	mov.w	r4, #0
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	4623      	mov	r3, r4
 8007a3e:	f7f8 fbef 	bl	8000220 <__aeabi_uldivmod>
 8007a42:	4603      	mov	r3, r0
 8007a44:	460c      	mov	r4, r1
 8007a46:	60fb      	str	r3, [r7, #12]
 8007a48:	e049      	b.n	8007ade <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a4a:	4b30      	ldr	r3, [pc, #192]	; (8007b0c <HAL_RCC_GetSysClockFreq+0x158>)
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	099b      	lsrs	r3, r3, #6
 8007a50:	f04f 0400 	mov.w	r4, #0
 8007a54:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007a58:	f04f 0200 	mov.w	r2, #0
 8007a5c:	ea03 0501 	and.w	r5, r3, r1
 8007a60:	ea04 0602 	and.w	r6, r4, r2
 8007a64:	4629      	mov	r1, r5
 8007a66:	4632      	mov	r2, r6
 8007a68:	f04f 0300 	mov.w	r3, #0
 8007a6c:	f04f 0400 	mov.w	r4, #0
 8007a70:	0154      	lsls	r4, r2, #5
 8007a72:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007a76:	014b      	lsls	r3, r1, #5
 8007a78:	4619      	mov	r1, r3
 8007a7a:	4622      	mov	r2, r4
 8007a7c:	1b49      	subs	r1, r1, r5
 8007a7e:	eb62 0206 	sbc.w	r2, r2, r6
 8007a82:	f04f 0300 	mov.w	r3, #0
 8007a86:	f04f 0400 	mov.w	r4, #0
 8007a8a:	0194      	lsls	r4, r2, #6
 8007a8c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007a90:	018b      	lsls	r3, r1, #6
 8007a92:	1a5b      	subs	r3, r3, r1
 8007a94:	eb64 0402 	sbc.w	r4, r4, r2
 8007a98:	f04f 0100 	mov.w	r1, #0
 8007a9c:	f04f 0200 	mov.w	r2, #0
 8007aa0:	00e2      	lsls	r2, r4, #3
 8007aa2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007aa6:	00d9      	lsls	r1, r3, #3
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	4614      	mov	r4, r2
 8007aac:	195b      	adds	r3, r3, r5
 8007aae:	eb44 0406 	adc.w	r4, r4, r6
 8007ab2:	f04f 0100 	mov.w	r1, #0
 8007ab6:	f04f 0200 	mov.w	r2, #0
 8007aba:	02a2      	lsls	r2, r4, #10
 8007abc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007ac0:	0299      	lsls	r1, r3, #10
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	4614      	mov	r4, r2
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	4621      	mov	r1, r4
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f04f 0400 	mov.w	r4, #0
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	4623      	mov	r3, r4
 8007ad4:	f7f8 fba4 	bl	8000220 <__aeabi_uldivmod>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	460c      	mov	r4, r1
 8007adc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007ade:	4b0b      	ldr	r3, [pc, #44]	; (8007b0c <HAL_RCC_GetSysClockFreq+0x158>)
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	0c1b      	lsrs	r3, r3, #16
 8007ae4:	f003 0303 	and.w	r3, r3, #3
 8007ae8:	3301      	adds	r3, #1
 8007aea:	005b      	lsls	r3, r3, #1
 8007aec:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007af6:	60bb      	str	r3, [r7, #8]
      break;
 8007af8:	e002      	b.n	8007b00 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007afa:	4b05      	ldr	r3, [pc, #20]	; (8007b10 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007afc:	60bb      	str	r3, [r7, #8]
      break;
 8007afe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b00:	68bb      	ldr	r3, [r7, #8]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3714      	adds	r7, #20
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	40023800 	.word	0x40023800
 8007b10:	00f42400 	.word	0x00f42400
 8007b14:	017d7840 	.word	0x017d7840

08007b18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b1c:	4b03      	ldr	r3, [pc, #12]	; (8007b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	200000a4 	.word	0x200000a4

08007b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007b34:	f7ff fff0 	bl	8007b18 <HAL_RCC_GetHCLKFreq>
 8007b38:	4601      	mov	r1, r0
 8007b3a:	4b05      	ldr	r3, [pc, #20]	; (8007b50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	0a9b      	lsrs	r3, r3, #10
 8007b40:	f003 0307 	and.w	r3, r3, #7
 8007b44:	4a03      	ldr	r2, [pc, #12]	; (8007b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b46:	5cd3      	ldrb	r3, [r2, r3]
 8007b48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	40023800 	.word	0x40023800
 8007b54:	080121e4 	.word	0x080121e4

08007b58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007b5c:	f7ff ffdc 	bl	8007b18 <HAL_RCC_GetHCLKFreq>
 8007b60:	4601      	mov	r1, r0
 8007b62:	4b05      	ldr	r3, [pc, #20]	; (8007b78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	0b5b      	lsrs	r3, r3, #13
 8007b68:	f003 0307 	and.w	r3, r3, #7
 8007b6c:	4a03      	ldr	r2, [pc, #12]	; (8007b7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b6e:	5cd3      	ldrb	r3, [r2, r3]
 8007b70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	40023800 	.word	0x40023800
 8007b7c:	080121e4 	.word	0x080121e4

08007b80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	220f      	movs	r2, #15
 8007b8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007b90:	4b12      	ldr	r3, [pc, #72]	; (8007bdc <HAL_RCC_GetClockConfig+0x5c>)
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	f003 0203 	and.w	r2, r3, #3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007b9c:	4b0f      	ldr	r3, [pc, #60]	; (8007bdc <HAL_RCC_GetClockConfig+0x5c>)
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007ba8:	4b0c      	ldr	r3, [pc, #48]	; (8007bdc <HAL_RCC_GetClockConfig+0x5c>)
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007bb4:	4b09      	ldr	r3, [pc, #36]	; (8007bdc <HAL_RCC_GetClockConfig+0x5c>)
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	08db      	lsrs	r3, r3, #3
 8007bba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007bc2:	4b07      	ldr	r3, [pc, #28]	; (8007be0 <HAL_RCC_GetClockConfig+0x60>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 020f 	and.w	r2, r3, #15
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	601a      	str	r2, [r3, #0]
}
 8007bce:	bf00      	nop
 8007bd0:	370c      	adds	r7, #12
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop
 8007bdc:	40023800 	.word	0x40023800
 8007be0:	40023c00 	.word	0x40023c00

08007be4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b088      	sub	sp, #32
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007bec:	2300      	movs	r3, #0
 8007bee:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 0301 	and.w	r3, r3, #1
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d010      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8007c08:	4b7a      	ldr	r3, [pc, #488]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c0e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	69db      	ldr	r3, [r3, #28]
 8007c16:	4977      	ldr	r1, [pc, #476]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	69db      	ldr	r3, [r3, #28]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d101      	bne.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8007c26:	2301      	movs	r3, #1
 8007c28:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 0302 	and.w	r3, r3, #2
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d010      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8007c36:	4b6f      	ldr	r3, [pc, #444]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c3c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a1b      	ldr	r3, [r3, #32]
 8007c44:	496b      	ldr	r1, [pc, #428]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007c46:	4313      	orrs	r3, r2
 8007c48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6a1b      	ldr	r3, [r3, #32]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d101      	bne.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8007c54:	2301      	movs	r3, #1
 8007c56:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d022      	beq.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8007c64:	4b63      	ldr	r3, [pc, #396]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c72:	4960      	ldr	r1, [pc, #384]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007c74:	4313      	orrs	r3, r2
 8007c76:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d101      	bne.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8007c82:	2301      	movs	r3, #1
 8007c84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c8e:	d10c      	bne.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8007c90:	4b58      	ldr	r3, [pc, #352]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007c92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c96:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	695b      	ldr	r3, [r3, #20]
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	021b      	lsls	r3, r3, #8
 8007ca2:	4954      	ldr	r1, [pc, #336]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d022      	beq.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8007cb6:	4b4f      	ldr	r3, [pc, #316]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cbc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cc4:	494b      	ldr	r1, [pc, #300]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d101      	bne.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cdc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ce0:	d10c      	bne.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8007ce2:	4b44      	ldr	r3, [pc, #272]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ce8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	695b      	ldr	r3, [r3, #20]
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	021b      	lsls	r3, r3, #8
 8007cf4:	493f      	ldr	r1, [pc, #252]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 0308 	and.w	r3, r3, #8
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	f000 808a 	beq.w	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	60fb      	str	r3, [r7, #12]
 8007d0e:	4b39      	ldr	r3, [pc, #228]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d12:	4a38      	ldr	r2, [pc, #224]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d18:	6413      	str	r3, [r2, #64]	; 0x40
 8007d1a:	4b36      	ldr	r3, [pc, #216]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d22:	60fb      	str	r3, [r7, #12]
 8007d24:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007d26:	4b34      	ldr	r3, [pc, #208]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a33      	ldr	r2, [pc, #204]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d30:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007d32:	f7fc f943 	bl	8003fbc <HAL_GetTick>
 8007d36:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007d38:	e008      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007d3a:	f7fc f93f 	bl	8003fbc <HAL_GetTick>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	1ad3      	subs	r3, r2, r3
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d901      	bls.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8007d48:	2303      	movs	r3, #3
 8007d4a:	e1d1      	b.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007d4c:	4b2a      	ldr	r3, [pc, #168]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d0f0      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007d58:	4b26      	ldr	r3, [pc, #152]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d60:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d02f      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d70:	697a      	ldr	r2, [r7, #20]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d028      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d76:	4b1f      	ldr	r3, [pc, #124]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d7e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007d80:	4b1e      	ldr	r3, [pc, #120]	; (8007dfc <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8007d82:	2201      	movs	r2, #1
 8007d84:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007d86:	4b1d      	ldr	r3, [pc, #116]	; (8007dfc <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8007d88:	2200      	movs	r2, #0
 8007d8a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007d8c:	4a19      	ldr	r2, [pc, #100]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007d92:	4b18      	ldr	r3, [pc, #96]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d114      	bne.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007d9e:	f7fc f90d 	bl	8003fbc <HAL_GetTick>
 8007da2:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007da4:	e00a      	b.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007da6:	f7fc f909 	bl	8003fbc <HAL_GetTick>
 8007daa:	4602      	mov	r2, r0
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	1ad3      	subs	r3, r2, r3
 8007db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d901      	bls.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8007db8:	2303      	movs	r3, #3
 8007dba:	e199      	b.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dbc:	4b0d      	ldr	r3, [pc, #52]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dc0:	f003 0302 	and.w	r3, r3, #2
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d0ee      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dd4:	d114      	bne.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8007dd6:	4b07      	ldr	r3, [pc, #28]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007de6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dea:	4902      	ldr	r1, [pc, #8]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007dec:	4313      	orrs	r3, r2
 8007dee:	608b      	str	r3, [r1, #8]
 8007df0:	e00c      	b.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x228>
 8007df2:	bf00      	nop
 8007df4:	40023800 	.word	0x40023800
 8007df8:	40007000 	.word	0x40007000
 8007dfc:	42470e40 	.word	0x42470e40
 8007e00:	4b89      	ldr	r3, [pc, #548]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	4a88      	ldr	r2, [pc, #544]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007e06:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007e0a:	6093      	str	r3, [r2, #8]
 8007e0c:	4b86      	ldr	r3, [pc, #536]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007e0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e18:	4983      	ldr	r1, [pc, #524]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 0304 	and.w	r3, r3, #4
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d004      	beq.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8007e30:	4b7e      	ldr	r3, [pc, #504]	; (800802c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8007e32:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f003 0310 	and.w	r3, r3, #16
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00a      	beq.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8007e40:	4b79      	ldr	r3, [pc, #484]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007e42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4e:	4976      	ldr	r1, [pc, #472]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007e50:	4313      	orrs	r3, r2
 8007e52:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 0320 	and.w	r3, r3, #32
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d011      	beq.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007e62:	4b71      	ldr	r3, [pc, #452]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e68:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e70:	496d      	ldr	r1, [pc, #436]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e80:	d101      	bne.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8007e82:	2301      	movs	r3, #1
 8007e84:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00a      	beq.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8007e92:	4b65      	ldr	r3, [pc, #404]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007e94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e98:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea0:	4961      	ldr	r1, [pc, #388]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d004      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2b80      	cmp	r3, #128	; 0x80
 8007eb4:	f040 80c6 	bne.w	8008044 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007eb8:	4b5d      	ldr	r3, [pc, #372]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8007eba:	2200      	movs	r2, #0
 8007ebc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007ebe:	f7fc f87d 	bl	8003fbc <HAL_GetTick>
 8007ec2:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ec4:	e008      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007ec6:	f7fc f879 	bl	8003fbc <HAL_GetTick>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	1ad3      	subs	r3, r2, r3
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	d901      	bls.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ed4:	2303      	movs	r3, #3
 8007ed6:	e10b      	b.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ed8:	4b53      	ldr	r3, [pc, #332]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d1f0      	bne.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8007ee4:	4a53      	ldr	r2, [pc, #332]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eea:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f003 0301 	and.w	r3, r3, #1
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d003      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	69db      	ldr	r3, [r3, #28]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d023      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d003      	beq.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6a1b      	ldr	r3, [r3, #32]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d019      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d004      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f28:	d00e      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d019      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d115      	bne.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x386>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f46:	d110      	bne.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	685a      	ldr	r2, [r3, #4]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	019b      	lsls	r3, r3, #6
 8007f52:	431a      	orrs	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	061b      	lsls	r3, r3, #24
 8007f5a:	431a      	orrs	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	691b      	ldr	r3, [r3, #16]
 8007f60:	071b      	lsls	r3, r3, #28
 8007f62:	4931      	ldr	r1, [pc, #196]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007f64:	4313      	orrs	r3, r2
 8007f66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d003      	beq.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d009      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d026      	beq.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d122      	bne.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007f92:	4b25      	ldr	r3, [pc, #148]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f98:	0e1b      	lsrs	r3, r3, #24
 8007f9a:	f003 030f 	and.w	r3, r3, #15
 8007f9e:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	685a      	ldr	r2, [r3, #4]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	019b      	lsls	r3, r3, #6
 8007faa:	431a      	orrs	r2, r3
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	061b      	lsls	r3, r3, #24
 8007fb0:	431a      	orrs	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	071b      	lsls	r3, r3, #28
 8007fb8:	491b      	ldr	r1, [pc, #108]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8007fc0:	4b19      	ldr	r3, [pc, #100]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007fc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fc6:	f023 021f 	bic.w	r2, r3, #31
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	699b      	ldr	r3, [r3, #24]
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	4915      	ldr	r1, [pc, #84]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d010      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	685a      	ldr	r2, [r3, #4]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	019b      	lsls	r3, r3, #6
 8007fee:	431a      	orrs	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	061b      	lsls	r3, r3, #24
 8007ff6:	431a      	orrs	r2, r3
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	071b      	lsls	r3, r3, #28
 8007ffe:	490a      	ldr	r1, [pc, #40]	; (8008028 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008000:	4313      	orrs	r3, r2
 8008002:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008006:	4b0a      	ldr	r3, [pc, #40]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8008008:	2201      	movs	r2, #1
 800800a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800800c:	f7fb ffd6 	bl	8003fbc <HAL_GetTick>
 8008010:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008012:	e011      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008014:	f7fb ffd2 	bl	8003fbc <HAL_GetTick>
 8008018:	4602      	mov	r2, r0
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	1ad3      	subs	r3, r2, r3
 800801e:	2b02      	cmp	r3, #2
 8008020:	d90a      	bls.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008022:	2303      	movs	r3, #3
 8008024:	e064      	b.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8008026:	bf00      	nop
 8008028:	40023800 	.word	0x40023800
 800802c:	424711e0 	.word	0x424711e0
 8008030:	42470068 	.word	0x42470068
 8008034:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008038:	4b2f      	ldr	r3, [pc, #188]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008040:	2b00      	cmp	r3, #0
 8008042:	d0e7      	beq.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00a      	beq.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008050:	4b29      	ldr	r3, [pc, #164]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8008052:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008056:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800805e:	4926      	ldr	r1, [pc, #152]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8008060:	4313      	orrs	r3, r2
 8008062:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00a      	beq.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008072:	4b21      	ldr	r3, [pc, #132]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8008074:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008078:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008080:	491d      	ldr	r1, [pc, #116]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8008082:	4313      	orrs	r3, r2
 8008084:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008090:	2b00      	cmp	r3, #0
 8008092:	d00a      	beq.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8008094:	4b18      	ldr	r3, [pc, #96]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8008096:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800809a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080a2:	4915      	ldr	r1, [pc, #84]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80080a4:	4313      	orrs	r3, r2
 80080a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00a      	beq.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 80080b6:	4b10      	ldr	r3, [pc, #64]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80080b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080bc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c4:	490c      	ldr	r1, [pc, #48]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80080c6:	4313      	orrs	r3, r2
 80080c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00a      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80080d8:	4b07      	ldr	r3, [pc, #28]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80080da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080de:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080e6:	4904      	ldr	r1, [pc, #16]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80080e8:	4313      	orrs	r3, r2
 80080ea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3720      	adds	r7, #32
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	40023800 	.word	0x40023800

080080fc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b087      	sub	sp, #28
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8008104:	2300      	movs	r3, #0
 8008106:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8008108:	2300      	movs	r3, #0
 800810a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800810c:	2300      	movs	r3, #0
 800810e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8008110:	2300      	movs	r3, #0
 8008112:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2b01      	cmp	r3, #1
 8008118:	d003      	beq.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 800811a:	2b02      	cmp	r3, #2
 800811c:	f000 8098 	beq.w	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8008120:	e12d      	b.n	800837e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8008122:	4b9a      	ldr	r3, [pc, #616]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008128:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800812c:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008134:	d00c      	beq.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8008136:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800813a:	d802      	bhi.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00a      	beq.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8008140:	e082      	b.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8008142:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008146:	d047      	beq.n	80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8008148:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800814c:	d06f      	beq.n	800822e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 800814e:	e07b      	b.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8008150:	4b8f      	ldr	r3, [pc, #572]	; (8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008152:	617b      	str	r3, [r7, #20]
          break;
 8008154:	e07b      	b.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8008156:	4b8d      	ldr	r3, [pc, #564]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008158:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800815c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008160:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008164:	d109      	bne.n	800817a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008166:	4b89      	ldr	r3, [pc, #548]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800816c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008170:	4a87      	ldr	r2, [pc, #540]	; (8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008172:	fbb2 f3f3 	udiv	r3, r2, r3
 8008176:	613b      	str	r3, [r7, #16]
 8008178:	e019      	b.n	80081ae <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800817a:	4b84      	ldr	r3, [pc, #528]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008182:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008186:	d109      	bne.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008188:	4b80      	ldr	r3, [pc, #512]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800818a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800818e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008192:	4a80      	ldr	r2, [pc, #512]	; (8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008194:	fbb2 f3f3 	udiv	r3, r2, r3
 8008198:	613b      	str	r3, [r7, #16]
 800819a:	e008      	b.n	80081ae <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800819c:	4b7b      	ldr	r3, [pc, #492]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800819e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081a6:	4a7c      	ldr	r2, [pc, #496]	; (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80081a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ac:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80081ae:	4b77      	ldr	r3, [pc, #476]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80081b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081b4:	099b      	lsrs	r3, r3, #6
 80081b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	fb02 f303 	mul.w	r3, r2, r3
 80081c0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80081c2:	4b72      	ldr	r3, [pc, #456]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80081c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081c8:	0f1b      	lsrs	r3, r3, #28
 80081ca:	f003 0307 	and.w	r3, r3, #7
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081d4:	617b      	str	r3, [r7, #20]
          break;
 80081d6:	e03a      	b.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80081d8:	4b6c      	ldr	r3, [pc, #432]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081e4:	d108      	bne.n	80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80081e6:	4b69      	ldr	r3, [pc, #420]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081ee:	4a69      	ldr	r2, [pc, #420]	; (8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80081f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f4:	613b      	str	r3, [r7, #16]
 80081f6:	e007      	b.n	8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80081f8:	4b64      	ldr	r3, [pc, #400]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008200:	4a65      	ldr	r2, [pc, #404]	; (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008202:	fbb2 f3f3 	udiv	r3, r2, r3
 8008206:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8008208:	4b60      	ldr	r3, [pc, #384]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	099b      	lsrs	r3, r3, #6
 800820e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	fb02 f303 	mul.w	r3, r2, r3
 8008218:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800821a:	4b5c      	ldr	r3, [pc, #368]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	0f1b      	lsrs	r3, r3, #28
 8008220:	f003 0307 	and.w	r3, r3, #7
 8008224:	68ba      	ldr	r2, [r7, #8]
 8008226:	fbb2 f3f3 	udiv	r3, r2, r3
 800822a:	617b      	str	r3, [r7, #20]
          break;
 800822c:	e00f      	b.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800822e:	4b57      	ldr	r3, [pc, #348]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008236:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800823a:	d102      	bne.n	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            frequency = HSE_VALUE;
 800823c:	4b55      	ldr	r3, [pc, #340]	; (8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800823e:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8008240:	e005      	b.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
            frequency = HSI_VALUE;
 8008242:	4b55      	ldr	r3, [pc, #340]	; (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008244:	617b      	str	r3, [r7, #20]
          break;
 8008246:	e002      	b.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8008248:	2300      	movs	r3, #0
 800824a:	617b      	str	r3, [r7, #20]
          break;
 800824c:	bf00      	nop
        }
      }
      break;
 800824e:	e096      	b.n	800837e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8008250:	4b4e      	ldr	r3, [pc, #312]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008252:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008256:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 800825a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008262:	d00c      	beq.n	800827e <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8008264:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008268:	d802      	bhi.n	8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00a      	beq.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800826e:	e082      	b.n	8008376 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8008270:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008274:	d047      	beq.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8008276:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800827a:	d06f      	beq.n	800835c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800827c:	e07b      	b.n	8008376 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800827e:	4b44      	ldr	r3, [pc, #272]	; (8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008280:	617b      	str	r3, [r7, #20]
          break;
 8008282:	e07b      	b.n	800837c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8008284:	4b41      	ldr	r3, [pc, #260]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800828a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800828e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008292:	d109      	bne.n	80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008294:	4b3d      	ldr	r3, [pc, #244]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800829a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800829e:	4a3c      	ldr	r2, [pc, #240]	; (8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80082a4:	613b      	str	r3, [r7, #16]
 80082a6:	e019      	b.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80082a8:	4b38      	ldr	r3, [pc, #224]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082b4:	d109      	bne.n	80082ca <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80082b6:	4b35      	ldr	r3, [pc, #212]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80082b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082c0:	4a34      	ldr	r2, [pc, #208]	; (8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80082c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80082c6:	613b      	str	r3, [r7, #16]
 80082c8:	e008      	b.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80082ca:	4b30      	ldr	r3, [pc, #192]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80082cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082d4:	4a30      	ldr	r2, [pc, #192]	; (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80082d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80082da:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80082dc:	4b2b      	ldr	r3, [pc, #172]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80082de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082e2:	099b      	lsrs	r3, r3, #6
 80082e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	fb02 f303 	mul.w	r3, r2, r3
 80082ee:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80082f0:	4b26      	ldr	r3, [pc, #152]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80082f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082f6:	0f1b      	lsrs	r3, r3, #28
 80082f8:	f003 0307 	and.w	r3, r3, #7
 80082fc:	68ba      	ldr	r2, [r7, #8]
 80082fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008302:	617b      	str	r3, [r7, #20]
          break;
 8008304:	e03a      	b.n	800837c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008306:	4b21      	ldr	r3, [pc, #132]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800830e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008312:	d108      	bne.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008314:	4b1d      	ldr	r3, [pc, #116]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800831c:	4a1d      	ldr	r2, [pc, #116]	; (8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800831e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008322:	613b      	str	r3, [r7, #16]
 8008324:	e007      	b.n	8008336 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008326:	4b19      	ldr	r3, [pc, #100]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800832e:	4a1a      	ldr	r2, [pc, #104]	; (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008330:	fbb2 f3f3 	udiv	r3, r2, r3
 8008334:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8008336:	4b15      	ldr	r3, [pc, #84]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	099b      	lsrs	r3, r3, #6
 800833c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	fb02 f303 	mul.w	r3, r2, r3
 8008346:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8008348:	4b10      	ldr	r3, [pc, #64]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	0f1b      	lsrs	r3, r3, #28
 800834e:	f003 0307 	and.w	r3, r3, #7
 8008352:	68ba      	ldr	r2, [r7, #8]
 8008354:	fbb2 f3f3 	udiv	r3, r2, r3
 8008358:	617b      	str	r3, [r7, #20]
          break;
 800835a:	e00f      	b.n	800837c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800835c:	4b0b      	ldr	r3, [pc, #44]	; (800838c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008364:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008368:	d102      	bne.n	8008370 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          {
            frequency = HSE_VALUE;
 800836a:	4b0a      	ldr	r3, [pc, #40]	; (8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800836c:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800836e:	e005      	b.n	800837c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
            frequency = HSI_VALUE;
 8008370:	4b09      	ldr	r3, [pc, #36]	; (8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008372:	617b      	str	r3, [r7, #20]
          break;
 8008374:	e002      	b.n	800837c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8008376:	2300      	movs	r3, #0
 8008378:	617b      	str	r3, [r7, #20]
          break;
 800837a:	bf00      	nop
        }
      }
      break;
 800837c:	bf00      	nop
    }
  }
  return frequency;
 800837e:	697b      	ldr	r3, [r7, #20]
}
 8008380:	4618      	mov	r0, r3
 8008382:	371c      	adds	r7, #28
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr
 800838c:	40023800 	.word	0x40023800
 8008390:	00bb8000 	.word	0x00bb8000
 8008394:	017d7840 	.word	0x017d7840
 8008398:	00f42400 	.word	0x00f42400

0800839c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b086      	sub	sp, #24
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80083a4:	2300      	movs	r3, #0
 80083a6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f003 0301 	and.w	r3, r3, #1
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d075      	beq.n	80084a0 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80083b4:	4ba2      	ldr	r3, [pc, #648]	; (8008640 <HAL_RCC_OscConfig+0x2a4>)
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	f003 030c 	and.w	r3, r3, #12
 80083bc:	2b04      	cmp	r3, #4
 80083be:	d00c      	beq.n	80083da <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80083c0:	4b9f      	ldr	r3, [pc, #636]	; (8008640 <HAL_RCC_OscConfig+0x2a4>)
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80083c8:	2b08      	cmp	r3, #8
 80083ca:	d112      	bne.n	80083f2 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80083cc:	4b9c      	ldr	r3, [pc, #624]	; (8008640 <HAL_RCC_OscConfig+0x2a4>)
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083d8:	d10b      	bne.n	80083f2 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083da:	4b99      	ldr	r3, [pc, #612]	; (8008640 <HAL_RCC_OscConfig+0x2a4>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d05b      	beq.n	800849e <HAL_RCC_OscConfig+0x102>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d157      	bne.n	800849e <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e20b      	b.n	800880a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083fa:	d106      	bne.n	800840a <HAL_RCC_OscConfig+0x6e>
 80083fc:	4b90      	ldr	r3, [pc, #576]	; (8008640 <HAL_RCC_OscConfig+0x2a4>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a8f      	ldr	r2, [pc, #572]	; (8008640 <HAL_RCC_OscConfig+0x2a4>)
 8008402:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008406:	6013      	str	r3, [r2, #0]
 8008408:	e01d      	b.n	8008446 <HAL_RCC_OscConfig+0xaa>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008412:	d10c      	bne.n	800842e <HAL_RCC_OscConfig+0x92>
 8008414:	4b8a      	ldr	r3, [pc, #552]	; (8008640 <HAL_RCC_OscConfig+0x2a4>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a89      	ldr	r2, [pc, #548]	; (8008640 <HAL_RCC_OscConfig+0x2a4>)
 800841a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800841e:	6013      	str	r3, [r2, #0]
 8008420:	4b87      	ldr	r3, [pc, #540]	; (8008640 <HAL_RCC_OscConfig+0x2a4>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a86      	ldr	r2, [pc, #536]	; (8008640 <HAL_RCC_OscConfig+0x2a4>)
 8008426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800842a:	6013      	str	r3, [r2, #0]
 800842c:	e00b      	b.n	8008446 <HAL_RCC_OscConfig+0xaa>
 800842e:	4b84      	ldr	r3, [pc, #528]	; (8008640 <HAL_RCC_OscConfig+0x2a4>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a83      	ldr	r2, [pc, #524]	; (8008640 <HAL_RCC_OscConfig+0x2a4>)
 8008434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008438:	6013      	str	r3, [r2, #0]
 800843a:	4b81      	ldr	r3, [pc, #516]	; (8008640 <HAL_RCC_OscConfig+0x2a4>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a80      	ldr	r2, [pc, #512]	; (8008640 <HAL_RCC_OscConfig+0x2a4>)
 8008440:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008444:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d013      	beq.n	8008476 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800844e:	f7fb fdb5 	bl	8003fbc <HAL_GetTick>
 8008452:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008454:	e008      	b.n	8008468 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008456:	f7fb fdb1 	bl	8003fbc <HAL_GetTick>
 800845a:	4602      	mov	r2, r0
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	1ad3      	subs	r3, r2, r3
 8008460:	2b64      	cmp	r3, #100	; 0x64
 8008462:	d901      	bls.n	8008468 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8008464:	2303      	movs	r3, #3
 8008466:	e1d0      	b.n	800880a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008468:	4b75      	ldr	r3, [pc, #468]	; (8008640 <HAL_RCC_OscConfig+0x2a4>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008470:	2b00      	cmp	r3, #0
 8008472:	d0f0      	beq.n	8008456 <HAL_RCC_OscConfig+0xba>
 8008474:	e014      	b.n	80084a0 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008476:	f7fb fda1 	bl	8003fbc <HAL_GetTick>
 800847a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800847c:	e008      	b.n	8008490 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800847e:	f7fb fd9d 	bl	8003fbc <HAL_GetTick>
 8008482:	4602      	mov	r2, r0
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	1ad3      	subs	r3, r2, r3
 8008488:	2b64      	cmp	r3, #100	; 0x64
 800848a:	d901      	bls.n	8008490 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800848c:	2303      	movs	r3, #3
 800848e:	e1bc      	b.n	800880a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008490:	4b6b      	ldr	r3, [pc, #428]	; (8008640 <HAL_RCC_OscConfig+0x2a4>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008498:	2b00      	cmp	r3, #0
 800849a:	d1f0      	bne.n	800847e <HAL_RCC_OscConfig+0xe2>
 800849c:	e000      	b.n	80084a0 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800849e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 0302 	and.w	r3, r3, #2
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d063      	beq.n	8008574 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80084ac:	4b64      	ldr	r3, [pc, #400]	; (8008640 <HAL_RCC_OscConfig+0x2a4>)
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	f003 030c 	and.w	r3, r3, #12
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00b      	beq.n	80084d0 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80084b8:	4b61      	ldr	r3, [pc, #388]	; (8008640 <HAL_RCC_OscConfig+0x2a4>)
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80084c0:	2b08      	cmp	r3, #8
 80084c2:	d11c      	bne.n	80084fe <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80084c4:	4b5e      	ldr	r3, [pc, #376]	; (8008640 <HAL_RCC_OscConfig+0x2a4>)
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d116      	bne.n	80084fe <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084d0:	4b5b      	ldr	r3, [pc, #364]	; (8008640 <HAL_RCC_OscConfig+0x2a4>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 0302 	and.w	r3, r3, #2
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d005      	beq.n	80084e8 <HAL_RCC_OscConfig+0x14c>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d001      	beq.n	80084e8 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e190      	b.n	800880a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084e8:	4b55      	ldr	r3, [pc, #340]	; (8008640 <HAL_RCC_OscConfig+0x2a4>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	00db      	lsls	r3, r3, #3
 80084f6:	4952      	ldr	r1, [pc, #328]	; (8008640 <HAL_RCC_OscConfig+0x2a4>)
 80084f8:	4313      	orrs	r3, r2
 80084fa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084fc:	e03a      	b.n	8008574 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d020      	beq.n	8008548 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008506:	4b4f      	ldr	r3, [pc, #316]	; (8008644 <HAL_RCC_OscConfig+0x2a8>)
 8008508:	2201      	movs	r2, #1
 800850a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800850c:	f7fb fd56 	bl	8003fbc <HAL_GetTick>
 8008510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008512:	e008      	b.n	8008526 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008514:	f7fb fd52 	bl	8003fbc <HAL_GetTick>
 8008518:	4602      	mov	r2, r0
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	1ad3      	subs	r3, r2, r3
 800851e:	2b02      	cmp	r3, #2
 8008520:	d901      	bls.n	8008526 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8008522:	2303      	movs	r3, #3
 8008524:	e171      	b.n	800880a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008526:	4b46      	ldr	r3, [pc, #280]	; (8008640 <HAL_RCC_OscConfig+0x2a4>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f003 0302 	and.w	r3, r3, #2
 800852e:	2b00      	cmp	r3, #0
 8008530:	d0f0      	beq.n	8008514 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008532:	4b43      	ldr	r3, [pc, #268]	; (8008640 <HAL_RCC_OscConfig+0x2a4>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	00db      	lsls	r3, r3, #3
 8008540:	493f      	ldr	r1, [pc, #252]	; (8008640 <HAL_RCC_OscConfig+0x2a4>)
 8008542:	4313      	orrs	r3, r2
 8008544:	600b      	str	r3, [r1, #0]
 8008546:	e015      	b.n	8008574 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008548:	4b3e      	ldr	r3, [pc, #248]	; (8008644 <HAL_RCC_OscConfig+0x2a8>)
 800854a:	2200      	movs	r2, #0
 800854c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800854e:	f7fb fd35 	bl	8003fbc <HAL_GetTick>
 8008552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008554:	e008      	b.n	8008568 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008556:	f7fb fd31 	bl	8003fbc <HAL_GetTick>
 800855a:	4602      	mov	r2, r0
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	2b02      	cmp	r3, #2
 8008562:	d901      	bls.n	8008568 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8008564:	2303      	movs	r3, #3
 8008566:	e150      	b.n	800880a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008568:	4b35      	ldr	r3, [pc, #212]	; (8008640 <HAL_RCC_OscConfig+0x2a4>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f003 0302 	and.w	r3, r3, #2
 8008570:	2b00      	cmp	r3, #0
 8008572:	d1f0      	bne.n	8008556 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f003 0308 	and.w	r3, r3, #8
 800857c:	2b00      	cmp	r3, #0
 800857e:	d030      	beq.n	80085e2 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	695b      	ldr	r3, [r3, #20]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d016      	beq.n	80085b6 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008588:	4b2f      	ldr	r3, [pc, #188]	; (8008648 <HAL_RCC_OscConfig+0x2ac>)
 800858a:	2201      	movs	r2, #1
 800858c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800858e:	f7fb fd15 	bl	8003fbc <HAL_GetTick>
 8008592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008594:	e008      	b.n	80085a8 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008596:	f7fb fd11 	bl	8003fbc <HAL_GetTick>
 800859a:	4602      	mov	r2, r0
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	1ad3      	subs	r3, r2, r3
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	d901      	bls.n	80085a8 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80085a4:	2303      	movs	r3, #3
 80085a6:	e130      	b.n	800880a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085a8:	4b25      	ldr	r3, [pc, #148]	; (8008640 <HAL_RCC_OscConfig+0x2a4>)
 80085aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085ac:	f003 0302 	and.w	r3, r3, #2
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d0f0      	beq.n	8008596 <HAL_RCC_OscConfig+0x1fa>
 80085b4:	e015      	b.n	80085e2 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80085b6:	4b24      	ldr	r3, [pc, #144]	; (8008648 <HAL_RCC_OscConfig+0x2ac>)
 80085b8:	2200      	movs	r2, #0
 80085ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085bc:	f7fb fcfe 	bl	8003fbc <HAL_GetTick>
 80085c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085c2:	e008      	b.n	80085d6 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80085c4:	f7fb fcfa 	bl	8003fbc <HAL_GetTick>
 80085c8:	4602      	mov	r2, r0
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	d901      	bls.n	80085d6 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 80085d2:	2303      	movs	r3, #3
 80085d4:	e119      	b.n	800880a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085d6:	4b1a      	ldr	r3, [pc, #104]	; (8008640 <HAL_RCC_OscConfig+0x2a4>)
 80085d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085da:	f003 0302 	and.w	r3, r3, #2
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d1f0      	bne.n	80085c4 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f003 0304 	and.w	r3, r3, #4
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	f000 809f 	beq.w	800872e <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 80085f0:	2300      	movs	r3, #0
 80085f2:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80085f4:	4b12      	ldr	r3, [pc, #72]	; (8008640 <HAL_RCC_OscConfig+0x2a4>)
 80085f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d10f      	bne.n	8008620 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008600:	2300      	movs	r3, #0
 8008602:	60fb      	str	r3, [r7, #12]
 8008604:	4b0e      	ldr	r3, [pc, #56]	; (8008640 <HAL_RCC_OscConfig+0x2a4>)
 8008606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008608:	4a0d      	ldr	r2, [pc, #52]	; (8008640 <HAL_RCC_OscConfig+0x2a4>)
 800860a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800860e:	6413      	str	r3, [r2, #64]	; 0x40
 8008610:	4b0b      	ldr	r3, [pc, #44]	; (8008640 <HAL_RCC_OscConfig+0x2a4>)
 8008612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008618:	60fb      	str	r3, [r7, #12]
 800861a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800861c:	2301      	movs	r3, #1
 800861e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008620:	4b0a      	ldr	r3, [pc, #40]	; (800864c <HAL_RCC_OscConfig+0x2b0>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008628:	2b00      	cmp	r3, #0
 800862a:	d120      	bne.n	800866e <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800862c:	4b07      	ldr	r3, [pc, #28]	; (800864c <HAL_RCC_OscConfig+0x2b0>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a06      	ldr	r2, [pc, #24]	; (800864c <HAL_RCC_OscConfig+0x2b0>)
 8008632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008636:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008638:	f7fb fcc0 	bl	8003fbc <HAL_GetTick>
 800863c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800863e:	e010      	b.n	8008662 <HAL_RCC_OscConfig+0x2c6>
 8008640:	40023800 	.word	0x40023800
 8008644:	42470000 	.word	0x42470000
 8008648:	42470e80 	.word	0x42470e80
 800864c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008650:	f7fb fcb4 	bl	8003fbc <HAL_GetTick>
 8008654:	4602      	mov	r2, r0
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	2b02      	cmp	r3, #2
 800865c:	d901      	bls.n	8008662 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800865e:	2303      	movs	r3, #3
 8008660:	e0d3      	b.n	800880a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008662:	4b6c      	ldr	r3, [pc, #432]	; (8008814 <HAL_RCC_OscConfig+0x478>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800866a:	2b00      	cmp	r3, #0
 800866c:	d0f0      	beq.n	8008650 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	2b01      	cmp	r3, #1
 8008674:	d106      	bne.n	8008684 <HAL_RCC_OscConfig+0x2e8>
 8008676:	4b68      	ldr	r3, [pc, #416]	; (8008818 <HAL_RCC_OscConfig+0x47c>)
 8008678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800867a:	4a67      	ldr	r2, [pc, #412]	; (8008818 <HAL_RCC_OscConfig+0x47c>)
 800867c:	f043 0301 	orr.w	r3, r3, #1
 8008680:	6713      	str	r3, [r2, #112]	; 0x70
 8008682:	e01c      	b.n	80086be <HAL_RCC_OscConfig+0x322>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	2b05      	cmp	r3, #5
 800868a:	d10c      	bne.n	80086a6 <HAL_RCC_OscConfig+0x30a>
 800868c:	4b62      	ldr	r3, [pc, #392]	; (8008818 <HAL_RCC_OscConfig+0x47c>)
 800868e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008690:	4a61      	ldr	r2, [pc, #388]	; (8008818 <HAL_RCC_OscConfig+0x47c>)
 8008692:	f043 0304 	orr.w	r3, r3, #4
 8008696:	6713      	str	r3, [r2, #112]	; 0x70
 8008698:	4b5f      	ldr	r3, [pc, #380]	; (8008818 <HAL_RCC_OscConfig+0x47c>)
 800869a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800869c:	4a5e      	ldr	r2, [pc, #376]	; (8008818 <HAL_RCC_OscConfig+0x47c>)
 800869e:	f043 0301 	orr.w	r3, r3, #1
 80086a2:	6713      	str	r3, [r2, #112]	; 0x70
 80086a4:	e00b      	b.n	80086be <HAL_RCC_OscConfig+0x322>
 80086a6:	4b5c      	ldr	r3, [pc, #368]	; (8008818 <HAL_RCC_OscConfig+0x47c>)
 80086a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086aa:	4a5b      	ldr	r2, [pc, #364]	; (8008818 <HAL_RCC_OscConfig+0x47c>)
 80086ac:	f023 0301 	bic.w	r3, r3, #1
 80086b0:	6713      	str	r3, [r2, #112]	; 0x70
 80086b2:	4b59      	ldr	r3, [pc, #356]	; (8008818 <HAL_RCC_OscConfig+0x47c>)
 80086b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086b6:	4a58      	ldr	r2, [pc, #352]	; (8008818 <HAL_RCC_OscConfig+0x47c>)
 80086b8:	f023 0304 	bic.w	r3, r3, #4
 80086bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d015      	beq.n	80086f2 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086c6:	f7fb fc79 	bl	8003fbc <HAL_GetTick>
 80086ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086cc:	e00a      	b.n	80086e4 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80086ce:	f7fb fc75 	bl	8003fbc <HAL_GetTick>
 80086d2:	4602      	mov	r2, r0
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	1ad3      	subs	r3, r2, r3
 80086d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80086dc:	4293      	cmp	r3, r2
 80086de:	d901      	bls.n	80086e4 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 80086e0:	2303      	movs	r3, #3
 80086e2:	e092      	b.n	800880a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086e4:	4b4c      	ldr	r3, [pc, #304]	; (8008818 <HAL_RCC_OscConfig+0x47c>)
 80086e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086e8:	f003 0302 	and.w	r3, r3, #2
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d0ee      	beq.n	80086ce <HAL_RCC_OscConfig+0x332>
 80086f0:	e014      	b.n	800871c <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086f2:	f7fb fc63 	bl	8003fbc <HAL_GetTick>
 80086f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086f8:	e00a      	b.n	8008710 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80086fa:	f7fb fc5f 	bl	8003fbc <HAL_GetTick>
 80086fe:	4602      	mov	r2, r0
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	1ad3      	subs	r3, r2, r3
 8008704:	f241 3288 	movw	r2, #5000	; 0x1388
 8008708:	4293      	cmp	r3, r2
 800870a:	d901      	bls.n	8008710 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800870c:	2303      	movs	r3, #3
 800870e:	e07c      	b.n	800880a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008710:	4b41      	ldr	r3, [pc, #260]	; (8008818 <HAL_RCC_OscConfig+0x47c>)
 8008712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008714:	f003 0302 	and.w	r3, r3, #2
 8008718:	2b00      	cmp	r3, #0
 800871a:	d1ee      	bne.n	80086fa <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800871c:	7dfb      	ldrb	r3, [r7, #23]
 800871e:	2b01      	cmp	r3, #1
 8008720:	d105      	bne.n	800872e <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008722:	4b3d      	ldr	r3, [pc, #244]	; (8008818 <HAL_RCC_OscConfig+0x47c>)
 8008724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008726:	4a3c      	ldr	r2, [pc, #240]	; (8008818 <HAL_RCC_OscConfig+0x47c>)
 8008728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800872c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	699b      	ldr	r3, [r3, #24]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d068      	beq.n	8008808 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008736:	4b38      	ldr	r3, [pc, #224]	; (8008818 <HAL_RCC_OscConfig+0x47c>)
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	f003 030c 	and.w	r3, r3, #12
 800873e:	2b08      	cmp	r3, #8
 8008740:	d060      	beq.n	8008804 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	699b      	ldr	r3, [r3, #24]
 8008746:	2b02      	cmp	r3, #2
 8008748:	d145      	bne.n	80087d6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800874a:	4b34      	ldr	r3, [pc, #208]	; (800881c <HAL_RCC_OscConfig+0x480>)
 800874c:	2200      	movs	r2, #0
 800874e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008750:	f7fb fc34 	bl	8003fbc <HAL_GetTick>
 8008754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008756:	e008      	b.n	800876a <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008758:	f7fb fc30 	bl	8003fbc <HAL_GetTick>
 800875c:	4602      	mov	r2, r0
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	2b02      	cmp	r3, #2
 8008764:	d901      	bls.n	800876a <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8008766:	2303      	movs	r3, #3
 8008768:	e04f      	b.n	800880a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800876a:	4b2b      	ldr	r3, [pc, #172]	; (8008818 <HAL_RCC_OscConfig+0x47c>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1f0      	bne.n	8008758 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	69da      	ldr	r2, [r3, #28]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6a1b      	ldr	r3, [r3, #32]
 800877e:	431a      	orrs	r2, r3
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008784:	019b      	lsls	r3, r3, #6
 8008786:	431a      	orrs	r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800878c:	085b      	lsrs	r3, r3, #1
 800878e:	3b01      	subs	r3, #1
 8008790:	041b      	lsls	r3, r3, #16
 8008792:	431a      	orrs	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008798:	061b      	lsls	r3, r3, #24
 800879a:	431a      	orrs	r2, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a0:	071b      	lsls	r3, r3, #28
 80087a2:	491d      	ldr	r1, [pc, #116]	; (8008818 <HAL_RCC_OscConfig+0x47c>)
 80087a4:	4313      	orrs	r3, r2
 80087a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087a8:	4b1c      	ldr	r3, [pc, #112]	; (800881c <HAL_RCC_OscConfig+0x480>)
 80087aa:	2201      	movs	r2, #1
 80087ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087ae:	f7fb fc05 	bl	8003fbc <HAL_GetTick>
 80087b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087b4:	e008      	b.n	80087c8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087b6:	f7fb fc01 	bl	8003fbc <HAL_GetTick>
 80087ba:	4602      	mov	r2, r0
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	1ad3      	subs	r3, r2, r3
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	d901      	bls.n	80087c8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80087c4:	2303      	movs	r3, #3
 80087c6:	e020      	b.n	800880a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087c8:	4b13      	ldr	r3, [pc, #76]	; (8008818 <HAL_RCC_OscConfig+0x47c>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d0f0      	beq.n	80087b6 <HAL_RCC_OscConfig+0x41a>
 80087d4:	e018      	b.n	8008808 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087d6:	4b11      	ldr	r3, [pc, #68]	; (800881c <HAL_RCC_OscConfig+0x480>)
 80087d8:	2200      	movs	r2, #0
 80087da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087dc:	f7fb fbee 	bl	8003fbc <HAL_GetTick>
 80087e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087e2:	e008      	b.n	80087f6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087e4:	f7fb fbea 	bl	8003fbc <HAL_GetTick>
 80087e8:	4602      	mov	r2, r0
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	1ad3      	subs	r3, r2, r3
 80087ee:	2b02      	cmp	r3, #2
 80087f0:	d901      	bls.n	80087f6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80087f2:	2303      	movs	r3, #3
 80087f4:	e009      	b.n	800880a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087f6:	4b08      	ldr	r3, [pc, #32]	; (8008818 <HAL_RCC_OscConfig+0x47c>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d1f0      	bne.n	80087e4 <HAL_RCC_OscConfig+0x448>
 8008802:	e001      	b.n	8008808 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	e000      	b.n	800880a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3718      	adds	r7, #24
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	40007000 	.word	0x40007000
 8008818:	40023800 	.word	0x40023800
 800881c:	42470060 	.word	0x42470060

08008820 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d101      	bne.n	8008832 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e022      	b.n	8008878 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008838:	b2db      	uxtb	r3, r3
 800883a:	2b00      	cmp	r3, #0
 800883c:	d105      	bne.n	800884a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f7f9 fdfb 	bl	8002440 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2203      	movs	r2, #3
 800884e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 f814 	bl	8008880 <HAL_SD_InitCard>
 8008858:	4603      	mov	r3, r0
 800885a:	2b00      	cmp	r3, #0
 800885c:	d001      	beq.n	8008862 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	e00a      	b.n	8008878 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2201      	movs	r2, #1
 8008872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3708      	adds	r7, #8
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008880:	b5b0      	push	{r4, r5, r7, lr}
 8008882:	b08e      	sub	sp, #56	; 0x38
 8008884:	af04      	add	r7, sp, #16
 8008886:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008888:	2300      	movs	r3, #0
 800888a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800888c:	2300      	movs	r3, #0
 800888e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008890:	2300      	movs	r3, #0
 8008892:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008894:	2300      	movs	r3, #0
 8008896:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008898:	2300      	movs	r3, #0
 800889a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800889c:	2376      	movs	r3, #118	; 0x76
 800889e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681d      	ldr	r5, [r3, #0]
 80088a4:	466c      	mov	r4, sp
 80088a6:	f107 0314 	add.w	r3, r7, #20
 80088aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80088ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80088b2:	f107 0308 	add.w	r3, r7, #8
 80088b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80088b8:	4628      	mov	r0, r5
 80088ba:	f001 fec9 	bl	800a650 <SDIO_Init>
 80088be:	4603      	mov	r3, r0
 80088c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80088c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d001      	beq.n	80088d0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	e031      	b.n	8008934 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80088d0:	4b1a      	ldr	r3, [pc, #104]	; (800893c <HAL_SD_InitCard+0xbc>)
 80088d2:	2200      	movs	r2, #0
 80088d4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4618      	mov	r0, r3
 80088dc:	f001 fef0 	bl	800a6c0 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80088e0:	4b16      	ldr	r3, [pc, #88]	; (800893c <HAL_SD_InitCard+0xbc>)
 80088e2:	2201      	movs	r2, #1
 80088e4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 fb18 	bl	8008f1c <SD_PowerON>
 80088ec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80088ee:	6a3b      	ldr	r3, [r7, #32]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00b      	beq.n	800890c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008900:	6a3b      	ldr	r3, [r7, #32]
 8008902:	431a      	orrs	r2, r3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	e013      	b.n	8008934 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 fa37 	bl	8008d80 <SD_InitCard>
 8008912:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008914:	6a3b      	ldr	r3, [r7, #32]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00b      	beq.n	8008932 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2201      	movs	r2, #1
 800891e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008926:	6a3b      	ldr	r3, [r7, #32]
 8008928:	431a      	orrs	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	e000      	b.n	8008934 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3728      	adds	r7, #40	; 0x28
 8008938:	46bd      	mov	sp, r7
 800893a:	bdb0      	pop	{r4, r5, r7, pc}
 800893c:	422580a0 	.word	0x422580a0

08008940 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800894e:	0f9b      	lsrs	r3, r3, #30
 8008950:	b2da      	uxtb	r2, r3
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800895a:	0e9b      	lsrs	r3, r3, #26
 800895c:	b2db      	uxtb	r3, r3
 800895e:	f003 030f 	and.w	r3, r3, #15
 8008962:	b2da      	uxtb	r2, r3
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800896c:	0e1b      	lsrs	r3, r3, #24
 800896e:	b2db      	uxtb	r3, r3
 8008970:	f003 0303 	and.w	r3, r3, #3
 8008974:	b2da      	uxtb	r2, r3
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800897e:	0c1b      	lsrs	r3, r3, #16
 8008980:	b2da      	uxtb	r2, r3
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800898a:	0a1b      	lsrs	r3, r3, #8
 800898c:	b2da      	uxtb	r2, r3
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008996:	b2da      	uxtb	r2, r3
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089a0:	0d1b      	lsrs	r3, r3, #20
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089ac:	0c1b      	lsrs	r3, r3, #16
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	f003 030f 	and.w	r3, r3, #15
 80089b4:	b2da      	uxtb	r2, r3
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089be:	0bdb      	lsrs	r3, r3, #15
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	f003 0301 	and.w	r3, r3, #1
 80089c6:	b2da      	uxtb	r2, r3
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089d0:	0b9b      	lsrs	r3, r3, #14
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	f003 0301 	and.w	r3, r3, #1
 80089d8:	b2da      	uxtb	r2, r3
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089e2:	0b5b      	lsrs	r3, r3, #13
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	f003 0301 	and.w	r3, r3, #1
 80089ea:	b2da      	uxtb	r2, r3
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089f4:	0b1b      	lsrs	r3, r3, #12
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	f003 0301 	and.w	r3, r3, #1
 80089fc:	b2da      	uxtb	r2, r3
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	2200      	movs	r2, #0
 8008a06:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d163      	bne.n	8008ad8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a14:	009a      	lsls	r2, r3, #2
 8008a16:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008a20:	0f92      	lsrs	r2, r2, #30
 8008a22:	431a      	orrs	r2, r3
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a2c:	0edb      	lsrs	r3, r3, #27
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	f003 0307 	and.w	r3, r3, #7
 8008a34:	b2da      	uxtb	r2, r3
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a3e:	0e1b      	lsrs	r3, r3, #24
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	f003 0307 	and.w	r3, r3, #7
 8008a46:	b2da      	uxtb	r2, r3
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a50:	0d5b      	lsrs	r3, r3, #21
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	f003 0307 	and.w	r3, r3, #7
 8008a58:	b2da      	uxtb	r2, r3
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a62:	0c9b      	lsrs	r3, r3, #18
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	f003 0307 	and.w	r3, r3, #7
 8008a6a:	b2da      	uxtb	r2, r3
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a74:	0bdb      	lsrs	r3, r3, #15
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	f003 0307 	and.w	r3, r3, #7
 8008a7c:	b2da      	uxtb	r2, r3
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	1c5a      	adds	r2, r3, #1
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	7e1b      	ldrb	r3, [r3, #24]
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	f003 0307 	and.w	r3, r3, #7
 8008a96:	3302      	adds	r3, #2
 8008a98:	2201      	movs	r2, #1
 8008a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008aa2:	fb02 f203 	mul.w	r2, r2, r3
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	7a1b      	ldrb	r3, [r3, #8]
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	f003 030f 	and.w	r3, r3, #15
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	409a      	lsls	r2, r3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008ac4:	0a52      	lsrs	r2, r2, #9
 8008ac6:	fb02 f203 	mul.w	r2, r2, r3
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ad4:	661a      	str	r2, [r3, #96]	; 0x60
 8008ad6:	e031      	b.n	8008b3c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d11d      	bne.n	8008b1c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ae4:	041b      	lsls	r3, r3, #16
 8008ae6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008aee:	0c1b      	lsrs	r3, r3, #16
 8008af0:	431a      	orrs	r2, r3
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	3301      	adds	r3, #1
 8008afc:	029a      	lsls	r2, r3, #10
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b10:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	661a      	str	r2, [r3, #96]	; 0x60
 8008b1a:	e00f      	b.n	8008b3c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a58      	ldr	r2, [pc, #352]	; (8008c84 <HAL_SD_GetCardCSD+0x344>)
 8008b22:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e09d      	b.n	8008c78 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b40:	0b9b      	lsrs	r3, r3, #14
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	f003 0301 	and.w	r3, r3, #1
 8008b48:	b2da      	uxtb	r2, r3
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b52:	09db      	lsrs	r3, r3, #7
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b5a:	b2da      	uxtb	r2, r3
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b6a:	b2da      	uxtb	r2, r3
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b74:	0fdb      	lsrs	r3, r3, #31
 8008b76:	b2da      	uxtb	r2, r3
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b80:	0f5b      	lsrs	r3, r3, #29
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	f003 0303 	and.w	r3, r3, #3
 8008b88:	b2da      	uxtb	r2, r3
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b92:	0e9b      	lsrs	r3, r3, #26
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	f003 0307 	and.w	r3, r3, #7
 8008b9a:	b2da      	uxtb	r2, r3
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ba4:	0d9b      	lsrs	r3, r3, #22
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	f003 030f 	and.w	r3, r3, #15
 8008bac:	b2da      	uxtb	r2, r3
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bb6:	0d5b      	lsrs	r3, r3, #21
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	f003 0301 	and.w	r3, r3, #1
 8008bbe:	b2da      	uxtb	r2, r3
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bd2:	0c1b      	lsrs	r3, r3, #16
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	f003 0301 	and.w	r3, r3, #1
 8008bda:	b2da      	uxtb	r2, r3
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008be6:	0bdb      	lsrs	r3, r3, #15
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	f003 0301 	and.w	r3, r3, #1
 8008bee:	b2da      	uxtb	r2, r3
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bfa:	0b9b      	lsrs	r3, r3, #14
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	f003 0301 	and.w	r3, r3, #1
 8008c02:	b2da      	uxtb	r2, r3
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c0e:	0b5b      	lsrs	r3, r3, #13
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	f003 0301 	and.w	r3, r3, #1
 8008c16:	b2da      	uxtb	r2, r3
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c22:	0b1b      	lsrs	r3, r3, #12
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	f003 0301 	and.w	r3, r3, #1
 8008c2a:	b2da      	uxtb	r2, r3
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c36:	0a9b      	lsrs	r3, r3, #10
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	f003 0303 	and.w	r3, r3, #3
 8008c3e:	b2da      	uxtb	r2, r3
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c4a:	0a1b      	lsrs	r3, r3, #8
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	f003 0303 	and.w	r3, r3, #3
 8008c52:	b2da      	uxtb	r2, r3
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c5e:	085b      	lsrs	r3, r3, #1
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c66:	b2da      	uxtb	r2, r3
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	2201      	movs	r2, #1
 8008c72:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	370c      	adds	r7, #12
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr
 8008c84:	004005ff 	.word	0x004005ff

08008c88 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008c88:	b5b0      	push	{r4, r5, r7, lr}
 8008c8a:	b08e      	sub	sp, #56	; 0x38
 8008c8c:	af04      	add	r7, sp, #16
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2203      	movs	r2, #3
 8008c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c9e:	2b03      	cmp	r3, #3
 8008ca0:	d02e      	beq.n	8008d00 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ca8:	d106      	bne.n	8008cb8 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	639a      	str	r2, [r3, #56]	; 0x38
 8008cb6:	e029      	b.n	8008d0c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cbe:	d10a      	bne.n	8008cd6 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 f9b9 	bl	8009038 <SD_WideBus_Enable>
 8008cc6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cce:	431a      	orrs	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	639a      	str	r2, [r3, #56]	; 0x38
 8008cd4:	e01a      	b.n	8008d0c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d10a      	bne.n	8008cf2 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 f9f6 	bl	80090ce <SD_WideBus_Disable>
 8008ce2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cea:	431a      	orrs	r2, r3
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	639a      	str	r2, [r3, #56]	; 0x38
 8008cf0:	e00c      	b.n	8008d0c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	639a      	str	r2, [r3, #56]	; 0x38
 8008cfe:	e005      	b.n	8008d0c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d009      	beq.n	8008d28 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a18      	ldr	r2, [pc, #96]	; (8008d7c <HAL_SD_ConfigWideBusOperation+0xf4>)
 8008d1a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e024      	b.n	8008d72 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	695b      	ldr	r3, [r3, #20]
 8008d42:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	699b      	ldr	r3, [r3, #24]
 8008d48:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681d      	ldr	r5, [r3, #0]
 8008d4e:	466c      	mov	r4, sp
 8008d50:	f107 0318 	add.w	r3, r7, #24
 8008d54:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008d58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008d5c:	f107 030c 	add.w	r3, r7, #12
 8008d60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008d62:	4628      	mov	r0, r5
 8008d64:	f001 fc74 	bl	800a650 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3728      	adds	r7, #40	; 0x28
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bdb0      	pop	{r4, r5, r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	004005ff 	.word	0x004005ff

08008d80 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008d80:	b5b0      	push	{r4, r5, r7, lr}
 8008d82:	b094      	sub	sp, #80	; 0x50
 8008d84:	af04      	add	r7, sp, #16
 8008d86:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4618      	mov	r0, r3
 8008d92:	f001 fca4 	bl	800a6de <SDIO_GetPowerState>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d102      	bne.n	8008da2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008d9c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008da0:	e0b7      	b.n	8008f12 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008da6:	2b03      	cmp	r3, #3
 8008da8:	d02f      	beq.n	8008e0a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4618      	mov	r0, r3
 8008db0:	f001 fe23 	bl	800a9fa <SDMMC_CmdSendCID>
 8008db4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d001      	beq.n	8008dc0 <SD_InitCard+0x40>
    {
      return errorstate;
 8008dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dbe:	e0a8      	b.n	8008f12 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	2100      	movs	r1, #0
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f001 fcce 	bl	800a768 <SDIO_GetResponse>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2104      	movs	r1, #4
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f001 fcc5 	bl	800a768 <SDIO_GetResponse>
 8008dde:	4602      	mov	r2, r0
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	2108      	movs	r1, #8
 8008dea:	4618      	mov	r0, r3
 8008dec:	f001 fcbc 	bl	800a768 <SDIO_GetResponse>
 8008df0:	4602      	mov	r2, r0
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	210c      	movs	r1, #12
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f001 fcb3 	bl	800a768 <SDIO_GetResponse>
 8008e02:	4602      	mov	r2, r0
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e0e:	2b03      	cmp	r3, #3
 8008e10:	d00d      	beq.n	8008e2e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f107 020e 	add.w	r2, r7, #14
 8008e1a:	4611      	mov	r1, r2
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f001 fe29 	bl	800aa74 <SDMMC_CmdSetRelAdd>
 8008e22:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d001      	beq.n	8008e2e <SD_InitCard+0xae>
    {
      return errorstate;
 8008e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e2c:	e071      	b.n	8008f12 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e32:	2b03      	cmp	r3, #3
 8008e34:	d036      	beq.n	8008ea4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008e36:	89fb      	ldrh	r3, [r7, #14]
 8008e38:	461a      	mov	r2, r3
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e46:	041b      	lsls	r3, r3, #16
 8008e48:	4619      	mov	r1, r3
 8008e4a:	4610      	mov	r0, r2
 8008e4c:	f001 fdf3 	bl	800aa36 <SDMMC_CmdSendCSD>
 8008e50:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d001      	beq.n	8008e5c <SD_InitCard+0xdc>
    {
      return errorstate;
 8008e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e5a:	e05a      	b.n	8008f12 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2100      	movs	r1, #0
 8008e62:	4618      	mov	r0, r3
 8008e64:	f001 fc80 	bl	800a768 <SDIO_GetResponse>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2104      	movs	r1, #4
 8008e74:	4618      	mov	r0, r3
 8008e76:	f001 fc77 	bl	800a768 <SDIO_GetResponse>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2108      	movs	r1, #8
 8008e86:	4618      	mov	r0, r3
 8008e88:	f001 fc6e 	bl	800a768 <SDIO_GetResponse>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	210c      	movs	r1, #12
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f001 fc65 	bl	800a768 <SDIO_GetResponse>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2104      	movs	r1, #4
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f001 fc5c 	bl	800a768 <SDIO_GetResponse>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	0d1a      	lsrs	r2, r3, #20
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008eb8:	f107 0310 	add.w	r3, r7, #16
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f7ff fd3e 	bl	8008940 <HAL_SD_GetCardCSD>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d002      	beq.n	8008ed0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008eca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008ece:	e020      	b.n	8008f12 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6819      	ldr	r1, [r3, #0]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ed8:	041b      	lsls	r3, r3, #16
 8008eda:	f04f 0400 	mov.w	r4, #0
 8008ede:	461a      	mov	r2, r3
 8008ee0:	4623      	mov	r3, r4
 8008ee2:	4608      	mov	r0, r1
 8008ee4:	f001 fca1 	bl	800a82a <SDMMC_CmdSelDesel>
 8008ee8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d001      	beq.n	8008ef4 <SD_InitCard+0x174>
  {
    return errorstate;
 8008ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ef2:	e00e      	b.n	8008f12 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681d      	ldr	r5, [r3, #0]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	466c      	mov	r4, sp
 8008efc:	f103 0210 	add.w	r2, r3, #16
 8008f00:	ca07      	ldmia	r2, {r0, r1, r2}
 8008f02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008f06:	3304      	adds	r3, #4
 8008f08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008f0a:	4628      	mov	r0, r5
 8008f0c:	f001 fba0 	bl	800a650 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008f10:	2300      	movs	r3, #0
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3740      	adds	r7, #64	; 0x40
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008f1c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b086      	sub	sp, #24
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f24:	2300      	movs	r3, #0
 8008f26:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	617b      	str	r3, [r7, #20]
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4618      	mov	r0, r3
 8008f36:	f001 fc9b 	bl	800a870 <SDMMC_CmdGoIdleState>
 8008f3a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d001      	beq.n	8008f46 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	e072      	b.n	800902c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f001 fcae 	bl	800a8ac <SDMMC_CmdOperCond>
 8008f50:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d00d      	beq.n	8008f74 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4618      	mov	r0, r3
 8008f64:	f001 fc84 	bl	800a870 <SDMMC_CmdGoIdleState>
 8008f68:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d004      	beq.n	8008f7a <SD_PowerON+0x5e>
    {
      return errorstate;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	e05b      	b.n	800902c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d137      	bne.n	8008ff2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2100      	movs	r1, #0
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f001 fcae 	bl	800a8ea <SDMMC_CmdAppCommand>
 8008f8e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d02d      	beq.n	8008ff2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f9a:	e047      	b.n	800902c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	2100      	movs	r1, #0
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f001 fca1 	bl	800a8ea <SDMMC_CmdAppCommand>
 8008fa8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d001      	beq.n	8008fb4 <SD_PowerON+0x98>
    {
      return errorstate;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	e03b      	b.n	800902c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	491e      	ldr	r1, [pc, #120]	; (8009034 <SD_PowerON+0x118>)
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f001 fcb7 	bl	800a92e <SDMMC_CmdAppOperCommand>
 8008fc0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d002      	beq.n	8008fce <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008fc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008fcc:	e02e      	b.n	800902c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2100      	movs	r1, #0
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f001 fbc7 	bl	800a768 <SDIO_GetResponse>
 8008fda:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	0fdb      	lsrs	r3, r3, #31
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d101      	bne.n	8008fe8 <SD_PowerON+0xcc>
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	e000      	b.n	8008fea <SD_PowerON+0xce>
 8008fe8:	2300      	movs	r3, #0
 8008fea:	613b      	str	r3, [r7, #16]

    count++;
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d802      	bhi.n	8009002 <SD_PowerON+0xe6>
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d0cc      	beq.n	8008f9c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009008:	4293      	cmp	r3, r2
 800900a:	d902      	bls.n	8009012 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800900c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009010:	e00c      	b.n	800902c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009018:	2b00      	cmp	r3, #0
 800901a:	d003      	beq.n	8009024 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2201      	movs	r2, #1
 8009020:	645a      	str	r2, [r3, #68]	; 0x44
 8009022:	e002      	b.n	800902a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	3718      	adds	r7, #24
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}
 8009034:	c1100000 	.word	0xc1100000

08009038 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b086      	sub	sp, #24
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009040:	2300      	movs	r3, #0
 8009042:	60fb      	str	r3, [r7, #12]
 8009044:	2300      	movs	r3, #0
 8009046:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	2100      	movs	r1, #0
 800904e:	4618      	mov	r0, r3
 8009050:	f001 fb8a 	bl	800a768 <SDIO_GetResponse>
 8009054:	4603      	mov	r3, r0
 8009056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800905a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800905e:	d102      	bne.n	8009066 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009060:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009064:	e02f      	b.n	80090c6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009066:	f107 030c 	add.w	r3, r7, #12
 800906a:	4619      	mov	r1, r3
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 f879 	bl	8009164 <SD_FindSCR>
 8009072:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d001      	beq.n	800907e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	e023      	b.n	80090c6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009084:	2b00      	cmp	r3, #0
 8009086:	d01c      	beq.n	80090c2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009090:	041b      	lsls	r3, r3, #16
 8009092:	4619      	mov	r1, r3
 8009094:	4610      	mov	r0, r2
 8009096:	f001 fc28 	bl	800a8ea <SDMMC_CmdAppCommand>
 800909a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d001      	beq.n	80090a6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	e00f      	b.n	80090c6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	2102      	movs	r1, #2
 80090ac:	4618      	mov	r0, r3
 80090ae:	f001 fc61 	bl	800a974 <SDMMC_CmdBusWidth>
 80090b2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d001      	beq.n	80090be <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	e003      	b.n	80090c6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80090be:	2300      	movs	r3, #0
 80090c0:	e001      	b.n	80090c6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80090c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3718      	adds	r7, #24
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}

080090ce <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b086      	sub	sp, #24
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80090d6:	2300      	movs	r3, #0
 80090d8:	60fb      	str	r3, [r7, #12]
 80090da:	2300      	movs	r3, #0
 80090dc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2100      	movs	r1, #0
 80090e4:	4618      	mov	r0, r3
 80090e6:	f001 fb3f 	bl	800a768 <SDIO_GetResponse>
 80090ea:	4603      	mov	r3, r0
 80090ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090f4:	d102      	bne.n	80090fc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80090f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80090fa:	e02f      	b.n	800915c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80090fc:	f107 030c 	add.w	r3, r7, #12
 8009100:	4619      	mov	r1, r3
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 f82e 	bl	8009164 <SD_FindSCR>
 8009108:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d001      	beq.n	8009114 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	e023      	b.n	800915c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800911a:	2b00      	cmp	r3, #0
 800911c:	d01c      	beq.n	8009158 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009126:	041b      	lsls	r3, r3, #16
 8009128:	4619      	mov	r1, r3
 800912a:	4610      	mov	r0, r2
 800912c:	f001 fbdd 	bl	800a8ea <SDMMC_CmdAppCommand>
 8009130:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d001      	beq.n	800913c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	e00f      	b.n	800915c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	2100      	movs	r1, #0
 8009142:	4618      	mov	r0, r3
 8009144:	f001 fc16 	bl	800a974 <SDMMC_CmdBusWidth>
 8009148:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d001      	beq.n	8009154 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	e003      	b.n	800915c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009154:	2300      	movs	r3, #0
 8009156:	e001      	b.n	800915c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009158:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800915c:	4618      	mov	r0, r3
 800915e:	3718      	adds	r7, #24
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009164:	b590      	push	{r4, r7, lr}
 8009166:	b08f      	sub	sp, #60	; 0x3c
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800916e:	f7fa ff25 	bl	8003fbc <HAL_GetTick>
 8009172:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009174:	2300      	movs	r3, #0
 8009176:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009178:	2300      	movs	r3, #0
 800917a:	60bb      	str	r3, [r7, #8]
 800917c:	2300      	movs	r3, #0
 800917e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2108      	movs	r1, #8
 800918a:	4618      	mov	r0, r3
 800918c:	f001 fb2b 	bl	800a7e6 <SDMMC_CmdBlockLength>
 8009190:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009194:	2b00      	cmp	r3, #0
 8009196:	d001      	beq.n	800919c <SD_FindSCR+0x38>
  {
    return errorstate;
 8009198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919a:	e0a9      	b.n	80092f0 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091a4:	041b      	lsls	r3, r3, #16
 80091a6:	4619      	mov	r1, r3
 80091a8:	4610      	mov	r0, r2
 80091aa:	f001 fb9e 	bl	800a8ea <SDMMC_CmdAppCommand>
 80091ae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80091b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d001      	beq.n	80091ba <SD_FindSCR+0x56>
  {
    return errorstate;
 80091b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b8:	e09a      	b.n	80092f0 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80091ba:	f04f 33ff 	mov.w	r3, #4294967295
 80091be:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80091c0:	2308      	movs	r3, #8
 80091c2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80091c4:	2330      	movs	r3, #48	; 0x30
 80091c6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80091c8:	2302      	movs	r3, #2
 80091ca:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80091cc:	2300      	movs	r3, #0
 80091ce:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80091d0:	2301      	movs	r3, #1
 80091d2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f107 0210 	add.w	r2, r7, #16
 80091dc:	4611      	mov	r1, r2
 80091de:	4618      	mov	r0, r3
 80091e0:	f001 fad5 	bl	800a78e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4618      	mov	r0, r3
 80091ea:	f001 fbe5 	bl	800a9b8 <SDMMC_CmdSendSCR>
 80091ee:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80091f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d022      	beq.n	800923c <SD_FindSCR+0xd8>
  {
    return errorstate;
 80091f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f8:	e07a      	b.n	80092f0 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009200:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009204:	2b00      	cmp	r3, #0
 8009206:	d00e      	beq.n	8009226 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6819      	ldr	r1, [r3, #0]
 800920c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	f107 0208 	add.w	r2, r7, #8
 8009214:	18d4      	adds	r4, r2, r3
 8009216:	4608      	mov	r0, r1
 8009218:	f001 fa45 	bl	800a6a6 <SDIO_ReadFIFO>
 800921c:	4603      	mov	r3, r0
 800921e:	6023      	str	r3, [r4, #0]
      index++;
 8009220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009222:	3301      	adds	r3, #1
 8009224:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009226:	f7fa fec9 	bl	8003fbc <HAL_GetTick>
 800922a:	4602      	mov	r2, r0
 800922c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800922e:	1ad3      	subs	r3, r2, r3
 8009230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009234:	d102      	bne.n	800923c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009236:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800923a:	e059      	b.n	80092f0 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009242:	f240 432a 	movw	r3, #1066	; 0x42a
 8009246:	4013      	ands	r3, r2
 8009248:	2b00      	cmp	r3, #0
 800924a:	d0d6      	beq.n	80091fa <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009252:	f003 0308 	and.w	r3, r3, #8
 8009256:	2b00      	cmp	r3, #0
 8009258:	d005      	beq.n	8009266 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2208      	movs	r2, #8
 8009260:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009262:	2308      	movs	r3, #8
 8009264:	e044      	b.n	80092f0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800926c:	f003 0302 	and.w	r3, r3, #2
 8009270:	2b00      	cmp	r3, #0
 8009272:	d005      	beq.n	8009280 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2202      	movs	r2, #2
 800927a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800927c:	2302      	movs	r3, #2
 800927e:	e037      	b.n	80092f0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009286:	f003 0320 	and.w	r3, r3, #32
 800928a:	2b00      	cmp	r3, #0
 800928c:	d005      	beq.n	800929a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2220      	movs	r2, #32
 8009294:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009296:	2320      	movs	r3, #32
 8009298:	e02a      	b.n	80092f0 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f240 523a 	movw	r2, #1338	; 0x53a
 80092a2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	061a      	lsls	r2, r3, #24
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	021b      	lsls	r3, r3, #8
 80092ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80092b0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	0a1b      	lsrs	r3, r3, #8
 80092b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80092ba:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	0e1b      	lsrs	r3, r3, #24
 80092c0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80092c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c4:	601a      	str	r2, [r3, #0]
    scr++;
 80092c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c8:	3304      	adds	r3, #4
 80092ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	061a      	lsls	r2, r3, #24
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	021b      	lsls	r3, r3, #8
 80092d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80092d8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	0a1b      	lsrs	r3, r3, #8
 80092de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80092e2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	0e1b      	lsrs	r3, r3, #24
 80092e8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80092ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ec:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	373c      	adds	r7, #60	; 0x3c
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd90      	pop	{r4, r7, pc}

080092f8 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d101      	bne.n	800930e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	e034      	b.n	8009378 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8009314:	b2db      	uxtb	r3, r3
 8009316:	2b00      	cmp	r3, #0
 8009318:	d106      	bne.n	8009328 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2200      	movs	r2, #0
 800931e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	f7f9 f9ea 	bl	80026fc <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	3308      	adds	r3, #8
 8009330:	4619      	mov	r1, r3
 8009332:	4610      	mov	r0, r2
 8009334:	f001 f888 	bl	800a448 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	6818      	ldr	r0, [r3, #0]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	461a      	mov	r2, r3
 8009342:	68b9      	ldr	r1, [r7, #8]
 8009344:	f001 f8f0 	bl	800a528 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6858      	ldr	r0, [r3, #4]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	689a      	ldr	r2, [r3, #8]
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009354:	6879      	ldr	r1, [r7, #4]
 8009356:	f001 f93b 	bl	800a5d0 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	68fa      	ldr	r2, [r7, #12]
 8009360:	6892      	ldr	r2, [r2, #8]
 8009362:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	68fa      	ldr	r2, [r7, #12]
 800936c:	6892      	ldr	r2, [r2, #8]
 800936e:	f041 0101 	orr.w	r1, r1, #1
 8009372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8009376:	2300      	movs	r3, #0
}
 8009378:	4618      	mov	r0, r3
 800937a:	3710      	adds	r7, #16
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d101      	bne.n	8009392 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	e01d      	b.n	80093ce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009398:	b2db      	uxtb	r3, r3
 800939a:	2b00      	cmp	r3, #0
 800939c:	d106      	bne.n	80093ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f815 	bl	80093d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2202      	movs	r2, #2
 80093b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681a      	ldr	r2, [r3, #0]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	3304      	adds	r3, #4
 80093bc:	4619      	mov	r1, r3
 80093be:	4610      	mov	r0, r2
 80093c0:	f000 f968 	bl	8009694 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2201      	movs	r2, #1
 80093c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80093cc:	2300      	movs	r3, #0
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3708      	adds	r7, #8
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80093d6:	b480      	push	{r7}
 80093d8:	b083      	sub	sp, #12
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80093de:	bf00      	nop
 80093e0:	370c      	adds	r7, #12
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr

080093ea <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80093ea:	b480      	push	{r7}
 80093ec:	b085      	sub	sp, #20
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	68da      	ldr	r2, [r3, #12]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f042 0201 	orr.w	r2, r2, #1
 8009400:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	f003 0307 	and.w	r3, r3, #7
 800940c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2b06      	cmp	r3, #6
 8009412:	d007      	beq.n	8009424 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f042 0201 	orr.w	r2, r2, #1
 8009422:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009424:	2300      	movs	r3, #0
}
 8009426:	4618      	mov	r0, r3
 8009428:	3714      	adds	r7, #20
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr

08009432 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b082      	sub	sp, #8
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	f003 0302 	and.w	r3, r3, #2
 8009444:	2b02      	cmp	r3, #2
 8009446:	d122      	bne.n	800948e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	f003 0302 	and.w	r3, r3, #2
 8009452:	2b02      	cmp	r3, #2
 8009454:	d11b      	bne.n	800948e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f06f 0202 	mvn.w	r2, #2
 800945e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2201      	movs	r2, #1
 8009464:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	699b      	ldr	r3, [r3, #24]
 800946c:	f003 0303 	and.w	r3, r3, #3
 8009470:	2b00      	cmp	r3, #0
 8009472:	d003      	beq.n	800947c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 f8ee 	bl	8009656 <HAL_TIM_IC_CaptureCallback>
 800947a:	e005      	b.n	8009488 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 f8e0 	bl	8009642 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 f8f1 	bl	800966a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2200      	movs	r2, #0
 800948c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	691b      	ldr	r3, [r3, #16]
 8009494:	f003 0304 	and.w	r3, r3, #4
 8009498:	2b04      	cmp	r3, #4
 800949a:	d122      	bne.n	80094e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	68db      	ldr	r3, [r3, #12]
 80094a2:	f003 0304 	and.w	r3, r3, #4
 80094a6:	2b04      	cmp	r3, #4
 80094a8:	d11b      	bne.n	80094e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f06f 0204 	mvn.w	r2, #4
 80094b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2202      	movs	r2, #2
 80094b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	699b      	ldr	r3, [r3, #24]
 80094c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d003      	beq.n	80094d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 f8c4 	bl	8009656 <HAL_TIM_IC_CaptureCallback>
 80094ce:	e005      	b.n	80094dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 f8b6 	bl	8009642 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 f8c7 	bl	800966a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	691b      	ldr	r3, [r3, #16]
 80094e8:	f003 0308 	and.w	r3, r3, #8
 80094ec:	2b08      	cmp	r3, #8
 80094ee:	d122      	bne.n	8009536 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	f003 0308 	and.w	r3, r3, #8
 80094fa:	2b08      	cmp	r3, #8
 80094fc:	d11b      	bne.n	8009536 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f06f 0208 	mvn.w	r2, #8
 8009506:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2204      	movs	r2, #4
 800950c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	69db      	ldr	r3, [r3, #28]
 8009514:	f003 0303 	and.w	r3, r3, #3
 8009518:	2b00      	cmp	r3, #0
 800951a:	d003      	beq.n	8009524 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 f89a 	bl	8009656 <HAL_TIM_IC_CaptureCallback>
 8009522:	e005      	b.n	8009530 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 f88c 	bl	8009642 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 f89d 	bl	800966a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	691b      	ldr	r3, [r3, #16]
 800953c:	f003 0310 	and.w	r3, r3, #16
 8009540:	2b10      	cmp	r3, #16
 8009542:	d122      	bne.n	800958a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	f003 0310 	and.w	r3, r3, #16
 800954e:	2b10      	cmp	r3, #16
 8009550:	d11b      	bne.n	800958a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f06f 0210 	mvn.w	r2, #16
 800955a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2208      	movs	r2, #8
 8009560:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	69db      	ldr	r3, [r3, #28]
 8009568:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800956c:	2b00      	cmp	r3, #0
 800956e:	d003      	beq.n	8009578 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f000 f870 	bl	8009656 <HAL_TIM_IC_CaptureCallback>
 8009576:	e005      	b.n	8009584 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 f862 	bl	8009642 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f000 f873 	bl	800966a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	691b      	ldr	r3, [r3, #16]
 8009590:	f003 0301 	and.w	r3, r3, #1
 8009594:	2b01      	cmp	r3, #1
 8009596:	d10e      	bne.n	80095b6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	68db      	ldr	r3, [r3, #12]
 800959e:	f003 0301 	and.w	r3, r3, #1
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d107      	bne.n	80095b6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f06f 0201 	mvn.w	r2, #1
 80095ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f7f8 fb15 	bl	8001be0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	691b      	ldr	r3, [r3, #16]
 80095bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095c0:	2b80      	cmp	r3, #128	; 0x80
 80095c2:	d10e      	bne.n	80095e2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095ce:	2b80      	cmp	r3, #128	; 0x80
 80095d0:	d107      	bne.n	80095e2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80095da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f000 f903 	bl	80097e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	691b      	ldr	r3, [r3, #16]
 80095e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095ec:	2b40      	cmp	r3, #64	; 0x40
 80095ee:	d10e      	bne.n	800960e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	68db      	ldr	r3, [r3, #12]
 80095f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095fa:	2b40      	cmp	r3, #64	; 0x40
 80095fc:	d107      	bne.n	800960e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 f838 	bl	800967e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	691b      	ldr	r3, [r3, #16]
 8009614:	f003 0320 	and.w	r3, r3, #32
 8009618:	2b20      	cmp	r3, #32
 800961a:	d10e      	bne.n	800963a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	f003 0320 	and.w	r3, r3, #32
 8009626:	2b20      	cmp	r3, #32
 8009628:	d107      	bne.n	800963a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f06f 0220 	mvn.w	r2, #32
 8009632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 f8cd 	bl	80097d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800963a:	bf00      	nop
 800963c:	3708      	adds	r7, #8
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009642:	b480      	push	{r7}
 8009644:	b083      	sub	sp, #12
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800964a:	bf00      	nop
 800964c:	370c      	adds	r7, #12
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr

08009656 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009656:	b480      	push	{r7}
 8009658:	b083      	sub	sp, #12
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800965e:	bf00      	nop
 8009660:	370c      	adds	r7, #12
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr

0800966a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800966a:	b480      	push	{r7}
 800966c:	b083      	sub	sp, #12
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009672:	bf00      	nop
 8009674:	370c      	adds	r7, #12
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr

0800967e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800967e:	b480      	push	{r7}
 8009680:	b083      	sub	sp, #12
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009686:	bf00      	nop
 8009688:	370c      	adds	r7, #12
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr
	...

08009694 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009694:	b480      	push	{r7}
 8009696:	b085      	sub	sp, #20
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4a40      	ldr	r2, [pc, #256]	; (80097a8 <TIM_Base_SetConfig+0x114>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d013      	beq.n	80096d4 <TIM_Base_SetConfig+0x40>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096b2:	d00f      	beq.n	80096d4 <TIM_Base_SetConfig+0x40>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	4a3d      	ldr	r2, [pc, #244]	; (80097ac <TIM_Base_SetConfig+0x118>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d00b      	beq.n	80096d4 <TIM_Base_SetConfig+0x40>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	4a3c      	ldr	r2, [pc, #240]	; (80097b0 <TIM_Base_SetConfig+0x11c>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d007      	beq.n	80096d4 <TIM_Base_SetConfig+0x40>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	4a3b      	ldr	r2, [pc, #236]	; (80097b4 <TIM_Base_SetConfig+0x120>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d003      	beq.n	80096d4 <TIM_Base_SetConfig+0x40>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	4a3a      	ldr	r2, [pc, #232]	; (80097b8 <TIM_Base_SetConfig+0x124>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d108      	bne.n	80096e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	4313      	orrs	r3, r2
 80096e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4a2f      	ldr	r2, [pc, #188]	; (80097a8 <TIM_Base_SetConfig+0x114>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d02b      	beq.n	8009746 <TIM_Base_SetConfig+0xb2>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096f4:	d027      	beq.n	8009746 <TIM_Base_SetConfig+0xb2>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4a2c      	ldr	r2, [pc, #176]	; (80097ac <TIM_Base_SetConfig+0x118>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d023      	beq.n	8009746 <TIM_Base_SetConfig+0xb2>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	4a2b      	ldr	r2, [pc, #172]	; (80097b0 <TIM_Base_SetConfig+0x11c>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d01f      	beq.n	8009746 <TIM_Base_SetConfig+0xb2>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	4a2a      	ldr	r2, [pc, #168]	; (80097b4 <TIM_Base_SetConfig+0x120>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d01b      	beq.n	8009746 <TIM_Base_SetConfig+0xb2>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	4a29      	ldr	r2, [pc, #164]	; (80097b8 <TIM_Base_SetConfig+0x124>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d017      	beq.n	8009746 <TIM_Base_SetConfig+0xb2>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	4a28      	ldr	r2, [pc, #160]	; (80097bc <TIM_Base_SetConfig+0x128>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d013      	beq.n	8009746 <TIM_Base_SetConfig+0xb2>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	4a27      	ldr	r2, [pc, #156]	; (80097c0 <TIM_Base_SetConfig+0x12c>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d00f      	beq.n	8009746 <TIM_Base_SetConfig+0xb2>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	4a26      	ldr	r2, [pc, #152]	; (80097c4 <TIM_Base_SetConfig+0x130>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d00b      	beq.n	8009746 <TIM_Base_SetConfig+0xb2>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4a25      	ldr	r2, [pc, #148]	; (80097c8 <TIM_Base_SetConfig+0x134>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d007      	beq.n	8009746 <TIM_Base_SetConfig+0xb2>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	4a24      	ldr	r2, [pc, #144]	; (80097cc <TIM_Base_SetConfig+0x138>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d003      	beq.n	8009746 <TIM_Base_SetConfig+0xb2>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	4a23      	ldr	r2, [pc, #140]	; (80097d0 <TIM_Base_SetConfig+0x13c>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d108      	bne.n	8009758 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800974c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	4313      	orrs	r3, r2
 8009756:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	695b      	ldr	r3, [r3, #20]
 8009762:	4313      	orrs	r3, r2
 8009764:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	68fa      	ldr	r2, [r7, #12]
 800976a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	689a      	ldr	r2, [r3, #8]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	681a      	ldr	r2, [r3, #0]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	4a0a      	ldr	r2, [pc, #40]	; (80097a8 <TIM_Base_SetConfig+0x114>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d003      	beq.n	800978c <TIM_Base_SetConfig+0xf8>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	4a0c      	ldr	r2, [pc, #48]	; (80097b8 <TIM_Base_SetConfig+0x124>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d103      	bne.n	8009794 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	691a      	ldr	r2, [r3, #16]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2201      	movs	r2, #1
 8009798:	615a      	str	r2, [r3, #20]
}
 800979a:	bf00      	nop
 800979c:	3714      	adds	r7, #20
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr
 80097a6:	bf00      	nop
 80097a8:	40010000 	.word	0x40010000
 80097ac:	40000400 	.word	0x40000400
 80097b0:	40000800 	.word	0x40000800
 80097b4:	40000c00 	.word	0x40000c00
 80097b8:	40010400 	.word	0x40010400
 80097bc:	40014000 	.word	0x40014000
 80097c0:	40014400 	.word	0x40014400
 80097c4:	40014800 	.word	0x40014800
 80097c8:	40001800 	.word	0x40001800
 80097cc:	40001c00 	.word	0x40001c00
 80097d0:	40002000 	.word	0x40002000

080097d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b083      	sub	sp, #12
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80097dc:	bf00      	nop
 80097de:	370c      	adds	r7, #12
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80097f0:	bf00      	nop
 80097f2:	370c      	adds	r7, #12
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr

080097fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b082      	sub	sp, #8
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d101      	bne.n	800980e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800980a:	2301      	movs	r3, #1
 800980c:	e03f      	b.n	800988e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009814:	b2db      	uxtb	r3, r3
 8009816:	2b00      	cmp	r3, #0
 8009818:	d106      	bne.n	8009828 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f7f8 fe74 	bl	8002510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2224      	movs	r2, #36	; 0x24
 800982c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	68da      	ldr	r2, [r3, #12]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800983e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 fa69 	bl	8009d18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	691a      	ldr	r2, [r3, #16]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009854:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	695a      	ldr	r2, [r3, #20]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009864:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	68da      	ldr	r2, [r3, #12]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009874:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2220      	movs	r2, #32
 8009880:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2220      	movs	r2, #32
 8009888:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800988c:	2300      	movs	r3, #0
}
 800988e:	4618      	mov	r0, r3
 8009890:	3708      	adds	r7, #8
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
	...

08009898 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b088      	sub	sp, #32
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	695b      	ldr	r3, [r3, #20]
 80098b6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80098b8:	2300      	movs	r3, #0
 80098ba:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80098bc:	2300      	movs	r3, #0
 80098be:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80098c0:	69fb      	ldr	r3, [r7, #28]
 80098c2:	f003 030f 	and.w	r3, r3, #15
 80098c6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d10d      	bne.n	80098ea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80098ce:	69fb      	ldr	r3, [r7, #28]
 80098d0:	f003 0320 	and.w	r3, r3, #32
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d008      	beq.n	80098ea <HAL_UART_IRQHandler+0x52>
 80098d8:	69bb      	ldr	r3, [r7, #24]
 80098da:	f003 0320 	and.w	r3, r3, #32
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d003      	beq.n	80098ea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 f996 	bl	8009c14 <UART_Receive_IT>
      return;
 80098e8:	e0d1      	b.n	8009a8e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	f000 80b0 	beq.w	8009a52 <HAL_UART_IRQHandler+0x1ba>
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	f003 0301 	and.w	r3, r3, #1
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d105      	bne.n	8009908 <HAL_UART_IRQHandler+0x70>
 80098fc:	69bb      	ldr	r3, [r7, #24]
 80098fe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009902:	2b00      	cmp	r3, #0
 8009904:	f000 80a5 	beq.w	8009a52 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	f003 0301 	and.w	r3, r3, #1
 800990e:	2b00      	cmp	r3, #0
 8009910:	d00a      	beq.n	8009928 <HAL_UART_IRQHandler+0x90>
 8009912:	69bb      	ldr	r3, [r7, #24]
 8009914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009918:	2b00      	cmp	r3, #0
 800991a:	d005      	beq.n	8009928 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009920:	f043 0201 	orr.w	r2, r3, #1
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	f003 0304 	and.w	r3, r3, #4
 800992e:	2b00      	cmp	r3, #0
 8009930:	d00a      	beq.n	8009948 <HAL_UART_IRQHandler+0xb0>
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	f003 0301 	and.w	r3, r3, #1
 8009938:	2b00      	cmp	r3, #0
 800993a:	d005      	beq.n	8009948 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009940:	f043 0202 	orr.w	r2, r3, #2
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009948:	69fb      	ldr	r3, [r7, #28]
 800994a:	f003 0302 	and.w	r3, r3, #2
 800994e:	2b00      	cmp	r3, #0
 8009950:	d00a      	beq.n	8009968 <HAL_UART_IRQHandler+0xd0>
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	f003 0301 	and.w	r3, r3, #1
 8009958:	2b00      	cmp	r3, #0
 800995a:	d005      	beq.n	8009968 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009960:	f043 0204 	orr.w	r2, r3, #4
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009968:	69fb      	ldr	r3, [r7, #28]
 800996a:	f003 0308 	and.w	r3, r3, #8
 800996e:	2b00      	cmp	r3, #0
 8009970:	d00f      	beq.n	8009992 <HAL_UART_IRQHandler+0xfa>
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	f003 0320 	and.w	r3, r3, #32
 8009978:	2b00      	cmp	r3, #0
 800997a:	d104      	bne.n	8009986 <HAL_UART_IRQHandler+0xee>
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	f003 0301 	and.w	r3, r3, #1
 8009982:	2b00      	cmp	r3, #0
 8009984:	d005      	beq.n	8009992 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800998a:	f043 0208 	orr.w	r2, r3, #8
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009996:	2b00      	cmp	r3, #0
 8009998:	d078      	beq.n	8009a8c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800999a:	69fb      	ldr	r3, [r7, #28]
 800999c:	f003 0320 	and.w	r3, r3, #32
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d007      	beq.n	80099b4 <HAL_UART_IRQHandler+0x11c>
 80099a4:	69bb      	ldr	r3, [r7, #24]
 80099a6:	f003 0320 	and.w	r3, r3, #32
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d002      	beq.n	80099b4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 f930 	bl	8009c14 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	695b      	ldr	r3, [r3, #20]
 80099ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099be:	2b40      	cmp	r3, #64	; 0x40
 80099c0:	bf0c      	ite	eq
 80099c2:	2301      	moveq	r3, #1
 80099c4:	2300      	movne	r3, #0
 80099c6:	b2db      	uxtb	r3, r3
 80099c8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099ce:	f003 0308 	and.w	r3, r3, #8
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d102      	bne.n	80099dc <HAL_UART_IRQHandler+0x144>
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d031      	beq.n	8009a40 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 f879 	bl	8009ad4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	695b      	ldr	r3, [r3, #20]
 80099e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ec:	2b40      	cmp	r3, #64	; 0x40
 80099ee:	d123      	bne.n	8009a38 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	695a      	ldr	r2, [r3, #20]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099fe:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d013      	beq.n	8009a30 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a0c:	4a21      	ldr	r2, [pc, #132]	; (8009a94 <HAL_UART_IRQHandler+0x1fc>)
 8009a0e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7fb f875 	bl	8004b04 <HAL_DMA_Abort_IT>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d016      	beq.n	8009a4e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009a2a:	4610      	mov	r0, r2
 8009a2c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a2e:	e00e      	b.n	8009a4e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 f845 	bl	8009ac0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a36:	e00a      	b.n	8009a4e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 f841 	bl	8009ac0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a3e:	e006      	b.n	8009a4e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 f83d 	bl	8009ac0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8009a4c:	e01e      	b.n	8009a8c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a4e:	bf00      	nop
    return;
 8009a50:	e01c      	b.n	8009a8c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d008      	beq.n	8009a6e <HAL_UART_IRQHandler+0x1d6>
 8009a5c:	69bb      	ldr	r3, [r7, #24]
 8009a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d003      	beq.n	8009a6e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 f866 	bl	8009b38 <UART_Transmit_IT>
    return;
 8009a6c:	e00f      	b.n	8009a8e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009a6e:	69fb      	ldr	r3, [r7, #28]
 8009a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d00a      	beq.n	8009a8e <HAL_UART_IRQHandler+0x1f6>
 8009a78:	69bb      	ldr	r3, [r7, #24]
 8009a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d005      	beq.n	8009a8e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 f8ae 	bl	8009be4 <UART_EndTransmit_IT>
    return;
 8009a88:	bf00      	nop
 8009a8a:	e000      	b.n	8009a8e <HAL_UART_IRQHandler+0x1f6>
    return;
 8009a8c:	bf00      	nop
  }
}
 8009a8e:	3720      	adds	r7, #32
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}
 8009a94:	08009b11 	.word	0x08009b11

08009a98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b083      	sub	sp, #12
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009aa0:	bf00      	nop
 8009aa2:	370c      	adds	r7, #12
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr

08009aac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009ab4:	bf00      	nop
 8009ab6:	370c      	adds	r7, #12
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b083      	sub	sp, #12
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009ac8:	bf00      	nop
 8009aca:	370c      	adds	r7, #12
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr

08009ad4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	68da      	ldr	r2, [r3, #12]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009aea:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	695a      	ldr	r2, [r3, #20]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f022 0201 	bic.w	r2, r2, #1
 8009afa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2220      	movs	r2, #32
 8009b00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8009b04:	bf00      	nop
 8009b06:	370c      	adds	r7, #12
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr

08009b10 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2200      	movs	r2, #0
 8009b22:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2200      	movs	r2, #0
 8009b28:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b2a:	68f8      	ldr	r0, [r7, #12]
 8009b2c:	f7ff ffc8 	bl	8009ac0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b30:	bf00      	nop
 8009b32:	3710      	adds	r7, #16
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b085      	sub	sp, #20
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009b46:	b2db      	uxtb	r3, r3
 8009b48:	2b21      	cmp	r3, #33	; 0x21
 8009b4a:	d144      	bne.n	8009bd6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b54:	d11a      	bne.n	8009b8c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6a1b      	ldr	r3, [r3, #32]
 8009b5a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	881b      	ldrh	r3, [r3, #0]
 8009b60:	461a      	mov	r2, r3
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b6a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	691b      	ldr	r3, [r3, #16]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d105      	bne.n	8009b80 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6a1b      	ldr	r3, [r3, #32]
 8009b78:	1c9a      	adds	r2, r3, #2
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	621a      	str	r2, [r3, #32]
 8009b7e:	e00e      	b.n	8009b9e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6a1b      	ldr	r3, [r3, #32]
 8009b84:	1c5a      	adds	r2, r3, #1
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	621a      	str	r2, [r3, #32]
 8009b8a:	e008      	b.n	8009b9e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6a1b      	ldr	r3, [r3, #32]
 8009b90:	1c59      	adds	r1, r3, #1
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	6211      	str	r1, [r2, #32]
 8009b96:	781a      	ldrb	r2, [r3, #0]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	3b01      	subs	r3, #1
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	4619      	mov	r1, r3
 8009bac:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d10f      	bne.n	8009bd2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	68da      	ldr	r2, [r3, #12]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009bc0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	68da      	ldr	r2, [r3, #12]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009bd0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	e000      	b.n	8009bd8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009bd6:	2302      	movs	r3, #2
  }
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3714      	adds	r7, #20
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr

08009be4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	68da      	ldr	r2, [r3, #12]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bfa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2220      	movs	r2, #32
 8009c00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f7ff ff47 	bl	8009a98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009c0a:	2300      	movs	r3, #0
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3708      	adds	r7, #8
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	2b22      	cmp	r3, #34	; 0x22
 8009c26:	d171      	bne.n	8009d0c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c30:	d123      	bne.n	8009c7a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c36:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	691b      	ldr	r3, [r3, #16]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d10e      	bne.n	8009c5e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c4c:	b29a      	uxth	r2, r3
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c56:	1c9a      	adds	r2, r3, #2
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	629a      	str	r2, [r3, #40]	; 0x28
 8009c5c:	e029      	b.n	8009cb2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	b2db      	uxtb	r3, r3
 8009c68:	b29a      	uxth	r2, r3
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c72:	1c5a      	adds	r2, r3, #1
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	629a      	str	r2, [r3, #40]	; 0x28
 8009c78:	e01b      	b.n	8009cb2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	691b      	ldr	r3, [r3, #16]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d10a      	bne.n	8009c98 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	6858      	ldr	r0, [r3, #4]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c8c:	1c59      	adds	r1, r3, #1
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	6291      	str	r1, [r2, #40]	; 0x28
 8009c92:	b2c2      	uxtb	r2, r0
 8009c94:	701a      	strb	r2, [r3, #0]
 8009c96:	e00c      	b.n	8009cb2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	b2da      	uxtb	r2, r3
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ca4:	1c58      	adds	r0, r3, #1
 8009ca6:	6879      	ldr	r1, [r7, #4]
 8009ca8:	6288      	str	r0, [r1, #40]	; 0x28
 8009caa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009cae:	b2d2      	uxtb	r2, r2
 8009cb0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	3b01      	subs	r3, #1
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d120      	bne.n	8009d08 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	68da      	ldr	r2, [r3, #12]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f022 0220 	bic.w	r2, r2, #32
 8009cd4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	68da      	ldr	r2, [r3, #12]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009ce4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	695a      	ldr	r2, [r3, #20]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f022 0201 	bic.w	r2, r2, #1
 8009cf4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2220      	movs	r2, #32
 8009cfa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f7ff fed4 	bl	8009aac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009d04:	2300      	movs	r3, #0
 8009d06:	e002      	b.n	8009d0e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	e000      	b.n	8009d0e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8009d0c:	2302      	movs	r3, #2
  }
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3710      	adds	r7, #16
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
	...

08009d18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d1c:	b085      	sub	sp, #20
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	691b      	ldr	r3, [r3, #16]
 8009d28:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	68da      	ldr	r2, [r3, #12]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	430a      	orrs	r2, r1
 8009d36:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	689a      	ldr	r2, [r3, #8]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	691b      	ldr	r3, [r3, #16]
 8009d40:	431a      	orrs	r2, r3
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	695b      	ldr	r3, [r3, #20]
 8009d46:	431a      	orrs	r2, r3
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	69db      	ldr	r3, [r3, #28]
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009d5a:	f023 030c 	bic.w	r3, r3, #12
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	6812      	ldr	r2, [r2, #0]
 8009d62:	68f9      	ldr	r1, [r7, #12]
 8009d64:	430b      	orrs	r3, r1
 8009d66:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	695b      	ldr	r3, [r3, #20]
 8009d6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	699a      	ldr	r2, [r3, #24]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	430a      	orrs	r2, r1
 8009d7c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	69db      	ldr	r3, [r3, #28]
 8009d82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d86:	f040 8199 	bne.w	800a0bc <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4ac6      	ldr	r2, [pc, #792]	; (800a0a8 <UART_SetConfig+0x390>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d00f      	beq.n	8009db4 <UART_SetConfig+0x9c>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4ac4      	ldr	r2, [pc, #784]	; (800a0ac <UART_SetConfig+0x394>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d00a      	beq.n	8009db4 <UART_SetConfig+0x9c>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	4ac3      	ldr	r2, [pc, #780]	; (800a0b0 <UART_SetConfig+0x398>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d005      	beq.n	8009db4 <UART_SetConfig+0x9c>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4ac1      	ldr	r2, [pc, #772]	; (800a0b4 <UART_SetConfig+0x39c>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	f040 80bd 	bne.w	8009f2e <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009db4:	f7fd fed0 	bl	8007b58 <HAL_RCC_GetPCLK2Freq>
 8009db8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	461d      	mov	r5, r3
 8009dbe:	f04f 0600 	mov.w	r6, #0
 8009dc2:	46a8      	mov	r8, r5
 8009dc4:	46b1      	mov	r9, r6
 8009dc6:	eb18 0308 	adds.w	r3, r8, r8
 8009dca:	eb49 0409 	adc.w	r4, r9, r9
 8009dce:	4698      	mov	r8, r3
 8009dd0:	46a1      	mov	r9, r4
 8009dd2:	eb18 0805 	adds.w	r8, r8, r5
 8009dd6:	eb49 0906 	adc.w	r9, r9, r6
 8009dda:	f04f 0100 	mov.w	r1, #0
 8009dde:	f04f 0200 	mov.w	r2, #0
 8009de2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009de6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009dea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009dee:	4688      	mov	r8, r1
 8009df0:	4691      	mov	r9, r2
 8009df2:	eb18 0005 	adds.w	r0, r8, r5
 8009df6:	eb49 0106 	adc.w	r1, r9, r6
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	461d      	mov	r5, r3
 8009e00:	f04f 0600 	mov.w	r6, #0
 8009e04:	196b      	adds	r3, r5, r5
 8009e06:	eb46 0406 	adc.w	r4, r6, r6
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	4623      	mov	r3, r4
 8009e0e:	f7f6 fa07 	bl	8000220 <__aeabi_uldivmod>
 8009e12:	4603      	mov	r3, r0
 8009e14:	460c      	mov	r4, r1
 8009e16:	461a      	mov	r2, r3
 8009e18:	4ba7      	ldr	r3, [pc, #668]	; (800a0b8 <UART_SetConfig+0x3a0>)
 8009e1a:	fba3 2302 	umull	r2, r3, r3, r2
 8009e1e:	095b      	lsrs	r3, r3, #5
 8009e20:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	461d      	mov	r5, r3
 8009e28:	f04f 0600 	mov.w	r6, #0
 8009e2c:	46a9      	mov	r9, r5
 8009e2e:	46b2      	mov	sl, r6
 8009e30:	eb19 0309 	adds.w	r3, r9, r9
 8009e34:	eb4a 040a 	adc.w	r4, sl, sl
 8009e38:	4699      	mov	r9, r3
 8009e3a:	46a2      	mov	sl, r4
 8009e3c:	eb19 0905 	adds.w	r9, r9, r5
 8009e40:	eb4a 0a06 	adc.w	sl, sl, r6
 8009e44:	f04f 0100 	mov.w	r1, #0
 8009e48:	f04f 0200 	mov.w	r2, #0
 8009e4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009e50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009e54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009e58:	4689      	mov	r9, r1
 8009e5a:	4692      	mov	sl, r2
 8009e5c:	eb19 0005 	adds.w	r0, r9, r5
 8009e60:	eb4a 0106 	adc.w	r1, sl, r6
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	461d      	mov	r5, r3
 8009e6a:	f04f 0600 	mov.w	r6, #0
 8009e6e:	196b      	adds	r3, r5, r5
 8009e70:	eb46 0406 	adc.w	r4, r6, r6
 8009e74:	461a      	mov	r2, r3
 8009e76:	4623      	mov	r3, r4
 8009e78:	f7f6 f9d2 	bl	8000220 <__aeabi_uldivmod>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	460c      	mov	r4, r1
 8009e80:	461a      	mov	r2, r3
 8009e82:	4b8d      	ldr	r3, [pc, #564]	; (800a0b8 <UART_SetConfig+0x3a0>)
 8009e84:	fba3 1302 	umull	r1, r3, r3, r2
 8009e88:	095b      	lsrs	r3, r3, #5
 8009e8a:	2164      	movs	r1, #100	; 0x64
 8009e8c:	fb01 f303 	mul.w	r3, r1, r3
 8009e90:	1ad3      	subs	r3, r2, r3
 8009e92:	00db      	lsls	r3, r3, #3
 8009e94:	3332      	adds	r3, #50	; 0x32
 8009e96:	4a88      	ldr	r2, [pc, #544]	; (800a0b8 <UART_SetConfig+0x3a0>)
 8009e98:	fba2 2303 	umull	r2, r3, r2, r3
 8009e9c:	095b      	lsrs	r3, r3, #5
 8009e9e:	005b      	lsls	r3, r3, #1
 8009ea0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009ea4:	4498      	add	r8, r3
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	461d      	mov	r5, r3
 8009eaa:	f04f 0600 	mov.w	r6, #0
 8009eae:	46a9      	mov	r9, r5
 8009eb0:	46b2      	mov	sl, r6
 8009eb2:	eb19 0309 	adds.w	r3, r9, r9
 8009eb6:	eb4a 040a 	adc.w	r4, sl, sl
 8009eba:	4699      	mov	r9, r3
 8009ebc:	46a2      	mov	sl, r4
 8009ebe:	eb19 0905 	adds.w	r9, r9, r5
 8009ec2:	eb4a 0a06 	adc.w	sl, sl, r6
 8009ec6:	f04f 0100 	mov.w	r1, #0
 8009eca:	f04f 0200 	mov.w	r2, #0
 8009ece:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009ed2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009ed6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009eda:	4689      	mov	r9, r1
 8009edc:	4692      	mov	sl, r2
 8009ede:	eb19 0005 	adds.w	r0, r9, r5
 8009ee2:	eb4a 0106 	adc.w	r1, sl, r6
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	461d      	mov	r5, r3
 8009eec:	f04f 0600 	mov.w	r6, #0
 8009ef0:	196b      	adds	r3, r5, r5
 8009ef2:	eb46 0406 	adc.w	r4, r6, r6
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	4623      	mov	r3, r4
 8009efa:	f7f6 f991 	bl	8000220 <__aeabi_uldivmod>
 8009efe:	4603      	mov	r3, r0
 8009f00:	460c      	mov	r4, r1
 8009f02:	461a      	mov	r2, r3
 8009f04:	4b6c      	ldr	r3, [pc, #432]	; (800a0b8 <UART_SetConfig+0x3a0>)
 8009f06:	fba3 1302 	umull	r1, r3, r3, r2
 8009f0a:	095b      	lsrs	r3, r3, #5
 8009f0c:	2164      	movs	r1, #100	; 0x64
 8009f0e:	fb01 f303 	mul.w	r3, r1, r3
 8009f12:	1ad3      	subs	r3, r2, r3
 8009f14:	00db      	lsls	r3, r3, #3
 8009f16:	3332      	adds	r3, #50	; 0x32
 8009f18:	4a67      	ldr	r2, [pc, #412]	; (800a0b8 <UART_SetConfig+0x3a0>)
 8009f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f1e:	095b      	lsrs	r3, r3, #5
 8009f20:	f003 0207 	and.w	r2, r3, #7
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4442      	add	r2, r8
 8009f2a:	609a      	str	r2, [r3, #8]
 8009f2c:	e27d      	b.n	800a42a <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009f2e:	f7fd fdff 	bl	8007b30 <HAL_RCC_GetPCLK1Freq>
 8009f32:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	461d      	mov	r5, r3
 8009f38:	f04f 0600 	mov.w	r6, #0
 8009f3c:	46a8      	mov	r8, r5
 8009f3e:	46b1      	mov	r9, r6
 8009f40:	eb18 0308 	adds.w	r3, r8, r8
 8009f44:	eb49 0409 	adc.w	r4, r9, r9
 8009f48:	4698      	mov	r8, r3
 8009f4a:	46a1      	mov	r9, r4
 8009f4c:	eb18 0805 	adds.w	r8, r8, r5
 8009f50:	eb49 0906 	adc.w	r9, r9, r6
 8009f54:	f04f 0100 	mov.w	r1, #0
 8009f58:	f04f 0200 	mov.w	r2, #0
 8009f5c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009f60:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009f64:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009f68:	4688      	mov	r8, r1
 8009f6a:	4691      	mov	r9, r2
 8009f6c:	eb18 0005 	adds.w	r0, r8, r5
 8009f70:	eb49 0106 	adc.w	r1, r9, r6
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	461d      	mov	r5, r3
 8009f7a:	f04f 0600 	mov.w	r6, #0
 8009f7e:	196b      	adds	r3, r5, r5
 8009f80:	eb46 0406 	adc.w	r4, r6, r6
 8009f84:	461a      	mov	r2, r3
 8009f86:	4623      	mov	r3, r4
 8009f88:	f7f6 f94a 	bl	8000220 <__aeabi_uldivmod>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	460c      	mov	r4, r1
 8009f90:	461a      	mov	r2, r3
 8009f92:	4b49      	ldr	r3, [pc, #292]	; (800a0b8 <UART_SetConfig+0x3a0>)
 8009f94:	fba3 2302 	umull	r2, r3, r3, r2
 8009f98:	095b      	lsrs	r3, r3, #5
 8009f9a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	461d      	mov	r5, r3
 8009fa2:	f04f 0600 	mov.w	r6, #0
 8009fa6:	46a9      	mov	r9, r5
 8009fa8:	46b2      	mov	sl, r6
 8009faa:	eb19 0309 	adds.w	r3, r9, r9
 8009fae:	eb4a 040a 	adc.w	r4, sl, sl
 8009fb2:	4699      	mov	r9, r3
 8009fb4:	46a2      	mov	sl, r4
 8009fb6:	eb19 0905 	adds.w	r9, r9, r5
 8009fba:	eb4a 0a06 	adc.w	sl, sl, r6
 8009fbe:	f04f 0100 	mov.w	r1, #0
 8009fc2:	f04f 0200 	mov.w	r2, #0
 8009fc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009fca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009fce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009fd2:	4689      	mov	r9, r1
 8009fd4:	4692      	mov	sl, r2
 8009fd6:	eb19 0005 	adds.w	r0, r9, r5
 8009fda:	eb4a 0106 	adc.w	r1, sl, r6
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	461d      	mov	r5, r3
 8009fe4:	f04f 0600 	mov.w	r6, #0
 8009fe8:	196b      	adds	r3, r5, r5
 8009fea:	eb46 0406 	adc.w	r4, r6, r6
 8009fee:	461a      	mov	r2, r3
 8009ff0:	4623      	mov	r3, r4
 8009ff2:	f7f6 f915 	bl	8000220 <__aeabi_uldivmod>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	460c      	mov	r4, r1
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	4b2e      	ldr	r3, [pc, #184]	; (800a0b8 <UART_SetConfig+0x3a0>)
 8009ffe:	fba3 1302 	umull	r1, r3, r3, r2
 800a002:	095b      	lsrs	r3, r3, #5
 800a004:	2164      	movs	r1, #100	; 0x64
 800a006:	fb01 f303 	mul.w	r3, r1, r3
 800a00a:	1ad3      	subs	r3, r2, r3
 800a00c:	00db      	lsls	r3, r3, #3
 800a00e:	3332      	adds	r3, #50	; 0x32
 800a010:	4a29      	ldr	r2, [pc, #164]	; (800a0b8 <UART_SetConfig+0x3a0>)
 800a012:	fba2 2303 	umull	r2, r3, r2, r3
 800a016:	095b      	lsrs	r3, r3, #5
 800a018:	005b      	lsls	r3, r3, #1
 800a01a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a01e:	4498      	add	r8, r3
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	461d      	mov	r5, r3
 800a024:	f04f 0600 	mov.w	r6, #0
 800a028:	46a9      	mov	r9, r5
 800a02a:	46b2      	mov	sl, r6
 800a02c:	eb19 0309 	adds.w	r3, r9, r9
 800a030:	eb4a 040a 	adc.w	r4, sl, sl
 800a034:	4699      	mov	r9, r3
 800a036:	46a2      	mov	sl, r4
 800a038:	eb19 0905 	adds.w	r9, r9, r5
 800a03c:	eb4a 0a06 	adc.w	sl, sl, r6
 800a040:	f04f 0100 	mov.w	r1, #0
 800a044:	f04f 0200 	mov.w	r2, #0
 800a048:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a04c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a050:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a054:	4689      	mov	r9, r1
 800a056:	4692      	mov	sl, r2
 800a058:	eb19 0005 	adds.w	r0, r9, r5
 800a05c:	eb4a 0106 	adc.w	r1, sl, r6
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	461d      	mov	r5, r3
 800a066:	f04f 0600 	mov.w	r6, #0
 800a06a:	196b      	adds	r3, r5, r5
 800a06c:	eb46 0406 	adc.w	r4, r6, r6
 800a070:	461a      	mov	r2, r3
 800a072:	4623      	mov	r3, r4
 800a074:	f7f6 f8d4 	bl	8000220 <__aeabi_uldivmod>
 800a078:	4603      	mov	r3, r0
 800a07a:	460c      	mov	r4, r1
 800a07c:	461a      	mov	r2, r3
 800a07e:	4b0e      	ldr	r3, [pc, #56]	; (800a0b8 <UART_SetConfig+0x3a0>)
 800a080:	fba3 1302 	umull	r1, r3, r3, r2
 800a084:	095b      	lsrs	r3, r3, #5
 800a086:	2164      	movs	r1, #100	; 0x64
 800a088:	fb01 f303 	mul.w	r3, r1, r3
 800a08c:	1ad3      	subs	r3, r2, r3
 800a08e:	00db      	lsls	r3, r3, #3
 800a090:	3332      	adds	r3, #50	; 0x32
 800a092:	4a09      	ldr	r2, [pc, #36]	; (800a0b8 <UART_SetConfig+0x3a0>)
 800a094:	fba2 2303 	umull	r2, r3, r2, r3
 800a098:	095b      	lsrs	r3, r3, #5
 800a09a:	f003 0207 	and.w	r2, r3, #7
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4442      	add	r2, r8
 800a0a4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800a0a6:	e1c0      	b.n	800a42a <UART_SetConfig+0x712>
 800a0a8:	40011000 	.word	0x40011000
 800a0ac:	40011400 	.word	0x40011400
 800a0b0:	40011800 	.word	0x40011800
 800a0b4:	40011c00 	.word	0x40011c00
 800a0b8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4adc      	ldr	r2, [pc, #880]	; (800a434 <UART_SetConfig+0x71c>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d00f      	beq.n	800a0e6 <UART_SetConfig+0x3ce>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4adb      	ldr	r2, [pc, #876]	; (800a438 <UART_SetConfig+0x720>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d00a      	beq.n	800a0e6 <UART_SetConfig+0x3ce>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4ad9      	ldr	r2, [pc, #868]	; (800a43c <UART_SetConfig+0x724>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d005      	beq.n	800a0e6 <UART_SetConfig+0x3ce>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4ad8      	ldr	r2, [pc, #864]	; (800a440 <UART_SetConfig+0x728>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	f040 80d1 	bne.w	800a288 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 800a0e6:	f7fd fd37 	bl	8007b58 <HAL_RCC_GetPCLK2Freq>
 800a0ea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	469a      	mov	sl, r3
 800a0f0:	f04f 0b00 	mov.w	fp, #0
 800a0f4:	46d0      	mov	r8, sl
 800a0f6:	46d9      	mov	r9, fp
 800a0f8:	eb18 0308 	adds.w	r3, r8, r8
 800a0fc:	eb49 0409 	adc.w	r4, r9, r9
 800a100:	4698      	mov	r8, r3
 800a102:	46a1      	mov	r9, r4
 800a104:	eb18 080a 	adds.w	r8, r8, sl
 800a108:	eb49 090b 	adc.w	r9, r9, fp
 800a10c:	f04f 0100 	mov.w	r1, #0
 800a110:	f04f 0200 	mov.w	r2, #0
 800a114:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a118:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a11c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a120:	4688      	mov	r8, r1
 800a122:	4691      	mov	r9, r2
 800a124:	eb1a 0508 	adds.w	r5, sl, r8
 800a128:	eb4b 0609 	adc.w	r6, fp, r9
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	4619      	mov	r1, r3
 800a132:	f04f 0200 	mov.w	r2, #0
 800a136:	f04f 0300 	mov.w	r3, #0
 800a13a:	f04f 0400 	mov.w	r4, #0
 800a13e:	0094      	lsls	r4, r2, #2
 800a140:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a144:	008b      	lsls	r3, r1, #2
 800a146:	461a      	mov	r2, r3
 800a148:	4623      	mov	r3, r4
 800a14a:	4628      	mov	r0, r5
 800a14c:	4631      	mov	r1, r6
 800a14e:	f7f6 f867 	bl	8000220 <__aeabi_uldivmod>
 800a152:	4603      	mov	r3, r0
 800a154:	460c      	mov	r4, r1
 800a156:	461a      	mov	r2, r3
 800a158:	4bba      	ldr	r3, [pc, #744]	; (800a444 <UART_SetConfig+0x72c>)
 800a15a:	fba3 2302 	umull	r2, r3, r3, r2
 800a15e:	095b      	lsrs	r3, r3, #5
 800a160:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	469b      	mov	fp, r3
 800a168:	f04f 0c00 	mov.w	ip, #0
 800a16c:	46d9      	mov	r9, fp
 800a16e:	46e2      	mov	sl, ip
 800a170:	eb19 0309 	adds.w	r3, r9, r9
 800a174:	eb4a 040a 	adc.w	r4, sl, sl
 800a178:	4699      	mov	r9, r3
 800a17a:	46a2      	mov	sl, r4
 800a17c:	eb19 090b 	adds.w	r9, r9, fp
 800a180:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a184:	f04f 0100 	mov.w	r1, #0
 800a188:	f04f 0200 	mov.w	r2, #0
 800a18c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a190:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a194:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a198:	4689      	mov	r9, r1
 800a19a:	4692      	mov	sl, r2
 800a19c:	eb1b 0509 	adds.w	r5, fp, r9
 800a1a0:	eb4c 060a 	adc.w	r6, ip, sl
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	f04f 0200 	mov.w	r2, #0
 800a1ae:	f04f 0300 	mov.w	r3, #0
 800a1b2:	f04f 0400 	mov.w	r4, #0
 800a1b6:	0094      	lsls	r4, r2, #2
 800a1b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a1bc:	008b      	lsls	r3, r1, #2
 800a1be:	461a      	mov	r2, r3
 800a1c0:	4623      	mov	r3, r4
 800a1c2:	4628      	mov	r0, r5
 800a1c4:	4631      	mov	r1, r6
 800a1c6:	f7f6 f82b 	bl	8000220 <__aeabi_uldivmod>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	460c      	mov	r4, r1
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	4b9c      	ldr	r3, [pc, #624]	; (800a444 <UART_SetConfig+0x72c>)
 800a1d2:	fba3 1302 	umull	r1, r3, r3, r2
 800a1d6:	095b      	lsrs	r3, r3, #5
 800a1d8:	2164      	movs	r1, #100	; 0x64
 800a1da:	fb01 f303 	mul.w	r3, r1, r3
 800a1de:	1ad3      	subs	r3, r2, r3
 800a1e0:	011b      	lsls	r3, r3, #4
 800a1e2:	3332      	adds	r3, #50	; 0x32
 800a1e4:	4a97      	ldr	r2, [pc, #604]	; (800a444 <UART_SetConfig+0x72c>)
 800a1e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a1ea:	095b      	lsrs	r3, r3, #5
 800a1ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a1f0:	4498      	add	r8, r3
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	469b      	mov	fp, r3
 800a1f6:	f04f 0c00 	mov.w	ip, #0
 800a1fa:	46d9      	mov	r9, fp
 800a1fc:	46e2      	mov	sl, ip
 800a1fe:	eb19 0309 	adds.w	r3, r9, r9
 800a202:	eb4a 040a 	adc.w	r4, sl, sl
 800a206:	4699      	mov	r9, r3
 800a208:	46a2      	mov	sl, r4
 800a20a:	eb19 090b 	adds.w	r9, r9, fp
 800a20e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a212:	f04f 0100 	mov.w	r1, #0
 800a216:	f04f 0200 	mov.w	r2, #0
 800a21a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a21e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a222:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a226:	4689      	mov	r9, r1
 800a228:	4692      	mov	sl, r2
 800a22a:	eb1b 0509 	adds.w	r5, fp, r9
 800a22e:	eb4c 060a 	adc.w	r6, ip, sl
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	4619      	mov	r1, r3
 800a238:	f04f 0200 	mov.w	r2, #0
 800a23c:	f04f 0300 	mov.w	r3, #0
 800a240:	f04f 0400 	mov.w	r4, #0
 800a244:	0094      	lsls	r4, r2, #2
 800a246:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a24a:	008b      	lsls	r3, r1, #2
 800a24c:	461a      	mov	r2, r3
 800a24e:	4623      	mov	r3, r4
 800a250:	4628      	mov	r0, r5
 800a252:	4631      	mov	r1, r6
 800a254:	f7f5 ffe4 	bl	8000220 <__aeabi_uldivmod>
 800a258:	4603      	mov	r3, r0
 800a25a:	460c      	mov	r4, r1
 800a25c:	461a      	mov	r2, r3
 800a25e:	4b79      	ldr	r3, [pc, #484]	; (800a444 <UART_SetConfig+0x72c>)
 800a260:	fba3 1302 	umull	r1, r3, r3, r2
 800a264:	095b      	lsrs	r3, r3, #5
 800a266:	2164      	movs	r1, #100	; 0x64
 800a268:	fb01 f303 	mul.w	r3, r1, r3
 800a26c:	1ad3      	subs	r3, r2, r3
 800a26e:	011b      	lsls	r3, r3, #4
 800a270:	3332      	adds	r3, #50	; 0x32
 800a272:	4a74      	ldr	r2, [pc, #464]	; (800a444 <UART_SetConfig+0x72c>)
 800a274:	fba2 2303 	umull	r2, r3, r2, r3
 800a278:	095b      	lsrs	r3, r3, #5
 800a27a:	f003 020f 	and.w	r2, r3, #15
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4442      	add	r2, r8
 800a284:	609a      	str	r2, [r3, #8]
 800a286:	e0d0      	b.n	800a42a <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 800a288:	f7fd fc52 	bl	8007b30 <HAL_RCC_GetPCLK1Freq>
 800a28c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	469a      	mov	sl, r3
 800a292:	f04f 0b00 	mov.w	fp, #0
 800a296:	46d0      	mov	r8, sl
 800a298:	46d9      	mov	r9, fp
 800a29a:	eb18 0308 	adds.w	r3, r8, r8
 800a29e:	eb49 0409 	adc.w	r4, r9, r9
 800a2a2:	4698      	mov	r8, r3
 800a2a4:	46a1      	mov	r9, r4
 800a2a6:	eb18 080a 	adds.w	r8, r8, sl
 800a2aa:	eb49 090b 	adc.w	r9, r9, fp
 800a2ae:	f04f 0100 	mov.w	r1, #0
 800a2b2:	f04f 0200 	mov.w	r2, #0
 800a2b6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a2ba:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a2be:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a2c2:	4688      	mov	r8, r1
 800a2c4:	4691      	mov	r9, r2
 800a2c6:	eb1a 0508 	adds.w	r5, sl, r8
 800a2ca:	eb4b 0609 	adc.w	r6, fp, r9
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	f04f 0200 	mov.w	r2, #0
 800a2d8:	f04f 0300 	mov.w	r3, #0
 800a2dc:	f04f 0400 	mov.w	r4, #0
 800a2e0:	0094      	lsls	r4, r2, #2
 800a2e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a2e6:	008b      	lsls	r3, r1, #2
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	4623      	mov	r3, r4
 800a2ec:	4628      	mov	r0, r5
 800a2ee:	4631      	mov	r1, r6
 800a2f0:	f7f5 ff96 	bl	8000220 <__aeabi_uldivmod>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	460c      	mov	r4, r1
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	4b52      	ldr	r3, [pc, #328]	; (800a444 <UART_SetConfig+0x72c>)
 800a2fc:	fba3 2302 	umull	r2, r3, r3, r2
 800a300:	095b      	lsrs	r3, r3, #5
 800a302:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	469b      	mov	fp, r3
 800a30a:	f04f 0c00 	mov.w	ip, #0
 800a30e:	46d9      	mov	r9, fp
 800a310:	46e2      	mov	sl, ip
 800a312:	eb19 0309 	adds.w	r3, r9, r9
 800a316:	eb4a 040a 	adc.w	r4, sl, sl
 800a31a:	4699      	mov	r9, r3
 800a31c:	46a2      	mov	sl, r4
 800a31e:	eb19 090b 	adds.w	r9, r9, fp
 800a322:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a326:	f04f 0100 	mov.w	r1, #0
 800a32a:	f04f 0200 	mov.w	r2, #0
 800a32e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a332:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a336:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a33a:	4689      	mov	r9, r1
 800a33c:	4692      	mov	sl, r2
 800a33e:	eb1b 0509 	adds.w	r5, fp, r9
 800a342:	eb4c 060a 	adc.w	r6, ip, sl
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	4619      	mov	r1, r3
 800a34c:	f04f 0200 	mov.w	r2, #0
 800a350:	f04f 0300 	mov.w	r3, #0
 800a354:	f04f 0400 	mov.w	r4, #0
 800a358:	0094      	lsls	r4, r2, #2
 800a35a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a35e:	008b      	lsls	r3, r1, #2
 800a360:	461a      	mov	r2, r3
 800a362:	4623      	mov	r3, r4
 800a364:	4628      	mov	r0, r5
 800a366:	4631      	mov	r1, r6
 800a368:	f7f5 ff5a 	bl	8000220 <__aeabi_uldivmod>
 800a36c:	4603      	mov	r3, r0
 800a36e:	460c      	mov	r4, r1
 800a370:	461a      	mov	r2, r3
 800a372:	4b34      	ldr	r3, [pc, #208]	; (800a444 <UART_SetConfig+0x72c>)
 800a374:	fba3 1302 	umull	r1, r3, r3, r2
 800a378:	095b      	lsrs	r3, r3, #5
 800a37a:	2164      	movs	r1, #100	; 0x64
 800a37c:	fb01 f303 	mul.w	r3, r1, r3
 800a380:	1ad3      	subs	r3, r2, r3
 800a382:	011b      	lsls	r3, r3, #4
 800a384:	3332      	adds	r3, #50	; 0x32
 800a386:	4a2f      	ldr	r2, [pc, #188]	; (800a444 <UART_SetConfig+0x72c>)
 800a388:	fba2 2303 	umull	r2, r3, r2, r3
 800a38c:	095b      	lsrs	r3, r3, #5
 800a38e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a392:	4498      	add	r8, r3
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	469b      	mov	fp, r3
 800a398:	f04f 0c00 	mov.w	ip, #0
 800a39c:	46d9      	mov	r9, fp
 800a39e:	46e2      	mov	sl, ip
 800a3a0:	eb19 0309 	adds.w	r3, r9, r9
 800a3a4:	eb4a 040a 	adc.w	r4, sl, sl
 800a3a8:	4699      	mov	r9, r3
 800a3aa:	46a2      	mov	sl, r4
 800a3ac:	eb19 090b 	adds.w	r9, r9, fp
 800a3b0:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a3b4:	f04f 0100 	mov.w	r1, #0
 800a3b8:	f04f 0200 	mov.w	r2, #0
 800a3bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a3c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a3c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a3c8:	4689      	mov	r9, r1
 800a3ca:	4692      	mov	sl, r2
 800a3cc:	eb1b 0509 	adds.w	r5, fp, r9
 800a3d0:	eb4c 060a 	adc.w	r6, ip, sl
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	4619      	mov	r1, r3
 800a3da:	f04f 0200 	mov.w	r2, #0
 800a3de:	f04f 0300 	mov.w	r3, #0
 800a3e2:	f04f 0400 	mov.w	r4, #0
 800a3e6:	0094      	lsls	r4, r2, #2
 800a3e8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a3ec:	008b      	lsls	r3, r1, #2
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	4623      	mov	r3, r4
 800a3f2:	4628      	mov	r0, r5
 800a3f4:	4631      	mov	r1, r6
 800a3f6:	f7f5 ff13 	bl	8000220 <__aeabi_uldivmod>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	460c      	mov	r4, r1
 800a3fe:	461a      	mov	r2, r3
 800a400:	4b10      	ldr	r3, [pc, #64]	; (800a444 <UART_SetConfig+0x72c>)
 800a402:	fba3 1302 	umull	r1, r3, r3, r2
 800a406:	095b      	lsrs	r3, r3, #5
 800a408:	2164      	movs	r1, #100	; 0x64
 800a40a:	fb01 f303 	mul.w	r3, r1, r3
 800a40e:	1ad3      	subs	r3, r2, r3
 800a410:	011b      	lsls	r3, r3, #4
 800a412:	3332      	adds	r3, #50	; 0x32
 800a414:	4a0b      	ldr	r2, [pc, #44]	; (800a444 <UART_SetConfig+0x72c>)
 800a416:	fba2 2303 	umull	r2, r3, r2, r3
 800a41a:	095b      	lsrs	r3, r3, #5
 800a41c:	f003 020f 	and.w	r2, r3, #15
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4442      	add	r2, r8
 800a426:	609a      	str	r2, [r3, #8]
}
 800a428:	e7ff      	b.n	800a42a <UART_SetConfig+0x712>
 800a42a:	bf00      	nop
 800a42c:	3714      	adds	r7, #20
 800a42e:	46bd      	mov	sp, r7
 800a430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a434:	40011000 	.word	0x40011000
 800a438:	40011400 	.word	0x40011400
 800a43c:	40011800 	.word	0x40011800
 800a440:	40011c00 	.word	0x40011c00
 800a444:	51eb851f 	.word	0x51eb851f

0800a448 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800a448:	b480      	push	{r7}
 800a44a:	b085      	sub	sp, #20
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800a452:	2300      	movs	r3, #0
 800a454:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	681a      	ldr	r2, [r3, #0]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a460:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 800a462:	68fa      	ldr	r2, [r7, #12]
 800a464:	4b2f      	ldr	r3, [pc, #188]	; (800a524 <FSMC_NORSRAM_Init+0xdc>)
 800a466:	4013      	ands	r3, r2
 800a468:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800a472:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800a478:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800a47e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800a484:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 800a48a:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800a490:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800a496:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800a49c:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800a4a2:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 800a4a8:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 800a4ae:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 800a4b4:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 800a4ba:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800a4bc:	68fa      	ldr	r2, [r7, #12]
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	2b08      	cmp	r3, #8
 800a4c8:	d103      	bne.n	800a4d2 <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4d0:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	68f9      	ldr	r1, [r7, #12]
 800a4da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4e6:	d10a      	bne.n	800a4fe <FSMC_NORSRAM_Init+0xb6>
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d006      	beq.n	800a4fe <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681a      	ldr	r2, [r3, #0]
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4f8:	431a      	orrs	r2, r3
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d006      	beq.n	800a514 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a50e:	431a      	orrs	r2, r3
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800a514:	2300      	movs	r3, #0
}
 800a516:	4618      	mov	r0, r3
 800a518:	3714      	adds	r7, #20
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr
 800a522:	bf00      	nop
 800a524:	ffc00480 	.word	0xffc00480

0800a528 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a528:	b480      	push	{r7}
 800a52a:	b087      	sub	sp, #28
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800a534:	2300      	movs	r3, #0
 800a536:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	1c5a      	adds	r2, r3, #1
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a542:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800a54a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a556:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800a55e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	68db      	ldr	r3, [r3, #12]
 800a564:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800a566:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	691b      	ldr	r3, [r3, #16]
 800a56c:	3b01      	subs	r3, #1
 800a56e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a570:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	695b      	ldr	r3, [r3, #20]
 800a576:	3b02      	subs	r3, #2
 800a578:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800a57a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a580:	4313      	orrs	r3, r2
 800a582:	697a      	ldr	r2, [r7, #20]
 800a584:	4313      	orrs	r3, r2
 800a586:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	1c5a      	adds	r2, r3, #1
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6979      	ldr	r1, [r7, #20]
 800a590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a59c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5a0:	d10e      	bne.n	800a5c0 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a5aa:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	691b      	ldr	r3, [r3, #16]
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	051b      	lsls	r3, r3, #20
 800a5b4:	697a      	ldr	r2, [r7, #20]
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	697a      	ldr	r2, [r7, #20]
 800a5be:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800a5c0:	2300      	movs	r3, #0
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	371c      	adds	r7, #28
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr
	...

0800a5d0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b087      	sub	sp, #28
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	60f8      	str	r0, [r7, #12]
 800a5d8:	60b9      	str	r1, [r7, #8]
 800a5da:	607a      	str	r2, [r7, #4]
 800a5dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5e8:	d122      	bne.n	800a630 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5f2:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800a5f4:	697a      	ldr	r2, [r7, #20]
 800a5f6:	4b15      	ldr	r3, [pc, #84]	; (800a64c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800a5f8:	4013      	ands	r3, r2
 800a5fa:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a606:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	689b      	ldr	r3, [r3, #8]
 800a60c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800a60e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	68db      	ldr	r3, [r3, #12]
 800a614:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800a616:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a61c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a61e:	697a      	ldr	r2, [r7, #20]
 800a620:	4313      	orrs	r3, r2
 800a622:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	687a      	ldr	r2, [r7, #4]
 800a628:	6979      	ldr	r1, [r7, #20]
 800a62a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a62e:	e005      	b.n	800a63c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800a638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800a63c:	2300      	movs	r3, #0
}
 800a63e:	4618      	mov	r0, r3
 800a640:	371c      	adds	r7, #28
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr
 800a64a:	bf00      	nop
 800a64c:	cff00000 	.word	0xcff00000

0800a650 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a650:	b084      	sub	sp, #16
 800a652:	b480      	push	{r7}
 800a654:	b085      	sub	sp, #20
 800a656:	af00      	add	r7, sp, #0
 800a658:	6078      	str	r0, [r7, #4]
 800a65a:	f107 001c 	add.w	r0, r7, #28
 800a65e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a662:	2300      	movs	r3, #0
 800a664:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a666:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a668:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a66a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a66e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a670:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a672:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a676:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a67a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a67c:	68fa      	ldr	r2, [r7, #12]
 800a67e:	4313      	orrs	r3, r2
 800a680:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800a68a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a68e:	68fa      	ldr	r2, [r7, #12]
 800a690:	431a      	orrs	r2, r3
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a696:	2300      	movs	r3, #0
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3714      	adds	r7, #20
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	b004      	add	sp, #16
 800a6a4:	4770      	bx	lr

0800a6a6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a6a6:	b480      	push	{r7}
 800a6a8:	b083      	sub	sp, #12
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	370c      	adds	r7, #12
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr

0800a6c0 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2203      	movs	r2, #3
 800a6cc:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800a6ce:	2002      	movs	r0, #2
 800a6d0:	f7f9 fc80 	bl	8003fd4 <HAL_Delay>
  
  return HAL_OK;
 800a6d4:	2300      	movs	r3, #0
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3708      	adds	r7, #8
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}

0800a6de <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a6de:	b480      	push	{r7}
 800a6e0:	b083      	sub	sp, #12
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f003 0303 	and.w	r3, r3, #3
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	370c      	adds	r7, #12
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr

0800a6fa <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a6fa:	b480      	push	{r7}
 800a6fc:	b085      	sub	sp, #20
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
 800a702:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a704:	2300      	movs	r3, #0
 800a706:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	681a      	ldr	r2, [r3, #0]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a718:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a71e:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a724:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a726:	68fa      	ldr	r2, [r7, #12]
 800a728:	4313      	orrs	r3, r2
 800a72a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a734:	f023 030f 	bic.w	r3, r3, #15
 800a738:	68fa      	ldr	r2, [r7, #12]
 800a73a:	431a      	orrs	r2, r3
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a740:	2300      	movs	r3, #0
}
 800a742:	4618      	mov	r0, r3
 800a744:	3714      	adds	r7, #20
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr

0800a74e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a74e:	b480      	push	{r7}
 800a750:	b083      	sub	sp, #12
 800a752:	af00      	add	r7, sp, #0
 800a754:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	691b      	ldr	r3, [r3, #16]
 800a75a:	b2db      	uxtb	r3, r3
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	370c      	adds	r7, #12
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr

0800a768 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a768:	b480      	push	{r7}
 800a76a:	b085      	sub	sp, #20
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	3314      	adds	r3, #20
 800a776:	461a      	mov	r2, r3
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	4413      	add	r3, r2
 800a77c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
}  
 800a782:	4618      	mov	r0, r3
 800a784:	3714      	adds	r7, #20
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr

0800a78e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a78e:	b480      	push	{r7}
 800a790:	b085      	sub	sp, #20
 800a792:	af00      	add	r7, sp, #0
 800a794:	6078      	str	r0, [r7, #4]
 800a796:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a798:	2300      	movs	r3, #0
 800a79a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	681a      	ldr	r2, [r3, #0]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	685a      	ldr	r2, [r3, #4]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a7b4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a7ba:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a7c0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a7c2:	68fa      	ldr	r2, [r7, #12]
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7cc:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	431a      	orrs	r2, r3
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a7d8:	2300      	movs	r3, #0

}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3714      	adds	r7, #20
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr

0800a7e6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a7e6:	b580      	push	{r7, lr}
 800a7e8:	b088      	sub	sp, #32
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	6078      	str	r0, [r7, #4]
 800a7ee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a7f4:	2310      	movs	r3, #16
 800a7f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a7f8:	2340      	movs	r3, #64	; 0x40
 800a7fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a800:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a804:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a806:	f107 0308 	add.w	r3, r7, #8
 800a80a:	4619      	mov	r1, r3
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f7ff ff74 	bl	800a6fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a812:	f241 3288 	movw	r2, #5000	; 0x1388
 800a816:	2110      	movs	r1, #16
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f000 f975 	bl	800ab08 <SDMMC_GetCmdResp1>
 800a81e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a820:	69fb      	ldr	r3, [r7, #28]
}
 800a822:	4618      	mov	r0, r3
 800a824:	3720      	adds	r7, #32
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}

0800a82a <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a82a:	b580      	push	{r7, lr}
 800a82c:	b08a      	sub	sp, #40	; 0x28
 800a82e:	af00      	add	r7, sp, #0
 800a830:	60f8      	str	r0, [r7, #12]
 800a832:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a83a:	2307      	movs	r3, #7
 800a83c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a83e:	2340      	movs	r3, #64	; 0x40
 800a840:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a842:	2300      	movs	r3, #0
 800a844:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a84a:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a84c:	f107 0310 	add.w	r3, r7, #16
 800a850:	4619      	mov	r1, r3
 800a852:	68f8      	ldr	r0, [r7, #12]
 800a854:	f7ff ff51 	bl	800a6fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a858:	f241 3288 	movw	r2, #5000	; 0x1388
 800a85c:	2107      	movs	r1, #7
 800a85e:	68f8      	ldr	r0, [r7, #12]
 800a860:	f000 f952 	bl	800ab08 <SDMMC_GetCmdResp1>
 800a864:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3728      	adds	r7, #40	; 0x28
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b088      	sub	sp, #32
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a878:	2300      	movs	r3, #0
 800a87a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a87c:	2300      	movs	r3, #0
 800a87e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a880:	2300      	movs	r3, #0
 800a882:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a884:	2300      	movs	r3, #0
 800a886:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a888:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a88c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a88e:	f107 0308 	add.w	r3, r7, #8
 800a892:	4619      	mov	r1, r3
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f7ff ff30 	bl	800a6fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 f90c 	bl	800aab8 <SDMMC_GetCmdError>
 800a8a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8a2:	69fb      	ldr	r3, [r7, #28]
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3720      	adds	r7, #32
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b088      	sub	sp, #32
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a8b4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a8b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a8ba:	2308      	movs	r3, #8
 800a8bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a8be:	2340      	movs	r3, #64	; 0x40
 800a8c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a8c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a8cc:	f107 0308 	add.w	r3, r7, #8
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f7ff ff11 	bl	800a6fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f000 faf5 	bl	800aec8 <SDMMC_GetCmdResp7>
 800a8de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8e0:	69fb      	ldr	r3, [r7, #28]
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3720      	adds	r7, #32
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}

0800a8ea <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a8ea:	b580      	push	{r7, lr}
 800a8ec:	b088      	sub	sp, #32
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	6078      	str	r0, [r7, #4]
 800a8f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a8f8:	2337      	movs	r3, #55	; 0x37
 800a8fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a8fc:	2340      	movs	r3, #64	; 0x40
 800a8fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a900:	2300      	movs	r3, #0
 800a902:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a908:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a90a:	f107 0308 	add.w	r3, r7, #8
 800a90e:	4619      	mov	r1, r3
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f7ff fef2 	bl	800a6fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a916:	f241 3288 	movw	r2, #5000	; 0x1388
 800a91a:	2137      	movs	r1, #55	; 0x37
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f000 f8f3 	bl	800ab08 <SDMMC_GetCmdResp1>
 800a922:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a924:	69fb      	ldr	r3, [r7, #28]
}
 800a926:	4618      	mov	r0, r3
 800a928:	3720      	adds	r7, #32
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}

0800a92e <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a92e:	b580      	push	{r7, lr}
 800a930:	b088      	sub	sp, #32
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
 800a936:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a93e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a942:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a944:	2329      	movs	r3, #41	; 0x29
 800a946:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a948:	2340      	movs	r3, #64	; 0x40
 800a94a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a94c:	2300      	movs	r3, #0
 800a94e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a950:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a954:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a956:	f107 0308 	add.w	r3, r7, #8
 800a95a:	4619      	mov	r1, r3
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f7ff fecc 	bl	800a6fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f000 fa02 	bl	800ad6c <SDMMC_GetCmdResp3>
 800a968:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a96a:	69fb      	ldr	r3, [r7, #28]
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3720      	adds	r7, #32
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}

0800a974 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b088      	sub	sp, #32
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a982:	2306      	movs	r3, #6
 800a984:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a986:	2340      	movs	r3, #64	; 0x40
 800a988:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a98a:	2300      	movs	r3, #0
 800a98c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a98e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a992:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a994:	f107 0308 	add.w	r3, r7, #8
 800a998:	4619      	mov	r1, r3
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f7ff fead 	bl	800a6fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800a9a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9a4:	2106      	movs	r1, #6
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 f8ae 	bl	800ab08 <SDMMC_GetCmdResp1>
 800a9ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9ae:	69fb      	ldr	r3, [r7, #28]
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3720      	adds	r7, #32
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b088      	sub	sp, #32
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a9c4:	2333      	movs	r3, #51	; 0x33
 800a9c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a9c8:	2340      	movs	r3, #64	; 0x40
 800a9ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a9d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a9d6:	f107 0308 	add.w	r3, r7, #8
 800a9da:	4619      	mov	r1, r3
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f7ff fe8c 	bl	800a6fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800a9e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9e6:	2133      	movs	r1, #51	; 0x33
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f000 f88d 	bl	800ab08 <SDMMC_GetCmdResp1>
 800a9ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9f0:	69fb      	ldr	r3, [r7, #28]
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3720      	adds	r7, #32
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}

0800a9fa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a9fa:	b580      	push	{r7, lr}
 800a9fc:	b088      	sub	sp, #32
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800aa02:	2300      	movs	r3, #0
 800aa04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800aa06:	2302      	movs	r3, #2
 800aa08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800aa0a:	23c0      	movs	r3, #192	; 0xc0
 800aa0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa16:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa18:	f107 0308 	add.w	r3, r7, #8
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f7ff fe6b 	bl	800a6fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f000 f95b 	bl	800ace0 <SDMMC_GetCmdResp2>
 800aa2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa2c:	69fb      	ldr	r3, [r7, #28]
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3720      	adds	r7, #32
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}

0800aa36 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800aa36:	b580      	push	{r7, lr}
 800aa38:	b088      	sub	sp, #32
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
 800aa3e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800aa44:	2309      	movs	r3, #9
 800aa46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800aa48:	23c0      	movs	r3, #192	; 0xc0
 800aa4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa54:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa56:	f107 0308 	add.w	r3, r7, #8
 800aa5a:	4619      	mov	r1, r3
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f7ff fe4c 	bl	800a6fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f000 f93c 	bl	800ace0 <SDMMC_GetCmdResp2>
 800aa68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa6a:	69fb      	ldr	r3, [r7, #28]
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3720      	adds	r7, #32
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b088      	sub	sp, #32
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800aa82:	2303      	movs	r3, #3
 800aa84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aa86:	2340      	movs	r3, #64	; 0x40
 800aa88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa94:	f107 0308 	add.w	r3, r7, #8
 800aa98:	4619      	mov	r1, r3
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f7ff fe2d 	bl	800a6fa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800aaa0:	683a      	ldr	r2, [r7, #0]
 800aaa2:	2103      	movs	r1, #3
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f000 f99b 	bl	800ade0 <SDMMC_GetCmdResp6>
 800aaaa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aaac:	69fb      	ldr	r3, [r7, #28]
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3720      	adds	r7, #32
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
	...

0800aab8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800aab8:	b490      	push	{r4, r7}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aac0:	4b0f      	ldr	r3, [pc, #60]	; (800ab00 <SDMMC_GetCmdError+0x48>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4a0f      	ldr	r2, [pc, #60]	; (800ab04 <SDMMC_GetCmdError+0x4c>)
 800aac6:	fba2 2303 	umull	r2, r3, r2, r3
 800aaca:	0a5b      	lsrs	r3, r3, #9
 800aacc:	f241 3288 	movw	r2, #5000	; 0x1388
 800aad0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800aad4:	4623      	mov	r3, r4
 800aad6:	1e5c      	subs	r4, r3, #1
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d102      	bne.n	800aae2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aadc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aae0:	e009      	b.n	800aaf6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d0f2      	beq.n	800aad4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	22c5      	movs	r2, #197	; 0xc5
 800aaf2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800aaf4:	2300      	movs	r3, #0
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3708      	adds	r7, #8
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bc90      	pop	{r4, r7}
 800aafe:	4770      	bx	lr
 800ab00:	200000a4 	.word	0x200000a4
 800ab04:	10624dd3 	.word	0x10624dd3

0800ab08 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ab08:	b590      	push	{r4, r7, lr}
 800ab0a:	b087      	sub	sp, #28
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	460b      	mov	r3, r1
 800ab12:	607a      	str	r2, [r7, #4]
 800ab14:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ab16:	4b6f      	ldr	r3, [pc, #444]	; (800acd4 <SDMMC_GetCmdResp1+0x1cc>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4a6f      	ldr	r2, [pc, #444]	; (800acd8 <SDMMC_GetCmdResp1+0x1d0>)
 800ab1c:	fba2 2303 	umull	r2, r3, r2, r3
 800ab20:	0a5b      	lsrs	r3, r3, #9
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ab28:	4623      	mov	r3, r4
 800ab2a:	1e5c      	subs	r4, r3, #1
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d102      	bne.n	800ab36 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ab30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ab34:	e0c9      	b.n	800acca <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab3a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d0f0      	beq.n	800ab28 <SDMMC_GetCmdResp1+0x20>
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d1eb      	bne.n	800ab28 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab54:	f003 0304 	and.w	r3, r3, #4
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d004      	beq.n	800ab66 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2204      	movs	r2, #4
 800ab60:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ab62:	2304      	movs	r3, #4
 800ab64:	e0b1      	b.n	800acca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab6a:	f003 0301 	and.w	r3, r3, #1
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d004      	beq.n	800ab7c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2201      	movs	r2, #1
 800ab76:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	e0a6      	b.n	800acca <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	22c5      	movs	r2, #197	; 0xc5
 800ab80:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ab82:	68f8      	ldr	r0, [r7, #12]
 800ab84:	f7ff fde3 	bl	800a74e <SDIO_GetCommandResponse>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	7afb      	ldrb	r3, [r7, #11]
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d001      	beq.n	800ab96 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab92:	2301      	movs	r3, #1
 800ab94:	e099      	b.n	800acca <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ab96:	2100      	movs	r1, #0
 800ab98:	68f8      	ldr	r0, [r7, #12]
 800ab9a:	f7ff fde5 	bl	800a768 <SDIO_GetResponse>
 800ab9e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800aba0:	693a      	ldr	r2, [r7, #16]
 800aba2:	4b4e      	ldr	r3, [pc, #312]	; (800acdc <SDMMC_GetCmdResp1+0x1d4>)
 800aba4:	4013      	ands	r3, r2
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d101      	bne.n	800abae <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800abaa:	2300      	movs	r3, #0
 800abac:	e08d      	b.n	800acca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	da02      	bge.n	800abba <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800abb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800abb8:	e087      	b.n	800acca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d001      	beq.n	800abc8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800abc4:	2340      	movs	r3, #64	; 0x40
 800abc6:	e080      	b.n	800acca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d001      	beq.n	800abd6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800abd2:	2380      	movs	r3, #128	; 0x80
 800abd4:	e079      	b.n	800acca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d002      	beq.n	800abe6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800abe0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abe4:	e071      	b.n	800acca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800abec:	2b00      	cmp	r3, #0
 800abee:	d002      	beq.n	800abf6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800abf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800abf4:	e069      	b.n	800acca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d002      	beq.n	800ac06 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ac00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac04:	e061      	b.n	800acca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d002      	beq.n	800ac16 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ac10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ac14:	e059      	b.n	800acca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d002      	beq.n	800ac26 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ac20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac24:	e051      	b.n	800acca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d002      	beq.n	800ac36 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ac30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ac34:	e049      	b.n	800acca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d002      	beq.n	800ac46 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ac40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ac44:	e041      	b.n	800acca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d002      	beq.n	800ac56 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800ac50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac54:	e039      	b.n	800acca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d002      	beq.n	800ac66 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ac60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ac64:	e031      	b.n	800acca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d002      	beq.n	800ac76 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ac70:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ac74:	e029      	b.n	800acca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d002      	beq.n	800ac86 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ac80:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ac84:	e021      	b.n	800acca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d002      	beq.n	800ac96 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ac90:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ac94:	e019      	b.n	800acca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d002      	beq.n	800aca6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800aca0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800aca4:	e011      	b.n	800acca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800acac:	2b00      	cmp	r3, #0
 800acae:	d002      	beq.n	800acb6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800acb0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800acb4:	e009      	b.n	800acca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	f003 0308 	and.w	r3, r3, #8
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d002      	beq.n	800acc6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800acc0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800acc4:	e001      	b.n	800acca <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800acc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800acca:	4618      	mov	r0, r3
 800accc:	371c      	adds	r7, #28
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd90      	pop	{r4, r7, pc}
 800acd2:	bf00      	nop
 800acd4:	200000a4 	.word	0x200000a4
 800acd8:	10624dd3 	.word	0x10624dd3
 800acdc:	fdffe008 	.word	0xfdffe008

0800ace0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800ace0:	b490      	push	{r4, r7}
 800ace2:	b084      	sub	sp, #16
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ace8:	4b1e      	ldr	r3, [pc, #120]	; (800ad64 <SDMMC_GetCmdResp2+0x84>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a1e      	ldr	r2, [pc, #120]	; (800ad68 <SDMMC_GetCmdResp2+0x88>)
 800acee:	fba2 2303 	umull	r2, r3, r2, r3
 800acf2:	0a5b      	lsrs	r3, r3, #9
 800acf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800acf8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800acfc:	4623      	mov	r3, r4
 800acfe:	1e5c      	subs	r4, r3, #1
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d102      	bne.n	800ad0a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad08:	e026      	b.n	800ad58 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad0e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d0f0      	beq.n	800acfc <SDMMC_GetCmdResp2+0x1c>
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d1eb      	bne.n	800acfc <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad28:	f003 0304 	and.w	r3, r3, #4
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d004      	beq.n	800ad3a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2204      	movs	r2, #4
 800ad34:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad36:	2304      	movs	r3, #4
 800ad38:	e00e      	b.n	800ad58 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad3e:	f003 0301 	and.w	r3, r3, #1
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d004      	beq.n	800ad50 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2201      	movs	r2, #1
 800ad4a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	e003      	b.n	800ad58 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	22c5      	movs	r2, #197	; 0xc5
 800ad54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ad56:	2300      	movs	r3, #0
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3710      	adds	r7, #16
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bc90      	pop	{r4, r7}
 800ad60:	4770      	bx	lr
 800ad62:	bf00      	nop
 800ad64:	200000a4 	.word	0x200000a4
 800ad68:	10624dd3 	.word	0x10624dd3

0800ad6c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800ad6c:	b490      	push	{r4, r7}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ad74:	4b18      	ldr	r3, [pc, #96]	; (800add8 <SDMMC_GetCmdResp3+0x6c>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a18      	ldr	r2, [pc, #96]	; (800addc <SDMMC_GetCmdResp3+0x70>)
 800ad7a:	fba2 2303 	umull	r2, r3, r2, r3
 800ad7e:	0a5b      	lsrs	r3, r3, #9
 800ad80:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad84:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ad88:	4623      	mov	r3, r4
 800ad8a:	1e5c      	subs	r4, r3, #1
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d102      	bne.n	800ad96 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad94:	e01b      	b.n	800adce <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad9a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d0f0      	beq.n	800ad88 <SDMMC_GetCmdResp3+0x1c>
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800adac:	2b00      	cmp	r3, #0
 800adae:	d1eb      	bne.n	800ad88 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adb4:	f003 0304 	and.w	r3, r3, #4
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d004      	beq.n	800adc6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2204      	movs	r2, #4
 800adc0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800adc2:	2304      	movs	r3, #4
 800adc4:	e003      	b.n	800adce <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	22c5      	movs	r2, #197	; 0xc5
 800adca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800adcc:	2300      	movs	r3, #0
}
 800adce:	4618      	mov	r0, r3
 800add0:	3710      	adds	r7, #16
 800add2:	46bd      	mov	sp, r7
 800add4:	bc90      	pop	{r4, r7}
 800add6:	4770      	bx	lr
 800add8:	200000a4 	.word	0x200000a4
 800addc:	10624dd3 	.word	0x10624dd3

0800ade0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ade0:	b590      	push	{r4, r7, lr}
 800ade2:	b087      	sub	sp, #28
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	60f8      	str	r0, [r7, #12]
 800ade8:	460b      	mov	r3, r1
 800adea:	607a      	str	r2, [r7, #4]
 800adec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800adee:	4b34      	ldr	r3, [pc, #208]	; (800aec0 <SDMMC_GetCmdResp6+0xe0>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4a34      	ldr	r2, [pc, #208]	; (800aec4 <SDMMC_GetCmdResp6+0xe4>)
 800adf4:	fba2 2303 	umull	r2, r3, r2, r3
 800adf8:	0a5b      	lsrs	r3, r3, #9
 800adfa:	f241 3288 	movw	r2, #5000	; 0x1388
 800adfe:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ae02:	4623      	mov	r3, r4
 800ae04:	1e5c      	subs	r4, r3, #1
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d102      	bne.n	800ae10 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ae0a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ae0e:	e052      	b.n	800aeb6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae14:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d0f0      	beq.n	800ae02 <SDMMC_GetCmdResp6+0x22>
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d1eb      	bne.n	800ae02 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae2e:	f003 0304 	and.w	r3, r3, #4
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d004      	beq.n	800ae40 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	2204      	movs	r2, #4
 800ae3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ae3c:	2304      	movs	r3, #4
 800ae3e:	e03a      	b.n	800aeb6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae44:	f003 0301 	and.w	r3, r3, #1
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d004      	beq.n	800ae56 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2201      	movs	r2, #1
 800ae50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae52:	2301      	movs	r3, #1
 800ae54:	e02f      	b.n	800aeb6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ae56:	68f8      	ldr	r0, [r7, #12]
 800ae58:	f7ff fc79 	bl	800a74e <SDIO_GetCommandResponse>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	461a      	mov	r2, r3
 800ae60:	7afb      	ldrb	r3, [r7, #11]
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d001      	beq.n	800ae6a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae66:	2301      	movs	r3, #1
 800ae68:	e025      	b.n	800aeb6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	22c5      	movs	r2, #197	; 0xc5
 800ae6e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ae70:	2100      	movs	r1, #0
 800ae72:	68f8      	ldr	r0, [r7, #12]
 800ae74:	f7ff fc78 	bl	800a768 <SDIO_GetResponse>
 800ae78:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d106      	bne.n	800ae92 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	0c1b      	lsrs	r3, r3, #16
 800ae88:	b29a      	uxth	r2, r3
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	e011      	b.n	800aeb6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d002      	beq.n	800aea2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ae9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aea0:	e009      	b.n	800aeb6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d002      	beq.n	800aeb2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800aeac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aeb0:	e001      	b.n	800aeb6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800aeb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	371c      	adds	r7, #28
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd90      	pop	{r4, r7, pc}
 800aebe:	bf00      	nop
 800aec0:	200000a4 	.word	0x200000a4
 800aec4:	10624dd3 	.word	0x10624dd3

0800aec8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800aec8:	b490      	push	{r4, r7}
 800aeca:	b084      	sub	sp, #16
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aed0:	4b21      	ldr	r3, [pc, #132]	; (800af58 <SDMMC_GetCmdResp7+0x90>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	4a21      	ldr	r2, [pc, #132]	; (800af5c <SDMMC_GetCmdResp7+0x94>)
 800aed6:	fba2 2303 	umull	r2, r3, r2, r3
 800aeda:	0a5b      	lsrs	r3, r3, #9
 800aedc:	f241 3288 	movw	r2, #5000	; 0x1388
 800aee0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800aee4:	4623      	mov	r3, r4
 800aee6:	1e5c      	subs	r4, r3, #1
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d102      	bne.n	800aef2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aeec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aef0:	e02c      	b.n	800af4c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aef6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d0f0      	beq.n	800aee4 <SDMMC_GetCmdResp7+0x1c>
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d1eb      	bne.n	800aee4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af10:	f003 0304 	and.w	r3, r3, #4
 800af14:	2b00      	cmp	r3, #0
 800af16:	d004      	beq.n	800af22 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2204      	movs	r2, #4
 800af1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800af1e:	2304      	movs	r3, #4
 800af20:	e014      	b.n	800af4c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af26:	f003 0301 	and.w	r3, r3, #1
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d004      	beq.n	800af38 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2201      	movs	r2, #1
 800af32:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800af34:	2301      	movs	r3, #1
 800af36:	e009      	b.n	800af4c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af40:	2b00      	cmp	r3, #0
 800af42:	d002      	beq.n	800af4a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2240      	movs	r2, #64	; 0x40
 800af48:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800af4a:	2300      	movs	r3, #0
  
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3710      	adds	r7, #16
 800af50:	46bd      	mov	sp, r7
 800af52:	bc90      	pop	{r4, r7}
 800af54:	4770      	bx	lr
 800af56:	bf00      	nop
 800af58:	200000a4 	.word	0x200000a4
 800af5c:	10624dd3 	.word	0x10624dd3

0800af60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800af60:	b084      	sub	sp, #16
 800af62:	b580      	push	{r7, lr}
 800af64:	b084      	sub	sp, #16
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
 800af6a:	f107 001c 	add.w	r0, r7, #28
 800af6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800af72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af74:	2b01      	cmp	r3, #1
 800af76:	d122      	bne.n	800afbe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	68db      	ldr	r3, [r3, #12]
 800af88:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800af8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af90:	687a      	ldr	r2, [r7, #4]
 800af92:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	68db      	ldr	r3, [r3, #12]
 800af98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800afa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afa2:	2b01      	cmp	r3, #1
 800afa4:	d105      	bne.n	800afb2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	68db      	ldr	r3, [r3, #12]
 800afaa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 f94a 	bl	800b24c <USB_CoreReset>
 800afb8:	4603      	mov	r3, r0
 800afba:	73fb      	strb	r3, [r7, #15]
 800afbc:	e01a      	b.n	800aff4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	68db      	ldr	r3, [r3, #12]
 800afc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f000 f93e 	bl	800b24c <USB_CoreReset>
 800afd0:	4603      	mov	r3, r0
 800afd2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800afd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d106      	bne.n	800afe8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afde:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	639a      	str	r2, [r3, #56]	; 0x38
 800afe6:	e005      	b.n	800aff4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800aff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	d10b      	bne.n	800b012 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	689b      	ldr	r3, [r3, #8]
 800affe:	f043 0206 	orr.w	r2, r3, #6
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	f043 0220 	orr.w	r2, r3, #32
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b012:	7bfb      	ldrb	r3, [r7, #15]
}
 800b014:	4618      	mov	r0, r3
 800b016:	3710      	adds	r7, #16
 800b018:	46bd      	mov	sp, r7
 800b01a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b01e:	b004      	add	sp, #16
 800b020:	4770      	bx	lr

0800b022 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b022:	b480      	push	{r7}
 800b024:	b083      	sub	sp, #12
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	689b      	ldr	r3, [r3, #8]
 800b02e:	f043 0201 	orr.w	r2, r3, #1
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b036:	2300      	movs	r3, #0
}
 800b038:	4618      	mov	r0, r3
 800b03a:	370c      	adds	r7, #12
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr

0800b044 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b044:	b480      	push	{r7}
 800b046:	b083      	sub	sp, #12
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	689b      	ldr	r3, [r3, #8]
 800b050:	f023 0201 	bic.w	r2, r3, #1
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b058:	2300      	movs	r3, #0
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	370c      	adds	r7, #12
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr

0800b066 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b066:	b580      	push	{r7, lr}
 800b068:	b082      	sub	sp, #8
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
 800b06e:	460b      	mov	r3, r1
 800b070:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	68db      	ldr	r3, [r3, #12]
 800b076:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b07e:	78fb      	ldrb	r3, [r7, #3]
 800b080:	2b01      	cmp	r3, #1
 800b082:	d106      	bne.n	800b092 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	68db      	ldr	r3, [r3, #12]
 800b088:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	60da      	str	r2, [r3, #12]
 800b090:	e00b      	b.n	800b0aa <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b092:	78fb      	ldrb	r3, [r7, #3]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d106      	bne.n	800b0a6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	68db      	ldr	r3, [r3, #12]
 800b09c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	60da      	str	r2, [r3, #12]
 800b0a4:	e001      	b.n	800b0aa <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	e003      	b.n	800b0b2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b0aa:	2032      	movs	r0, #50	; 0x32
 800b0ac:	f7f8 ff92 	bl	8003fd4 <HAL_Delay>

  return HAL_OK;
 800b0b0:	2300      	movs	r3, #0
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3708      	adds	r7, #8
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
	...

0800b0bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b085      	sub	sp, #20
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	019b      	lsls	r3, r3, #6
 800b0ce:	f043 0220 	orr.w	r2, r3, #32
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	3301      	adds	r3, #1
 800b0da:	60fb      	str	r3, [r7, #12]
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	4a09      	ldr	r2, [pc, #36]	; (800b104 <USB_FlushTxFifo+0x48>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d901      	bls.n	800b0e8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b0e4:	2303      	movs	r3, #3
 800b0e6:	e006      	b.n	800b0f6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	691b      	ldr	r3, [r3, #16]
 800b0ec:	f003 0320 	and.w	r3, r3, #32
 800b0f0:	2b20      	cmp	r3, #32
 800b0f2:	d0f0      	beq.n	800b0d6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b0f4:	2300      	movs	r3, #0
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3714      	adds	r7, #20
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b100:	4770      	bx	lr
 800b102:	bf00      	nop
 800b104:	00030d40 	.word	0x00030d40

0800b108 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b108:	b480      	push	{r7}
 800b10a:	b085      	sub	sp, #20
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b110:	2300      	movs	r3, #0
 800b112:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2210      	movs	r2, #16
 800b118:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	3301      	adds	r3, #1
 800b11e:	60fb      	str	r3, [r7, #12]
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	4a09      	ldr	r2, [pc, #36]	; (800b148 <USB_FlushRxFifo+0x40>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d901      	bls.n	800b12c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b128:	2303      	movs	r3, #3
 800b12a:	e006      	b.n	800b13a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	691b      	ldr	r3, [r3, #16]
 800b130:	f003 0310 	and.w	r3, r3, #16
 800b134:	2b10      	cmp	r3, #16
 800b136:	d0f0      	beq.n	800b11a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b138:	2300      	movs	r3, #0
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3714      	adds	r7, #20
 800b13e:	46bd      	mov	sp, r7
 800b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b144:	4770      	bx	lr
 800b146:	bf00      	nop
 800b148:	00030d40 	.word	0x00030d40

0800b14c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b089      	sub	sp, #36	; 0x24
 800b150:	af00      	add	r7, sp, #0
 800b152:	60f8      	str	r0, [r7, #12]
 800b154:	60b9      	str	r1, [r7, #8]
 800b156:	4611      	mov	r1, r2
 800b158:	461a      	mov	r2, r3
 800b15a:	460b      	mov	r3, r1
 800b15c:	71fb      	strb	r3, [r7, #7]
 800b15e:	4613      	mov	r3, r2
 800b160:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b16a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d11a      	bne.n	800b1a8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b172:	88bb      	ldrh	r3, [r7, #4]
 800b174:	3303      	adds	r3, #3
 800b176:	089b      	lsrs	r3, r3, #2
 800b178:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b17a:	2300      	movs	r3, #0
 800b17c:	61bb      	str	r3, [r7, #24]
 800b17e:	e00f      	b.n	800b1a0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b180:	79fb      	ldrb	r3, [r7, #7]
 800b182:	031a      	lsls	r2, r3, #12
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	4413      	add	r3, r2
 800b188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b18c:	461a      	mov	r2, r3
 800b18e:	69fb      	ldr	r3, [r7, #28]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b194:	69fb      	ldr	r3, [r7, #28]
 800b196:	3304      	adds	r3, #4
 800b198:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b19a:	69bb      	ldr	r3, [r7, #24]
 800b19c:	3301      	adds	r3, #1
 800b19e:	61bb      	str	r3, [r7, #24]
 800b1a0:	69ba      	ldr	r2, [r7, #24]
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d3eb      	bcc.n	800b180 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b1a8:	2300      	movs	r3, #0
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3724      	adds	r7, #36	; 0x24
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr

0800b1b6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b1b6:	b480      	push	{r7}
 800b1b8:	b089      	sub	sp, #36	; 0x24
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	60f8      	str	r0, [r7, #12]
 800b1be:	60b9      	str	r1, [r7, #8]
 800b1c0:	4613      	mov	r3, r2
 800b1c2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b1cc:	88fb      	ldrh	r3, [r7, #6]
 800b1ce:	3303      	adds	r3, #3
 800b1d0:	089b      	lsrs	r3, r3, #2
 800b1d2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	61bb      	str	r3, [r7, #24]
 800b1d8:	e00b      	b.n	800b1f2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1e0:	681a      	ldr	r2, [r3, #0]
 800b1e2:	69fb      	ldr	r3, [r7, #28]
 800b1e4:	601a      	str	r2, [r3, #0]
    pDest++;
 800b1e6:	69fb      	ldr	r3, [r7, #28]
 800b1e8:	3304      	adds	r3, #4
 800b1ea:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b1ec:	69bb      	ldr	r3, [r7, #24]
 800b1ee:	3301      	adds	r3, #1
 800b1f0:	61bb      	str	r3, [r7, #24]
 800b1f2:	69ba      	ldr	r2, [r7, #24]
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	d3ef      	bcc.n	800b1da <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b1fa:	69fb      	ldr	r3, [r7, #28]
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3724      	adds	r7, #36	; 0x24
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr

0800b208 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b208:	b480      	push	{r7}
 800b20a:	b085      	sub	sp, #20
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	695b      	ldr	r3, [r3, #20]
 800b214:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	699b      	ldr	r3, [r3, #24]
 800b21a:	68fa      	ldr	r2, [r7, #12]
 800b21c:	4013      	ands	r3, r2
 800b21e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b220:	68fb      	ldr	r3, [r7, #12]
}
 800b222:	4618      	mov	r0, r3
 800b224:	3714      	adds	r7, #20
 800b226:	46bd      	mov	sp, r7
 800b228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22c:	4770      	bx	lr

0800b22e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b22e:	b480      	push	{r7}
 800b230:	b083      	sub	sp, #12
 800b232:	af00      	add	r7, sp, #0
 800b234:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	695b      	ldr	r3, [r3, #20]
 800b23a:	f003 0301 	and.w	r3, r3, #1
}
 800b23e:	4618      	mov	r0, r3
 800b240:	370c      	adds	r7, #12
 800b242:	46bd      	mov	sp, r7
 800b244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b248:	4770      	bx	lr
	...

0800b24c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b085      	sub	sp, #20
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b254:	2300      	movs	r3, #0
 800b256:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	3301      	adds	r3, #1
 800b25c:	60fb      	str	r3, [r7, #12]
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	4a13      	ldr	r2, [pc, #76]	; (800b2b0 <USB_CoreReset+0x64>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d901      	bls.n	800b26a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b266:	2303      	movs	r3, #3
 800b268:	e01b      	b.n	800b2a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	691b      	ldr	r3, [r3, #16]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	daf2      	bge.n	800b258 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b272:	2300      	movs	r3, #0
 800b274:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	691b      	ldr	r3, [r3, #16]
 800b27a:	f043 0201 	orr.w	r2, r3, #1
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	3301      	adds	r3, #1
 800b286:	60fb      	str	r3, [r7, #12]
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	4a09      	ldr	r2, [pc, #36]	; (800b2b0 <USB_CoreReset+0x64>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d901      	bls.n	800b294 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b290:	2303      	movs	r3, #3
 800b292:	e006      	b.n	800b2a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	691b      	ldr	r3, [r3, #16]
 800b298:	f003 0301 	and.w	r3, r3, #1
 800b29c:	2b01      	cmp	r3, #1
 800b29e:	d0f0      	beq.n	800b282 <USB_CoreReset+0x36>

  return HAL_OK;
 800b2a0:	2300      	movs	r3, #0
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3714      	adds	r7, #20
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr
 800b2ae:	bf00      	nop
 800b2b0:	00030d40 	.word	0x00030d40

0800b2b4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b2b4:	b084      	sub	sp, #16
 800b2b6:	b580      	push	{r7, lr}
 800b2b8:	b084      	sub	sp, #16
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	6078      	str	r0, [r7, #4]
 800b2be:	f107 001c 	add.w	r0, r7, #28
 800b2c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2da:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d018      	beq.n	800b32c <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800b2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d10a      	bne.n	800b316 <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	68ba      	ldr	r2, [r7, #8]
 800b30a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b30e:	f043 0304 	orr.w	r3, r3, #4
 800b312:	6013      	str	r3, [r2, #0]
 800b314:	e014      	b.n	800b340 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	68ba      	ldr	r2, [r7, #8]
 800b320:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b324:	f023 0304 	bic.w	r3, r3, #4
 800b328:	6013      	str	r3, [r2, #0]
 800b32a:	e009      	b.n	800b340 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	68ba      	ldr	r2, [r7, #8]
 800b336:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b33a:	f023 0304 	bic.w	r3, r3, #4
 800b33e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800b340:	2110      	movs	r1, #16
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f7ff feba 	bl	800b0bc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f7ff fedd 	bl	800b108 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b34e:	2300      	movs	r3, #0
 800b350:	60fb      	str	r3, [r7, #12]
 800b352:	e015      	b.n	800b380 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	015a      	lsls	r2, r3, #5
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	4413      	add	r3, r2
 800b35c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b360:	461a      	mov	r2, r3
 800b362:	f04f 33ff 	mov.w	r3, #4294967295
 800b366:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	015a      	lsls	r2, r3, #5
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	4413      	add	r3, r2
 800b370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b374:	461a      	mov	r2, r3
 800b376:	2300      	movs	r3, #0
 800b378:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	3301      	adds	r3, #1
 800b37e:	60fb      	str	r3, [r7, #12]
 800b380:	6a3b      	ldr	r3, [r7, #32]
 800b382:	68fa      	ldr	r2, [r7, #12]
 800b384:	429a      	cmp	r2, r3
 800b386:	d3e5      	bcc.n	800b354 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800b388:	2101      	movs	r1, #1
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 f8ac 	bl	800b4e8 <USB_DriveVbus>

  HAL_Delay(200U);
 800b390:	20c8      	movs	r0, #200	; 0xc8
 800b392:	f7f8 fe1f 	bl	8003fd4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2200      	movs	r2, #0
 800b39a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f04f 32ff 	mov.w	r2, #4294967295
 800b3a2:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d00b      	beq.n	800b3c8 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b3b6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	4a14      	ldr	r2, [pc, #80]	; (800b40c <USB_HostInit+0x158>)
 800b3bc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	4a13      	ldr	r2, [pc, #76]	; (800b410 <USB_HostInit+0x15c>)
 800b3c2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800b3c6:	e009      	b.n	800b3dc <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2280      	movs	r2, #128	; 0x80
 800b3cc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	4a10      	ldr	r2, [pc, #64]	; (800b414 <USB_HostInit+0x160>)
 800b3d2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	4a10      	ldr	r2, [pc, #64]	; (800b418 <USB_HostInit+0x164>)
 800b3d8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d105      	bne.n	800b3ee <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	699b      	ldr	r3, [r3, #24]
 800b3e6:	f043 0210 	orr.w	r2, r3, #16
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	699a      	ldr	r2, [r3, #24]
 800b3f2:	4b0a      	ldr	r3, [pc, #40]	; (800b41c <USB_HostInit+0x168>)
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	687a      	ldr	r2, [r7, #4]
 800b3f8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800b3fa:	2300      	movs	r3, #0
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3710      	adds	r7, #16
 800b400:	46bd      	mov	sp, r7
 800b402:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b406:	b004      	add	sp, #16
 800b408:	4770      	bx	lr
 800b40a:	bf00      	nop
 800b40c:	01000200 	.word	0x01000200
 800b410:	00e00300 	.word	0x00e00300
 800b414:	00600080 	.word	0x00600080
 800b418:	004000e0 	.word	0x004000e0
 800b41c:	a3200008 	.word	0xa3200008

0800b420 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b420:	b480      	push	{r7}
 800b422:	b085      	sub	sp, #20
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	460b      	mov	r3, r1
 800b42a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	68fa      	ldr	r2, [r7, #12]
 800b43a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b43e:	f023 0303 	bic.w	r3, r3, #3
 800b442:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b44a:	681a      	ldr	r2, [r3, #0]
 800b44c:	78fb      	ldrb	r3, [r7, #3]
 800b44e:	f003 0303 	and.w	r3, r3, #3
 800b452:	68f9      	ldr	r1, [r7, #12]
 800b454:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b458:	4313      	orrs	r3, r2
 800b45a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b45c:	78fb      	ldrb	r3, [r7, #3]
 800b45e:	2b01      	cmp	r3, #1
 800b460:	d107      	bne.n	800b472 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b468:	461a      	mov	r2, r3
 800b46a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b46e:	6053      	str	r3, [r2, #4]
 800b470:	e009      	b.n	800b486 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800b472:	78fb      	ldrb	r3, [r7, #3]
 800b474:	2b02      	cmp	r3, #2
 800b476:	d106      	bne.n	800b486 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b47e:	461a      	mov	r2, r3
 800b480:	f241 7370 	movw	r3, #6000	; 0x1770
 800b484:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800b486:	2300      	movs	r3, #0
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3714      	adds	r7, #20
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr

0800b494 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b084      	sub	sp, #16
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b4b4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	68fa      	ldr	r2, [r7, #12]
 800b4ba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b4be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b4c2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800b4c4:	2064      	movs	r0, #100	; 0x64
 800b4c6:	f7f8 fd85 	bl	8003fd4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	68fa      	ldr	r2, [r7, #12]
 800b4ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b4d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b4d6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800b4d8:	200a      	movs	r0, #10
 800b4da:	f7f8 fd7b 	bl	8003fd4 <HAL_Delay>

  return HAL_OK;
 800b4de:	2300      	movs	r3, #0
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3710      	adds	r7, #16
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}

0800b4e8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b085      	sub	sp, #20
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b50c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b514:	2b00      	cmp	r3, #0
 800b516:	d109      	bne.n	800b52c <USB_DriveVbus+0x44>
 800b518:	78fb      	ldrb	r3, [r7, #3]
 800b51a:	2b01      	cmp	r3, #1
 800b51c:	d106      	bne.n	800b52c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	68fa      	ldr	r2, [r7, #12]
 800b522:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b526:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b52a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b536:	d109      	bne.n	800b54c <USB_DriveVbus+0x64>
 800b538:	78fb      	ldrb	r3, [r7, #3]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d106      	bne.n	800b54c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	68fa      	ldr	r2, [r7, #12]
 800b542:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b546:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b54a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800b54c:	2300      	movs	r3, #0
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3714      	adds	r7, #20
 800b552:	46bd      	mov	sp, r7
 800b554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b558:	4770      	bx	lr

0800b55a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b55a:	b480      	push	{r7}
 800b55c:	b085      	sub	sp, #20
 800b55e:	af00      	add	r7, sp, #0
 800b560:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b566:	2300      	movs	r3, #0
 800b568:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	0c5b      	lsrs	r3, r3, #17
 800b578:	f003 0303 	and.w	r3, r3, #3
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3714      	adds	r7, #20
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800b588:	b480      	push	{r7}
 800b58a:	b085      	sub	sp, #20
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b59a:	689b      	ldr	r3, [r3, #8]
 800b59c:	b29b      	uxth	r3, r3
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3714      	adds	r7, #20
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr
	...

0800b5ac <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b087      	sub	sp, #28
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	4608      	mov	r0, r1
 800b5b6:	4611      	mov	r1, r2
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	70fb      	strb	r3, [r7, #3]
 800b5be:	460b      	mov	r3, r1
 800b5c0:	70bb      	strb	r3, [r7, #2]
 800b5c2:	4613      	mov	r3, r2
 800b5c4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800b5ce:	78fb      	ldrb	r3, [r7, #3]
 800b5d0:	015a      	lsls	r2, r3, #5
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	4413      	add	r3, r2
 800b5d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b5da:	461a      	mov	r2, r3
 800b5dc:	f04f 33ff 	mov.w	r3, #4294967295
 800b5e0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800b5e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b5e6:	2b03      	cmp	r3, #3
 800b5e8:	d87e      	bhi.n	800b6e8 <USB_HC_Init+0x13c>
 800b5ea:	a201      	add	r2, pc, #4	; (adr r2, 800b5f0 <USB_HC_Init+0x44>)
 800b5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5f0:	0800b601 	.word	0x0800b601
 800b5f4:	0800b6ab 	.word	0x0800b6ab
 800b5f8:	0800b601 	.word	0x0800b601
 800b5fc:	0800b66d 	.word	0x0800b66d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b600:	78fb      	ldrb	r3, [r7, #3]
 800b602:	015a      	lsls	r2, r3, #5
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	4413      	add	r3, r2
 800b608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b60c:	461a      	mov	r2, r3
 800b60e:	f240 439d 	movw	r3, #1181	; 0x49d
 800b612:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800b614:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	da10      	bge.n	800b63e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b61c:	78fb      	ldrb	r3, [r7, #3]
 800b61e:	015a      	lsls	r2, r3, #5
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	4413      	add	r3, r2
 800b624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b628:	68db      	ldr	r3, [r3, #12]
 800b62a:	78fa      	ldrb	r2, [r7, #3]
 800b62c:	0151      	lsls	r1, r2, #5
 800b62e:	68ba      	ldr	r2, [r7, #8]
 800b630:	440a      	add	r2, r1
 800b632:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b63a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800b63c:	e057      	b.n	800b6ee <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b646:	2b00      	cmp	r3, #0
 800b648:	d051      	beq.n	800b6ee <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800b64a:	78fb      	ldrb	r3, [r7, #3]
 800b64c:	015a      	lsls	r2, r3, #5
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	4413      	add	r3, r2
 800b652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b656:	68db      	ldr	r3, [r3, #12]
 800b658:	78fa      	ldrb	r2, [r7, #3]
 800b65a:	0151      	lsls	r1, r2, #5
 800b65c:	68ba      	ldr	r2, [r7, #8]
 800b65e:	440a      	add	r2, r1
 800b660:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b664:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b668:	60d3      	str	r3, [r2, #12]
      break;
 800b66a:	e040      	b.n	800b6ee <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b66c:	78fb      	ldrb	r3, [r7, #3]
 800b66e:	015a      	lsls	r2, r3, #5
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	4413      	add	r3, r2
 800b674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b678:	461a      	mov	r2, r3
 800b67a:	f240 639d 	movw	r3, #1693	; 0x69d
 800b67e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b680:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b684:	2b00      	cmp	r3, #0
 800b686:	da34      	bge.n	800b6f2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b688:	78fb      	ldrb	r3, [r7, #3]
 800b68a:	015a      	lsls	r2, r3, #5
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	4413      	add	r3, r2
 800b690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b694:	68db      	ldr	r3, [r3, #12]
 800b696:	78fa      	ldrb	r2, [r7, #3]
 800b698:	0151      	lsls	r1, r2, #5
 800b69a:	68ba      	ldr	r2, [r7, #8]
 800b69c:	440a      	add	r2, r1
 800b69e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b6a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b6a6:	60d3      	str	r3, [r2, #12]
      }

      break;
 800b6a8:	e023      	b.n	800b6f2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b6aa:	78fb      	ldrb	r3, [r7, #3]
 800b6ac:	015a      	lsls	r2, r3, #5
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	4413      	add	r3, r2
 800b6b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	f240 2325 	movw	r3, #549	; 0x225
 800b6bc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b6be:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	da17      	bge.n	800b6f6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800b6c6:	78fb      	ldrb	r3, [r7, #3]
 800b6c8:	015a      	lsls	r2, r3, #5
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	4413      	add	r3, r2
 800b6ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b6d2:	68db      	ldr	r3, [r3, #12]
 800b6d4:	78fa      	ldrb	r2, [r7, #3]
 800b6d6:	0151      	lsls	r1, r2, #5
 800b6d8:	68ba      	ldr	r2, [r7, #8]
 800b6da:	440a      	add	r2, r1
 800b6dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b6e0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800b6e4:	60d3      	str	r3, [r2, #12]
      }
      break;
 800b6e6:	e006      	b.n	800b6f6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	75fb      	strb	r3, [r7, #23]
      break;
 800b6ec:	e004      	b.n	800b6f8 <USB_HC_Init+0x14c>
      break;
 800b6ee:	bf00      	nop
 800b6f0:	e002      	b.n	800b6f8 <USB_HC_Init+0x14c>
      break;
 800b6f2:	bf00      	nop
 800b6f4:	e000      	b.n	800b6f8 <USB_HC_Init+0x14c>
      break;
 800b6f6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b6fe:	699a      	ldr	r2, [r3, #24]
 800b700:	78fb      	ldrb	r3, [r7, #3]
 800b702:	f003 030f 	and.w	r3, r3, #15
 800b706:	2101      	movs	r1, #1
 800b708:	fa01 f303 	lsl.w	r3, r1, r3
 800b70c:	68b9      	ldr	r1, [r7, #8]
 800b70e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b712:	4313      	orrs	r3, r2
 800b714:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	699b      	ldr	r3, [r3, #24]
 800b71a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800b722:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b726:	2b00      	cmp	r3, #0
 800b728:	da03      	bge.n	800b732 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800b72a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b72e:	613b      	str	r3, [r7, #16]
 800b730:	e001      	b.n	800b736 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800b732:	2300      	movs	r3, #0
 800b734:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800b736:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b73a:	2b02      	cmp	r3, #2
 800b73c:	d103      	bne.n	800b746 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800b73e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b742:	60fb      	str	r3, [r7, #12]
 800b744:	e001      	b.n	800b74a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800b746:	2300      	movs	r3, #0
 800b748:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b74a:	787b      	ldrb	r3, [r7, #1]
 800b74c:	059b      	lsls	r3, r3, #22
 800b74e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b752:	78bb      	ldrb	r3, [r7, #2]
 800b754:	02db      	lsls	r3, r3, #11
 800b756:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b75a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b75c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b760:	049b      	lsls	r3, r3, #18
 800b762:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b766:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b768:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b76a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b76e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b774:	78fb      	ldrb	r3, [r7, #3]
 800b776:	0159      	lsls	r1, r3, #5
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	440b      	add	r3, r1
 800b77c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b780:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b786:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800b788:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b78c:	2b03      	cmp	r3, #3
 800b78e:	d10f      	bne.n	800b7b0 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800b790:	78fb      	ldrb	r3, [r7, #3]
 800b792:	015a      	lsls	r2, r3, #5
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	4413      	add	r3, r2
 800b798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	78fa      	ldrb	r2, [r7, #3]
 800b7a0:	0151      	lsls	r1, r2, #5
 800b7a2:	68ba      	ldr	r2, [r7, #8]
 800b7a4:	440a      	add	r2, r1
 800b7a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b7aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b7ae:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800b7b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	371c      	adds	r7, #28
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7bc:	4770      	bx	lr
 800b7be:	bf00      	nop

0800b7c0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b08c      	sub	sp, #48	; 0x30
 800b7c4:	af02      	add	r7, sp, #8
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	60b9      	str	r1, [r7, #8]
 800b7ca:	4613      	mov	r3, r2
 800b7cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	785b      	ldrb	r3, [r3, #1]
 800b7d6:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800b7d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7dc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d028      	beq.n	800b83c <USB_HC_StartXfer+0x7c>
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	791b      	ldrb	r3, [r3, #4]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d124      	bne.n	800b83c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800b7f2:	79fb      	ldrb	r3, [r7, #7]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d10b      	bne.n	800b810 <USB_HC_StartXfer+0x50>
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	795b      	ldrb	r3, [r3, #5]
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d107      	bne.n	800b810 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	785b      	ldrb	r3, [r3, #1]
 800b804:	4619      	mov	r1, r3
 800b806:	68f8      	ldr	r0, [r7, #12]
 800b808:	f000 fa30 	bl	800bc6c <USB_DoPing>
      return HAL_OK;
 800b80c:	2300      	movs	r3, #0
 800b80e:	e114      	b.n	800ba3a <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 800b810:	79fb      	ldrb	r3, [r7, #7]
 800b812:	2b01      	cmp	r3, #1
 800b814:	d112      	bne.n	800b83c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800b816:	69fb      	ldr	r3, [r7, #28]
 800b818:	015a      	lsls	r2, r3, #5
 800b81a:	6a3b      	ldr	r3, [r7, #32]
 800b81c:	4413      	add	r3, r2
 800b81e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b822:	68db      	ldr	r3, [r3, #12]
 800b824:	69fa      	ldr	r2, [r7, #28]
 800b826:	0151      	lsls	r1, r2, #5
 800b828:	6a3a      	ldr	r2, [r7, #32]
 800b82a:	440a      	add	r2, r1
 800b82c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b830:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800b834:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	2200      	movs	r2, #0
 800b83a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	691b      	ldr	r3, [r3, #16]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d018      	beq.n	800b876 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	691b      	ldr	r3, [r3, #16]
 800b848:	68ba      	ldr	r2, [r7, #8]
 800b84a:	8912      	ldrh	r2, [r2, #8]
 800b84c:	4413      	add	r3, r2
 800b84e:	3b01      	subs	r3, #1
 800b850:	68ba      	ldr	r2, [r7, #8]
 800b852:	8912      	ldrh	r2, [r2, #8]
 800b854:	fbb3 f3f2 	udiv	r3, r3, r2
 800b858:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800b85a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b85c:	8b7b      	ldrh	r3, [r7, #26]
 800b85e:	429a      	cmp	r2, r3
 800b860:	d90b      	bls.n	800b87a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800b862:	8b7b      	ldrh	r3, [r7, #26]
 800b864:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800b866:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b868:	68ba      	ldr	r2, [r7, #8]
 800b86a:	8912      	ldrh	r2, [r2, #8]
 800b86c:	fb02 f203 	mul.w	r2, r2, r3
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	611a      	str	r2, [r3, #16]
 800b874:	e001      	b.n	800b87a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800b876:	2301      	movs	r3, #1
 800b878:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	78db      	ldrb	r3, [r3, #3]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d006      	beq.n	800b890 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800b882:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b884:	68ba      	ldr	r2, [r7, #8]
 800b886:	8912      	ldrh	r2, [r2, #8]
 800b888:	fb02 f203 	mul.w	r2, r2, r3
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	691b      	ldr	r3, [r3, #16]
 800b894:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b898:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b89a:	04d9      	lsls	r1, r3, #19
 800b89c:	4b69      	ldr	r3, [pc, #420]	; (800ba44 <USB_HC_StartXfer+0x284>)
 800b89e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b8a0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	7a9b      	ldrb	r3, [r3, #10]
 800b8a6:	075b      	lsls	r3, r3, #29
 800b8a8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b8ac:	69f9      	ldr	r1, [r7, #28]
 800b8ae:	0148      	lsls	r0, r1, #5
 800b8b0:	6a39      	ldr	r1, [r7, #32]
 800b8b2:	4401      	add	r1, r0
 800b8b4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b8b8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b8ba:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800b8bc:	79fb      	ldrb	r3, [r7, #7]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d009      	beq.n	800b8d6 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	68d9      	ldr	r1, [r3, #12]
 800b8c6:	69fb      	ldr	r3, [r7, #28]
 800b8c8:	015a      	lsls	r2, r3, #5
 800b8ca:	6a3b      	ldr	r3, [r7, #32]
 800b8cc:	4413      	add	r3, r2
 800b8ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b8d2:	460a      	mov	r2, r1
 800b8d4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800b8d6:	6a3b      	ldr	r3, [r7, #32]
 800b8d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b8dc:	689b      	ldr	r3, [r3, #8]
 800b8de:	f003 0301 	and.w	r3, r3, #1
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	bf0c      	ite	eq
 800b8e6:	2301      	moveq	r3, #1
 800b8e8:	2300      	movne	r3, #0
 800b8ea:	b2db      	uxtb	r3, r3
 800b8ec:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800b8ee:	69fb      	ldr	r3, [r7, #28]
 800b8f0:	015a      	lsls	r2, r3, #5
 800b8f2:	6a3b      	ldr	r3, [r7, #32]
 800b8f4:	4413      	add	r3, r2
 800b8f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	69fa      	ldr	r2, [r7, #28]
 800b8fe:	0151      	lsls	r1, r2, #5
 800b900:	6a3a      	ldr	r2, [r7, #32]
 800b902:	440a      	add	r2, r1
 800b904:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b908:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b90c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800b90e:	69fb      	ldr	r3, [r7, #28]
 800b910:	015a      	lsls	r2, r3, #5
 800b912:	6a3b      	ldr	r3, [r7, #32]
 800b914:	4413      	add	r3, r2
 800b916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b91a:	681a      	ldr	r2, [r3, #0]
 800b91c:	7e7b      	ldrb	r3, [r7, #25]
 800b91e:	075b      	lsls	r3, r3, #29
 800b920:	69f9      	ldr	r1, [r7, #28]
 800b922:	0148      	lsls	r0, r1, #5
 800b924:	6a39      	ldr	r1, [r7, #32]
 800b926:	4401      	add	r1, r0
 800b928:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800b92c:	4313      	orrs	r3, r2
 800b92e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b930:	69fb      	ldr	r3, [r7, #28]
 800b932:	015a      	lsls	r2, r3, #5
 800b934:	6a3b      	ldr	r3, [r7, #32]
 800b936:	4413      	add	r3, r2
 800b938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4a42      	ldr	r2, [pc, #264]	; (800ba48 <USB_HC_StartXfer+0x288>)
 800b940:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b942:	4b41      	ldr	r3, [pc, #260]	; (800ba48 <USB_HC_StartXfer+0x288>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b94a:	4a3f      	ldr	r2, [pc, #252]	; (800ba48 <USB_HC_StartXfer+0x288>)
 800b94c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	78db      	ldrb	r3, [r3, #3]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d006      	beq.n	800b964 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800b956:	4b3c      	ldr	r3, [pc, #240]	; (800ba48 <USB_HC_StartXfer+0x288>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b95e:	4a3a      	ldr	r2, [pc, #232]	; (800ba48 <USB_HC_StartXfer+0x288>)
 800b960:	6013      	str	r3, [r2, #0]
 800b962:	e005      	b.n	800b970 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800b964:	4b38      	ldr	r3, [pc, #224]	; (800ba48 <USB_HC_StartXfer+0x288>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b96c:	4a36      	ldr	r2, [pc, #216]	; (800ba48 <USB_HC_StartXfer+0x288>)
 800b96e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b970:	4b35      	ldr	r3, [pc, #212]	; (800ba48 <USB_HC_StartXfer+0x288>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b978:	4a33      	ldr	r2, [pc, #204]	; (800ba48 <USB_HC_StartXfer+0x288>)
 800b97a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b97c:	69fb      	ldr	r3, [r7, #28]
 800b97e:	015a      	lsls	r2, r3, #5
 800b980:	6a3b      	ldr	r3, [r7, #32]
 800b982:	4413      	add	r3, r2
 800b984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b988:	461a      	mov	r2, r3
 800b98a:	4b2f      	ldr	r3, [pc, #188]	; (800ba48 <USB_HC_StartXfer+0x288>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800b990:	79fb      	ldrb	r3, [r7, #7]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d001      	beq.n	800b99a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800b996:	2300      	movs	r3, #0
 800b998:	e04f      	b.n	800ba3a <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	78db      	ldrb	r3, [r3, #3]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d14a      	bne.n	800ba38 <USB_HC_StartXfer+0x278>
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	691b      	ldr	r3, [r3, #16]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d046      	beq.n	800ba38 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	79db      	ldrb	r3, [r3, #7]
 800b9ae:	2b03      	cmp	r3, #3
 800b9b0:	d830      	bhi.n	800ba14 <USB_HC_StartXfer+0x254>
 800b9b2:	a201      	add	r2, pc, #4	; (adr r2, 800b9b8 <USB_HC_StartXfer+0x1f8>)
 800b9b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9b8:	0800b9c9 	.word	0x0800b9c9
 800b9bc:	0800b9ed 	.word	0x0800b9ed
 800b9c0:	0800b9c9 	.word	0x0800b9c9
 800b9c4:	0800b9ed 	.word	0x0800b9ed
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	691b      	ldr	r3, [r3, #16]
 800b9cc:	3303      	adds	r3, #3
 800b9ce:	089b      	lsrs	r3, r3, #2
 800b9d0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800b9d2:	8afa      	ldrh	r2, [r7, #22]
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d8:	b29b      	uxth	r3, r3
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d91c      	bls.n	800ba18 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	699b      	ldr	r3, [r3, #24]
 800b9e2:	f043 0220 	orr.w	r2, r3, #32
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	619a      	str	r2, [r3, #24]
        }
        break;
 800b9ea:	e015      	b.n	800ba18 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	691b      	ldr	r3, [r3, #16]
 800b9f0:	3303      	adds	r3, #3
 800b9f2:	089b      	lsrs	r3, r3, #2
 800b9f4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800b9f6:	8afa      	ldrh	r2, [r7, #22]
 800b9f8:	6a3b      	ldr	r3, [r7, #32]
 800b9fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b9fe:	691b      	ldr	r3, [r3, #16]
 800ba00:	b29b      	uxth	r3, r3
 800ba02:	429a      	cmp	r2, r3
 800ba04:	d90a      	bls.n	800ba1c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	699b      	ldr	r3, [r3, #24]
 800ba0a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	619a      	str	r2, [r3, #24]
        }
        break;
 800ba12:	e003      	b.n	800ba1c <USB_HC_StartXfer+0x25c>

      default:
        break;
 800ba14:	bf00      	nop
 800ba16:	e002      	b.n	800ba1e <USB_HC_StartXfer+0x25e>
        break;
 800ba18:	bf00      	nop
 800ba1a:	e000      	b.n	800ba1e <USB_HC_StartXfer+0x25e>
        break;
 800ba1c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	68d9      	ldr	r1, [r3, #12]
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	785a      	ldrb	r2, [r3, #1]
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	691b      	ldr	r3, [r3, #16]
 800ba2a:	b298      	uxth	r0, r3
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	9300      	str	r3, [sp, #0]
 800ba30:	4603      	mov	r3, r0
 800ba32:	68f8      	ldr	r0, [r7, #12]
 800ba34:	f7ff fb8a 	bl	800b14c <USB_WritePacket>
  }

  return HAL_OK;
 800ba38:	2300      	movs	r3, #0
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	3728      	adds	r7, #40	; 0x28
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}
 800ba42:	bf00      	nop
 800ba44:	1ff80000 	.word	0x1ff80000
 800ba48:	20000218 	.word	0x20000218

0800ba4c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b085      	sub	sp, #20
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba5e:	695b      	ldr	r3, [r3, #20]
 800ba60:	b29b      	uxth	r3, r3
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3714      	adds	r7, #20
 800ba66:	46bd      	mov	sp, r7
 800ba68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6c:	4770      	bx	lr

0800ba6e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ba6e:	b480      	push	{r7}
 800ba70:	b087      	sub	sp, #28
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
 800ba76:	460b      	mov	r3, r1
 800ba78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800ba7e:	78fb      	ldrb	r3, [r7, #3]
 800ba80:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800ba82:	2300      	movs	r3, #0
 800ba84:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	015a      	lsls	r2, r3, #5
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	4413      	add	r3, r2
 800ba8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	0c9b      	lsrs	r3, r3, #18
 800ba96:	f003 0303 	and.w	r3, r3, #3
 800ba9a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d002      	beq.n	800baa8 <USB_HC_Halt+0x3a>
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	2b02      	cmp	r3, #2
 800baa6:	d16c      	bne.n	800bb82 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	015a      	lsls	r2, r3, #5
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	4413      	add	r3, r2
 800bab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	68fa      	ldr	r2, [r7, #12]
 800bab8:	0151      	lsls	r1, r2, #5
 800baba:	693a      	ldr	r2, [r7, #16]
 800babc:	440a      	add	r2, r1
 800babe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bac2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bac6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bacc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d143      	bne.n	800bb5c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	015a      	lsls	r2, r3, #5
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	4413      	add	r3, r2
 800badc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	68fa      	ldr	r2, [r7, #12]
 800bae4:	0151      	lsls	r1, r2, #5
 800bae6:	693a      	ldr	r2, [r7, #16]
 800bae8:	440a      	add	r2, r1
 800baea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800baee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800baf2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	015a      	lsls	r2, r3, #5
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	4413      	add	r3, r2
 800bafc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	68fa      	ldr	r2, [r7, #12]
 800bb04:	0151      	lsls	r1, r2, #5
 800bb06:	693a      	ldr	r2, [r7, #16]
 800bb08:	440a      	add	r2, r1
 800bb0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bb0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bb12:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	015a      	lsls	r2, r3, #5
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	4413      	add	r3, r2
 800bb1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	68fa      	ldr	r2, [r7, #12]
 800bb24:	0151      	lsls	r1, r2, #5
 800bb26:	693a      	ldr	r2, [r7, #16]
 800bb28:	440a      	add	r2, r1
 800bb2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bb2e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bb32:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	3301      	adds	r3, #1
 800bb38:	617b      	str	r3, [r7, #20]
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bb40:	d81d      	bhi.n	800bb7e <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	015a      	lsls	r2, r3, #5
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	4413      	add	r3, r2
 800bb4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb58:	d0ec      	beq.n	800bb34 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bb5a:	e080      	b.n	800bc5e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	015a      	lsls	r2, r3, #5
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	4413      	add	r3, r2
 800bb64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	68fa      	ldr	r2, [r7, #12]
 800bb6c:	0151      	lsls	r1, r2, #5
 800bb6e:	693a      	ldr	r2, [r7, #16]
 800bb70:	440a      	add	r2, r1
 800bb72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bb76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bb7a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bb7c:	e06f      	b.n	800bc5e <USB_HC_Halt+0x1f0>
          break;
 800bb7e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bb80:	e06d      	b.n	800bc5e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	015a      	lsls	r2, r3, #5
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	4413      	add	r3, r2
 800bb8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	68fa      	ldr	r2, [r7, #12]
 800bb92:	0151      	lsls	r1, r2, #5
 800bb94:	693a      	ldr	r2, [r7, #16]
 800bb96:	440a      	add	r2, r1
 800bb98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bb9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bba0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bba8:	691b      	ldr	r3, [r3, #16]
 800bbaa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d143      	bne.n	800bc3a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	015a      	lsls	r2, r3, #5
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	4413      	add	r3, r2
 800bbba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	68fa      	ldr	r2, [r7, #12]
 800bbc2:	0151      	lsls	r1, r2, #5
 800bbc4:	693a      	ldr	r2, [r7, #16]
 800bbc6:	440a      	add	r2, r1
 800bbc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bbcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bbd0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	015a      	lsls	r2, r3, #5
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	4413      	add	r3, r2
 800bbda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	68fa      	ldr	r2, [r7, #12]
 800bbe2:	0151      	lsls	r1, r2, #5
 800bbe4:	693a      	ldr	r2, [r7, #16]
 800bbe6:	440a      	add	r2, r1
 800bbe8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bbec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bbf0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	015a      	lsls	r2, r3, #5
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	4413      	add	r3, r2
 800bbfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	68fa      	ldr	r2, [r7, #12]
 800bc02:	0151      	lsls	r1, r2, #5
 800bc04:	693a      	ldr	r2, [r7, #16]
 800bc06:	440a      	add	r2, r1
 800bc08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bc10:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	3301      	adds	r3, #1
 800bc16:	617b      	str	r3, [r7, #20]
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bc1e:	d81d      	bhi.n	800bc5c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	015a      	lsls	r2, r3, #5
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	4413      	add	r3, r2
 800bc28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc36:	d0ec      	beq.n	800bc12 <USB_HC_Halt+0x1a4>
 800bc38:	e011      	b.n	800bc5e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	015a      	lsls	r2, r3, #5
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	4413      	add	r3, r2
 800bc42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	68fa      	ldr	r2, [r7, #12]
 800bc4a:	0151      	lsls	r1, r2, #5
 800bc4c:	693a      	ldr	r2, [r7, #16]
 800bc4e:	440a      	add	r2, r1
 800bc50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bc58:	6013      	str	r3, [r2, #0]
 800bc5a:	e000      	b.n	800bc5e <USB_HC_Halt+0x1f0>
          break;
 800bc5c:	bf00      	nop
    }
  }

  return HAL_OK;
 800bc5e:	2300      	movs	r3, #0
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	371c      	adds	r7, #28
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr

0800bc6c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b087      	sub	sp, #28
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	460b      	mov	r3, r1
 800bc76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800bc7c:	78fb      	ldrb	r3, [r7, #3]
 800bc7e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800bc80:	2301      	movs	r3, #1
 800bc82:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	04da      	lsls	r2, r3, #19
 800bc88:	4b15      	ldr	r3, [pc, #84]	; (800bce0 <USB_DoPing+0x74>)
 800bc8a:	4013      	ands	r3, r2
 800bc8c:	693a      	ldr	r2, [r7, #16]
 800bc8e:	0151      	lsls	r1, r2, #5
 800bc90:	697a      	ldr	r2, [r7, #20]
 800bc92:	440a      	add	r2, r1
 800bc94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bc9c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	015a      	lsls	r2, r3, #5
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	4413      	add	r3, r2
 800bca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bcb4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bcbc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	015a      	lsls	r2, r3, #5
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	4413      	add	r3, r2
 800bcc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bcca:	461a      	mov	r2, r3
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800bcd0:	2300      	movs	r3, #0
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	371c      	adds	r7, #28
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcdc:	4770      	bx	lr
 800bcde:	bf00      	nop
 800bce0:	1ff80000 	.word	0x1ff80000

0800bce4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b086      	sub	sp, #24
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f7ff f9a5 	bl	800b044 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800bcfa:	2110      	movs	r1, #16
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f7ff f9dd 	bl	800b0bc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f7ff fa00 	bl	800b108 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800bd08:	2300      	movs	r3, #0
 800bd0a:	613b      	str	r3, [r7, #16]
 800bd0c:	e01f      	b.n	800bd4e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	015a      	lsls	r2, r3, #5
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	4413      	add	r3, r2
 800bd16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bd24:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bd2c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bd34:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	015a      	lsls	r2, r3, #5
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	4413      	add	r3, r2
 800bd3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd42:	461a      	mov	r2, r3
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	613b      	str	r3, [r7, #16]
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	2b0f      	cmp	r3, #15
 800bd52:	d9dc      	bls.n	800bd0e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800bd54:	2300      	movs	r3, #0
 800bd56:	613b      	str	r3, [r7, #16]
 800bd58:	e034      	b.n	800bdc4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	015a      	lsls	r2, r3, #5
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	4413      	add	r3, r2
 800bd62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bd70:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bd78:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bd80:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	015a      	lsls	r2, r3, #5
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	4413      	add	r3, r2
 800bd8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd8e:	461a      	mov	r2, r3
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	3301      	adds	r3, #1
 800bd98:	617b      	str	r3, [r7, #20]
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bda0:	d80c      	bhi.n	800bdbc <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	015a      	lsls	r2, r3, #5
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	4413      	add	r3, r2
 800bdaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bdb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bdb8:	d0ec      	beq.n	800bd94 <USB_StopHost+0xb0>
 800bdba:	e000      	b.n	800bdbe <USB_StopHost+0xda>
        break;
 800bdbc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	613b      	str	r3, [r7, #16]
 800bdc4:	693b      	ldr	r3, [r7, #16]
 800bdc6:	2b0f      	cmp	r3, #15
 800bdc8:	d9c7      	bls.n	800bd5a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	f04f 33ff 	mov.w	r3, #4294967295
 800bdd6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f04f 32ff 	mov.w	r2, #4294967295
 800bdde:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f7ff f91e 	bl	800b022 <USB_EnableGlobalInt>

  return HAL_OK;
 800bde6:	2300      	movs	r3, #0
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3718      	adds	r7, #24
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}

0800bdf0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800bdf0:	b590      	push	{r4, r7, lr}
 800bdf2:	b089      	sub	sp, #36	; 0x24
 800bdf4:	af04      	add	r7, sp, #16
 800bdf6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	2202      	movs	r2, #2
 800bdfc:	2102      	movs	r1, #2
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f000 fcb4 	bl	800c76c <USBH_FindInterface>
 800be04:	4603      	mov	r3, r0
 800be06:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800be08:	7bfb      	ldrb	r3, [r7, #15]
 800be0a:	2bff      	cmp	r3, #255	; 0xff
 800be0c:	d002      	beq.n	800be14 <USBH_CDC_InterfaceInit+0x24>
 800be0e:	7bfb      	ldrb	r3, [r7, #15]
 800be10:	2b01      	cmp	r3, #1
 800be12:	d901      	bls.n	800be18 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800be14:	2302      	movs	r3, #2
 800be16:	e13d      	b.n	800c094 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800be18:	7bfb      	ldrb	r3, [r7, #15]
 800be1a:	4619      	mov	r1, r3
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f000 fc89 	bl	800c734 <USBH_SelectInterface>
 800be22:	4603      	mov	r3, r0
 800be24:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800be26:	7bbb      	ldrb	r3, [r7, #14]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d001      	beq.n	800be30 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800be2c:	2302      	movs	r3, #2
 800be2e:	e131      	b.n	800c094 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800be36:	2050      	movs	r0, #80	; 0x50
 800be38:	f006 f806 	bl	8011e48 <malloc>
 800be3c:	4603      	mov	r3, r0
 800be3e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800be46:	69db      	ldr	r3, [r3, #28]
 800be48:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d101      	bne.n	800be54 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800be50:	2302      	movs	r3, #2
 800be52:	e11f      	b.n	800c094 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800be54:	2250      	movs	r2, #80	; 0x50
 800be56:	2100      	movs	r1, #0
 800be58:	68b8      	ldr	r0, [r7, #8]
 800be5a:	f006 f810 	bl	8011e7e <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800be5e:	7bfb      	ldrb	r3, [r7, #15]
 800be60:	687a      	ldr	r2, [r7, #4]
 800be62:	211a      	movs	r1, #26
 800be64:	fb01 f303 	mul.w	r3, r1, r3
 800be68:	4413      	add	r3, r2
 800be6a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800be6e:	781b      	ldrb	r3, [r3, #0]
 800be70:	b25b      	sxtb	r3, r3
 800be72:	2b00      	cmp	r3, #0
 800be74:	da15      	bge.n	800bea2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800be76:	7bfb      	ldrb	r3, [r7, #15]
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	211a      	movs	r1, #26
 800be7c:	fb01 f303 	mul.w	r3, r1, r3
 800be80:	4413      	add	r3, r2
 800be82:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800be86:	781a      	ldrb	r2, [r3, #0]
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800be8c:	7bfb      	ldrb	r3, [r7, #15]
 800be8e:	687a      	ldr	r2, [r7, #4]
 800be90:	211a      	movs	r1, #26
 800be92:	fb01 f303 	mul.w	r3, r1, r3
 800be96:	4413      	add	r3, r2
 800be98:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800be9c:	881a      	ldrh	r2, [r3, #0]
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	785b      	ldrb	r3, [r3, #1]
 800bea6:	4619      	mov	r1, r3
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f002 f890 	bl	800dfce <USBH_AllocPipe>
 800beae:	4603      	mov	r3, r0
 800beb0:	461a      	mov	r2, r3
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	7819      	ldrb	r1, [r3, #0]
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	7858      	ldrb	r0, [r3, #1]
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800beca:	68ba      	ldr	r2, [r7, #8]
 800becc:	8952      	ldrh	r2, [r2, #10]
 800bece:	9202      	str	r2, [sp, #8]
 800bed0:	2203      	movs	r2, #3
 800bed2:	9201      	str	r2, [sp, #4]
 800bed4:	9300      	str	r3, [sp, #0]
 800bed6:	4623      	mov	r3, r4
 800bed8:	4602      	mov	r2, r0
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f002 f848 	bl	800df70 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	781b      	ldrb	r3, [r3, #0]
 800bee4:	2200      	movs	r2, #0
 800bee6:	4619      	mov	r1, r3
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f005 fee3 	bl	8011cb4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800beee:	2300      	movs	r3, #0
 800bef0:	2200      	movs	r2, #0
 800bef2:	210a      	movs	r1, #10
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f000 fc39 	bl	800c76c <USBH_FindInterface>
 800befa:	4603      	mov	r3, r0
 800befc:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800befe:	7bfb      	ldrb	r3, [r7, #15]
 800bf00:	2bff      	cmp	r3, #255	; 0xff
 800bf02:	d002      	beq.n	800bf0a <USBH_CDC_InterfaceInit+0x11a>
 800bf04:	7bfb      	ldrb	r3, [r7, #15]
 800bf06:	2b01      	cmp	r3, #1
 800bf08:	d901      	bls.n	800bf0e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800bf0a:	2302      	movs	r3, #2
 800bf0c:	e0c2      	b.n	800c094 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800bf0e:	7bfb      	ldrb	r3, [r7, #15]
 800bf10:	687a      	ldr	r2, [r7, #4]
 800bf12:	211a      	movs	r1, #26
 800bf14:	fb01 f303 	mul.w	r3, r1, r3
 800bf18:	4413      	add	r3, r2
 800bf1a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bf1e:	781b      	ldrb	r3, [r3, #0]
 800bf20:	b25b      	sxtb	r3, r3
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	da16      	bge.n	800bf54 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800bf26:	7bfb      	ldrb	r3, [r7, #15]
 800bf28:	687a      	ldr	r2, [r7, #4]
 800bf2a:	211a      	movs	r1, #26
 800bf2c:	fb01 f303 	mul.w	r3, r1, r3
 800bf30:	4413      	add	r3, r2
 800bf32:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bf36:	781a      	ldrb	r2, [r3, #0]
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bf3c:	7bfb      	ldrb	r3, [r7, #15]
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	211a      	movs	r1, #26
 800bf42:	fb01 f303 	mul.w	r3, r1, r3
 800bf46:	4413      	add	r3, r2
 800bf48:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800bf4c:	881a      	ldrh	r2, [r3, #0]
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	835a      	strh	r2, [r3, #26]
 800bf52:	e015      	b.n	800bf80 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800bf54:	7bfb      	ldrb	r3, [r7, #15]
 800bf56:	687a      	ldr	r2, [r7, #4]
 800bf58:	211a      	movs	r1, #26
 800bf5a:	fb01 f303 	mul.w	r3, r1, r3
 800bf5e:	4413      	add	r3, r2
 800bf60:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bf64:	781a      	ldrb	r2, [r3, #0]
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bf6a:	7bfb      	ldrb	r3, [r7, #15]
 800bf6c:	687a      	ldr	r2, [r7, #4]
 800bf6e:	211a      	movs	r1, #26
 800bf70:	fb01 f303 	mul.w	r3, r1, r3
 800bf74:	4413      	add	r3, r2
 800bf76:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800bf7a:	881a      	ldrh	r2, [r3, #0]
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800bf80:	7bfb      	ldrb	r3, [r7, #15]
 800bf82:	687a      	ldr	r2, [r7, #4]
 800bf84:	211a      	movs	r1, #26
 800bf86:	fb01 f303 	mul.w	r3, r1, r3
 800bf8a:	4413      	add	r3, r2
 800bf8c:	f203 3356 	addw	r3, r3, #854	; 0x356
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	b25b      	sxtb	r3, r3
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	da16      	bge.n	800bfc6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800bf98:	7bfb      	ldrb	r3, [r7, #15]
 800bf9a:	687a      	ldr	r2, [r7, #4]
 800bf9c:	211a      	movs	r1, #26
 800bf9e:	fb01 f303 	mul.w	r3, r1, r3
 800bfa2:	4413      	add	r3, r2
 800bfa4:	f203 3356 	addw	r3, r3, #854	; 0x356
 800bfa8:	781a      	ldrb	r2, [r3, #0]
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800bfae:	7bfb      	ldrb	r3, [r7, #15]
 800bfb0:	687a      	ldr	r2, [r7, #4]
 800bfb2:	211a      	movs	r1, #26
 800bfb4:	fb01 f303 	mul.w	r3, r1, r3
 800bfb8:	4413      	add	r3, r2
 800bfba:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800bfbe:	881a      	ldrh	r2, [r3, #0]
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	835a      	strh	r2, [r3, #26]
 800bfc4:	e015      	b.n	800bff2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800bfc6:	7bfb      	ldrb	r3, [r7, #15]
 800bfc8:	687a      	ldr	r2, [r7, #4]
 800bfca:	211a      	movs	r1, #26
 800bfcc:	fb01 f303 	mul.w	r3, r1, r3
 800bfd0:	4413      	add	r3, r2
 800bfd2:	f203 3356 	addw	r3, r3, #854	; 0x356
 800bfd6:	781a      	ldrb	r2, [r3, #0]
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800bfdc:	7bfb      	ldrb	r3, [r7, #15]
 800bfde:	687a      	ldr	r2, [r7, #4]
 800bfe0:	211a      	movs	r1, #26
 800bfe2:	fb01 f303 	mul.w	r3, r1, r3
 800bfe6:	4413      	add	r3, r2
 800bfe8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800bfec:	881a      	ldrh	r2, [r3, #0]
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	7b9b      	ldrb	r3, [r3, #14]
 800bff6:	4619      	mov	r1, r3
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f001 ffe8 	bl	800dfce <USBH_AllocPipe>
 800bffe:	4603      	mov	r3, r0
 800c000:	461a      	mov	r2, r3
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	7bdb      	ldrb	r3, [r3, #15]
 800c00a:	4619      	mov	r1, r3
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f001 ffde 	bl	800dfce <USBH_AllocPipe>
 800c012:	4603      	mov	r3, r0
 800c014:	461a      	mov	r2, r3
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	7b59      	ldrb	r1, [r3, #13]
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	7b98      	ldrb	r0, [r3, #14]
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c02e:	68ba      	ldr	r2, [r7, #8]
 800c030:	8b12      	ldrh	r2, [r2, #24]
 800c032:	9202      	str	r2, [sp, #8]
 800c034:	2202      	movs	r2, #2
 800c036:	9201      	str	r2, [sp, #4]
 800c038:	9300      	str	r3, [sp, #0]
 800c03a:	4623      	mov	r3, r4
 800c03c:	4602      	mov	r2, r0
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f001 ff96 	bl	800df70 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	7b19      	ldrb	r1, [r3, #12]
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	7bd8      	ldrb	r0, [r3, #15]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c058:	68ba      	ldr	r2, [r7, #8]
 800c05a:	8b52      	ldrh	r2, [r2, #26]
 800c05c:	9202      	str	r2, [sp, #8]
 800c05e:	2202      	movs	r2, #2
 800c060:	9201      	str	r2, [sp, #4]
 800c062:	9300      	str	r3, [sp, #0]
 800c064:	4623      	mov	r3, r4
 800c066:	4602      	mov	r2, r0
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f001 ff81 	bl	800df70 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	2200      	movs	r2, #0
 800c072:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	7b5b      	ldrb	r3, [r3, #13]
 800c07a:	2200      	movs	r2, #0
 800c07c:	4619      	mov	r1, r3
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f005 fe18 	bl	8011cb4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	7b1b      	ldrb	r3, [r3, #12]
 800c088:	2200      	movs	r2, #0
 800c08a:	4619      	mov	r1, r3
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f005 fe11 	bl	8011cb4 <USBH_LL_SetToggle>

  return USBH_OK;
 800c092:	2300      	movs	r3, #0
}
 800c094:	4618      	mov	r0, r3
 800c096:	3714      	adds	r7, #20
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd90      	pop	{r4, r7, pc}

0800c09c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b084      	sub	sp, #16
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c0aa:	69db      	ldr	r3, [r3, #28]
 800c0ac:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	781b      	ldrb	r3, [r3, #0]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d00e      	beq.n	800c0d4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	781b      	ldrb	r3, [r3, #0]
 800c0ba:	4619      	mov	r1, r3
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f001 ff76 	bl	800dfae <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	781b      	ldrb	r3, [r3, #0]
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f001 ffa1 	bl	800e010 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	7b1b      	ldrb	r3, [r3, #12]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d00e      	beq.n	800c0fa <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	7b1b      	ldrb	r3, [r3, #12]
 800c0e0:	4619      	mov	r1, r3
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f001 ff63 	bl	800dfae <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	7b1b      	ldrb	r3, [r3, #12]
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	f001 ff8e 	bl	800e010 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	7b5b      	ldrb	r3, [r3, #13]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d00e      	beq.n	800c120 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	7b5b      	ldrb	r3, [r3, #13]
 800c106:	4619      	mov	r1, r3
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f001 ff50 	bl	800dfae <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	7b5b      	ldrb	r3, [r3, #13]
 800c112:	4619      	mov	r1, r3
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f001 ff7b 	bl	800e010 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	2200      	movs	r2, #0
 800c11e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c126:	69db      	ldr	r3, [r3, #28]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d00b      	beq.n	800c144 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c132:	69db      	ldr	r3, [r3, #28]
 800c134:	4618      	mov	r0, r3
 800c136:	f005 fe8f 	bl	8011e58 <free>
    phost->pActiveClass->pData = 0U;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c140:	2200      	movs	r2, #0
 800c142:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800c144:	2300      	movs	r3, #0
}
 800c146:	4618      	mov	r0, r3
 800c148:	3710      	adds	r7, #16
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}

0800c14e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800c14e:	b580      	push	{r7, lr}
 800c150:	b084      	sub	sp, #16
 800c152:	af00      	add	r7, sp, #0
 800c154:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c15c:	69db      	ldr	r3, [r3, #28]
 800c15e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	3340      	adds	r3, #64	; 0x40
 800c164:	4619      	mov	r1, r3
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f000 f8b1 	bl	800c2ce <GetLineCoding>
 800c16c:	4603      	mov	r3, r0
 800c16e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800c170:	7afb      	ldrb	r3, [r7, #11]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d105      	bne.n	800c182 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c17c:	2102      	movs	r1, #2
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800c182:	7afb      	ldrb	r3, [r7, #11]
}
 800c184:	4618      	mov	r0, r3
 800c186:	3710      	adds	r7, #16
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b084      	sub	sp, #16
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c194:	2301      	movs	r3, #1
 800c196:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800c198:	2300      	movs	r3, #0
 800c19a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c1a2:	69db      	ldr	r3, [r3, #28]
 800c1a4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c1ac:	2b04      	cmp	r3, #4
 800c1ae:	d877      	bhi.n	800c2a0 <USBH_CDC_Process+0x114>
 800c1b0:	a201      	add	r2, pc, #4	; (adr r2, 800c1b8 <USBH_CDC_Process+0x2c>)
 800c1b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1b6:	bf00      	nop
 800c1b8:	0800c1cd 	.word	0x0800c1cd
 800c1bc:	0800c1d3 	.word	0x0800c1d3
 800c1c0:	0800c203 	.word	0x0800c203
 800c1c4:	0800c277 	.word	0x0800c277
 800c1c8:	0800c285 	.word	0x0800c285
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	73fb      	strb	r3, [r7, #15]
      break;
 800c1d0:	e06d      	b.n	800c2ae <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f000 f897 	bl	800c30c <SetLineCoding>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c1e2:	7bbb      	ldrb	r3, [r7, #14]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d104      	bne.n	800c1f2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	2202      	movs	r2, #2
 800c1ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c1f0:	e058      	b.n	800c2a4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800c1f2:	7bbb      	ldrb	r3, [r7, #14]
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	d055      	beq.n	800c2a4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	2204      	movs	r2, #4
 800c1fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800c200:	e050      	b.n	800c2a4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	3340      	adds	r3, #64	; 0x40
 800c206:	4619      	mov	r1, r3
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f000 f860 	bl	800c2ce <GetLineCoding>
 800c20e:	4603      	mov	r3, r0
 800c210:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c212:	7bbb      	ldrb	r3, [r7, #14]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d126      	bne.n	800c266 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	2200      	movs	r2, #0
 800c21c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c22a:	791b      	ldrb	r3, [r3, #4]
 800c22c:	429a      	cmp	r2, r3
 800c22e:	d13b      	bne.n	800c2a8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c23a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d133      	bne.n	800c2a8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c24a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d12b      	bne.n	800c2a8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c258:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c25a:	429a      	cmp	r2, r3
 800c25c:	d124      	bne.n	800c2a8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f000 f984 	bl	800c56c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c264:	e020      	b.n	800c2a8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800c266:	7bbb      	ldrb	r3, [r7, #14]
 800c268:	2b01      	cmp	r3, #1
 800c26a:	d01d      	beq.n	800c2a8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	2204      	movs	r2, #4
 800c270:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800c274:	e018      	b.n	800c2a8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 f867 	bl	800c34a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f000 f8f8 	bl	800c472 <CDC_ProcessReception>
      break;
 800c282:	e014      	b.n	800c2ae <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800c284:	2100      	movs	r1, #0
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f001 f94f 	bl	800d52a <USBH_ClrFeature>
 800c28c:	4603      	mov	r3, r0
 800c28e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c290:	7bbb      	ldrb	r3, [r7, #14]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d10a      	bne.n	800c2ac <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	2200      	movs	r2, #0
 800c29a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800c29e:	e005      	b.n	800c2ac <USBH_CDC_Process+0x120>

    default:
      break;
 800c2a0:	bf00      	nop
 800c2a2:	e004      	b.n	800c2ae <USBH_CDC_Process+0x122>
      break;
 800c2a4:	bf00      	nop
 800c2a6:	e002      	b.n	800c2ae <USBH_CDC_Process+0x122>
      break;
 800c2a8:	bf00      	nop
 800c2aa:	e000      	b.n	800c2ae <USBH_CDC_Process+0x122>
      break;
 800c2ac:	bf00      	nop

  }

  return status;
 800c2ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3710      	adds	r7, #16
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b083      	sub	sp, #12
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800c2c0:	2300      	movs	r3, #0
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	370c      	adds	r7, #12
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr

0800c2ce <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800c2ce:	b580      	push	{r7, lr}
 800c2d0:	b082      	sub	sp, #8
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	6078      	str	r0, [r7, #4]
 800c2d6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	22a1      	movs	r2, #161	; 0xa1
 800c2dc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2221      	movs	r2, #33	; 0x21
 800c2e2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2207      	movs	r2, #7
 800c2f4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	2207      	movs	r2, #7
 800c2fa:	4619      	mov	r1, r3
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f001 faf4 	bl	800d8ea <USBH_CtlReq>
 800c302:	4603      	mov	r3, r0
}
 800c304:	4618      	mov	r0, r3
 800c306:	3708      	adds	r7, #8
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}

0800c30c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b082      	sub	sp, #8
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2221      	movs	r2, #33	; 0x21
 800c31a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2220      	movs	r2, #32
 800c320:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2200      	movs	r2, #0
 800c326:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2200      	movs	r2, #0
 800c32c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2207      	movs	r2, #7
 800c332:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	2207      	movs	r2, #7
 800c338:	4619      	mov	r1, r3
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f001 fad5 	bl	800d8ea <USBH_CtlReq>
 800c340:	4603      	mov	r3, r0
}
 800c342:	4618      	mov	r0, r3
 800c344:	3708      	adds	r7, #8
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}

0800c34a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800c34a:	b580      	push	{r7, lr}
 800c34c:	b086      	sub	sp, #24
 800c34e:	af02      	add	r7, sp, #8
 800c350:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c358:	69db      	ldr	r3, [r3, #28]
 800c35a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c35c:	2300      	movs	r3, #0
 800c35e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800c366:	2b01      	cmp	r3, #1
 800c368:	d002      	beq.n	800c370 <CDC_ProcessTransmission+0x26>
 800c36a:	2b02      	cmp	r3, #2
 800c36c:	d025      	beq.n	800c3ba <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800c36e:	e07c      	b.n	800c46a <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c374:	68fa      	ldr	r2, [r7, #12]
 800c376:	8b12      	ldrh	r2, [r2, #24]
 800c378:	4293      	cmp	r3, r2
 800c37a:	d90c      	bls.n	800c396 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	69d9      	ldr	r1, [r3, #28]
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	8b1a      	ldrh	r2, [r3, #24]
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	7b58      	ldrb	r0, [r3, #13]
 800c388:	2301      	movs	r3, #1
 800c38a:	9300      	str	r3, [sp, #0]
 800c38c:	4603      	mov	r3, r0
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	f001 fdab 	bl	800deea <USBH_BulkSendData>
 800c394:	e00c      	b.n	800c3b0 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800c39e:	b29a      	uxth	r2, r3
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	7b58      	ldrb	r0, [r3, #13]
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	9300      	str	r3, [sp, #0]
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f001 fd9d 	bl	800deea <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	2202      	movs	r2, #2
 800c3b4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800c3b8:	e057      	b.n	800c46a <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	7b5b      	ldrb	r3, [r3, #13]
 800c3be:	4619      	mov	r1, r3
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f005 fc4d 	bl	8011c60 <USBH_LL_GetURBState>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800c3ca:	7afb      	ldrb	r3, [r7, #11]
 800c3cc:	2b01      	cmp	r3, #1
 800c3ce:	d136      	bne.n	800c43e <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3d4:	68fa      	ldr	r2, [r7, #12]
 800c3d6:	8b12      	ldrh	r2, [r2, #24]
 800c3d8:	4293      	cmp	r3, r2
 800c3da:	d90e      	bls.n	800c3fa <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3e0:	68fa      	ldr	r2, [r7, #12]
 800c3e2:	8b12      	ldrh	r2, [r2, #24]
 800c3e4:	1a9a      	subs	r2, r3, r2
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	69db      	ldr	r3, [r3, #28]
 800c3ee:	68fa      	ldr	r2, [r7, #12]
 800c3f0:	8b12      	ldrh	r2, [r2, #24]
 800c3f2:	441a      	add	r2, r3
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	61da      	str	r2, [r3, #28]
 800c3f8:	e002      	b.n	800c400 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c404:	2b00      	cmp	r3, #0
 800c406:	d004      	beq.n	800c412 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	2201      	movs	r2, #1
 800c40c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800c410:	e006      	b.n	800c420 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	2200      	movs	r2, #0
 800c416:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f000 f892 	bl	800c544 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2204      	movs	r2, #4
 800c424:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c434:	2300      	movs	r3, #0
 800c436:	2200      	movs	r2, #0
 800c438:	f002 f940 	bl	800e6bc <osMessageQueuePut>
      break;
 800c43c:	e014      	b.n	800c468 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 800c43e:	7afb      	ldrb	r3, [r7, #11]
 800c440:	2b02      	cmp	r3, #2
 800c442:	d111      	bne.n	800c468 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	2201      	movs	r2, #1
 800c448:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2204      	movs	r2, #4
 800c450:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c460:	2300      	movs	r3, #0
 800c462:	2200      	movs	r2, #0
 800c464:	f002 f92a 	bl	800e6bc <osMessageQueuePut>
      break;
 800c468:	bf00      	nop
  }
}
 800c46a:	bf00      	nop
 800c46c:	3710      	adds	r7, #16
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}

0800c472 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800c472:	b580      	push	{r7, lr}
 800c474:	b086      	sub	sp, #24
 800c476:	af00      	add	r7, sp, #0
 800c478:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c480:	69db      	ldr	r3, [r3, #28]
 800c482:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c484:	2300      	movs	r3, #0
 800c486:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800c48e:	2b03      	cmp	r3, #3
 800c490:	d002      	beq.n	800c498 <CDC_ProcessReception+0x26>
 800c492:	2b04      	cmp	r3, #4
 800c494:	d00e      	beq.n	800c4b4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800c496:	e051      	b.n	800c53c <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	6a19      	ldr	r1, [r3, #32]
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	8b5a      	ldrh	r2, [r3, #26]
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	7b1b      	ldrb	r3, [r3, #12]
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f001 fd45 	bl	800df34 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	2204      	movs	r2, #4
 800c4ae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800c4b2:	e043      	b.n	800c53c <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	7b1b      	ldrb	r3, [r3, #12]
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f005 fbd0 	bl	8011c60 <USBH_LL_GetURBState>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800c4c4:	7cfb      	ldrb	r3, [r7, #19]
 800c4c6:	2b01      	cmp	r3, #1
 800c4c8:	d137      	bne.n	800c53a <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800c4ca:	697b      	ldr	r3, [r7, #20]
 800c4cc:	7b1b      	ldrb	r3, [r3, #12]
 800c4ce:	4619      	mov	r1, r3
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f005 fb33 	bl	8011b3c <USBH_LL_GetLastXferSize>
 800c4d6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4dc:	68fa      	ldr	r2, [r7, #12]
 800c4de:	429a      	cmp	r2, r3
 800c4e0:	d016      	beq.n	800c510 <CDC_ProcessReception+0x9e>
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	8b5b      	ldrh	r3, [r3, #26]
 800c4e6:	461a      	mov	r2, r3
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d910      	bls.n	800c510 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800c4ee:	697b      	ldr	r3, [r7, #20]
 800c4f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	1ad2      	subs	r2, r2, r3
 800c4f6:	697b      	ldr	r3, [r7, #20]
 800c4f8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800c4fa:	697b      	ldr	r3, [r7, #20]
 800c4fc:	6a1a      	ldr	r2, [r3, #32]
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	441a      	add	r2, r3
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	2203      	movs	r2, #3
 800c50a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800c50e:	e006      	b.n	800c51e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	2200      	movs	r2, #0
 800c514:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f000 f81d 	bl	800c558 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2204      	movs	r2, #4
 800c522:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c532:	2300      	movs	r3, #0
 800c534:	2200      	movs	r2, #0
 800c536:	f002 f8c1 	bl	800e6bc <osMessageQueuePut>
      break;
 800c53a:	bf00      	nop
  }
}
 800c53c:	bf00      	nop
 800c53e:	3718      	adds	r7, #24
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}

0800c544 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800c544:	b480      	push	{r7}
 800c546:	b083      	sub	sp, #12
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c54c:	bf00      	nop
 800c54e:	370c      	adds	r7, #12
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr

0800c558 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800c558:	b480      	push	{r7}
 800c55a:	b083      	sub	sp, #12
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c560:	bf00      	nop
 800c562:	370c      	adds	r7, #12
 800c564:	46bd      	mov	sp, r7
 800c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56a:	4770      	bx	lr

0800c56c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800c56c:	b480      	push	{r7}
 800c56e:	b083      	sub	sp, #12
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c574:	bf00      	nop
 800c576:	370c      	adds	r7, #12
 800c578:	46bd      	mov	sp, r7
 800c57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57e:	4770      	bx	lr

0800c580 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b084      	sub	sp, #16
 800c584:	af00      	add	r7, sp, #0
 800c586:	60f8      	str	r0, [r7, #12]
 800c588:	60b9      	str	r1, [r7, #8]
 800c58a:	4613      	mov	r3, r2
 800c58c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d101      	bne.n	800c598 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c594:	2302      	movs	r3, #2
 800c596:	e044      	b.n	800c622 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	79fa      	ldrb	r2, [r7, #7]
 800c59c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800c5b0:	68f8      	ldr	r0, [r7, #12]
 800c5b2:	f000 f841 	bl	800c638 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d003      	beq.n	800c5e4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	68ba      	ldr	r2, [r7, #8]
 800c5e0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	2104      	movs	r1, #4
 800c5e8:	2010      	movs	r0, #16
 800c5ea:	f001 ffe1 	bl	800e5b0 <osMessageQueueNew>
 800c5ee:	4602      	mov	r2, r0
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800c5f6:	4b0d      	ldr	r3, [pc, #52]	; (800c62c <USBH_Init+0xac>)
 800c5f8:	4a0d      	ldr	r2, [pc, #52]	; (800c630 <USBH_Init+0xb0>)
 800c5fa:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800c5fc:	4b0b      	ldr	r3, [pc, #44]	; (800c62c <USBH_Init+0xac>)
 800c5fe:	2280      	movs	r2, #128	; 0x80
 800c600:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800c602:	4b0a      	ldr	r3, [pc, #40]	; (800c62c <USBH_Init+0xac>)
 800c604:	2218      	movs	r2, #24
 800c606:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800c608:	4a08      	ldr	r2, [pc, #32]	; (800c62c <USBH_Init+0xac>)
 800c60a:	68f9      	ldr	r1, [r7, #12]
 800c60c:	4809      	ldr	r0, [pc, #36]	; (800c634 <USBH_Init+0xb4>)
 800c60e:	f001 fdb3 	bl	800e178 <osThreadNew>
 800c612:	4602      	mov	r2, r0
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800c61a:	68f8      	ldr	r0, [r7, #12]
 800c61c:	f005 f9dc 	bl	80119d8 <USBH_LL_Init>

  return USBH_OK;
 800c620:	2300      	movs	r3, #0
}
 800c622:	4618      	mov	r0, r3
 800c624:	3710      	adds	r7, #16
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}
 800c62a:	bf00      	nop
 800c62c:	20004f84 	.word	0x20004f84
 800c630:	08012100 	.word	0x08012100
 800c634:	0800d2a1 	.word	0x0800d2a1

0800c638 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c638:	b480      	push	{r7}
 800c63a:	b085      	sub	sp, #20
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c640:	2300      	movs	r3, #0
 800c642:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c644:	2300      	movs	r3, #0
 800c646:	60fb      	str	r3, [r7, #12]
 800c648:	e009      	b.n	800c65e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c64a:	687a      	ldr	r2, [r7, #4]
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	33e0      	adds	r3, #224	; 0xe0
 800c650:	009b      	lsls	r3, r3, #2
 800c652:	4413      	add	r3, r2
 800c654:	2200      	movs	r2, #0
 800c656:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	3301      	adds	r3, #1
 800c65c:	60fb      	str	r3, [r7, #12]
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	2b0e      	cmp	r3, #14
 800c662:	d9f2      	bls.n	800c64a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c664:	2300      	movs	r3, #0
 800c666:	60fb      	str	r3, [r7, #12]
 800c668:	e009      	b.n	800c67e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c66a:	687a      	ldr	r2, [r7, #4]
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	4413      	add	r3, r2
 800c670:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c674:	2200      	movs	r2, #0
 800c676:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	3301      	adds	r3, #1
 800c67c:	60fb      	str	r3, [r7, #12]
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c684:	d3f1      	bcc.n	800c66a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2200      	movs	r2, #0
 800c68a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2200      	movs	r2, #0
 800c690:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2201      	movs	r2, #1
 800c696:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2200      	movs	r2, #0
 800c69c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2240      	movs	r2, #64	; 0x40
 800c6aa:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2201      	movs	r2, #1
 800c6be:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800c6d2:	2300      	movs	r3, #0
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3714      	adds	r7, #20
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr

0800c6e0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b085      	sub	sp, #20
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d016      	beq.n	800c722 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d10e      	bne.n	800c71c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c704:	1c59      	adds	r1, r3, #1
 800c706:	687a      	ldr	r2, [r7, #4]
 800c708:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800c70c:	687a      	ldr	r2, [r7, #4]
 800c70e:	33de      	adds	r3, #222	; 0xde
 800c710:	6839      	ldr	r1, [r7, #0]
 800c712:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c716:	2300      	movs	r3, #0
 800c718:	73fb      	strb	r3, [r7, #15]
 800c71a:	e004      	b.n	800c726 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c71c:	2302      	movs	r3, #2
 800c71e:	73fb      	strb	r3, [r7, #15]
 800c720:	e001      	b.n	800c726 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c722:	2302      	movs	r3, #2
 800c724:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c726:	7bfb      	ldrb	r3, [r7, #15]
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3714      	adds	r7, #20
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr

0800c734 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c734:	b480      	push	{r7}
 800c736:	b085      	sub	sp, #20
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	460b      	mov	r3, r1
 800c73e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c740:	2300      	movs	r3, #0
 800c742:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800c74a:	78fa      	ldrb	r2, [r7, #3]
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d204      	bcs.n	800c75a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	78fa      	ldrb	r2, [r7, #3]
 800c754:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800c758:	e001      	b.n	800c75e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c75a:	2302      	movs	r3, #2
 800c75c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c75e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c760:	4618      	mov	r0, r3
 800c762:	3714      	adds	r7, #20
 800c764:	46bd      	mov	sp, r7
 800c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76a:	4770      	bx	lr

0800c76c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c76c:	b480      	push	{r7}
 800c76e:	b087      	sub	sp, #28
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	4608      	mov	r0, r1
 800c776:	4611      	mov	r1, r2
 800c778:	461a      	mov	r2, r3
 800c77a:	4603      	mov	r3, r0
 800c77c:	70fb      	strb	r3, [r7, #3]
 800c77e:	460b      	mov	r3, r1
 800c780:	70bb      	strb	r3, [r7, #2]
 800c782:	4613      	mov	r3, r2
 800c784:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c786:	2300      	movs	r3, #0
 800c788:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800c78a:	2300      	movs	r3, #0
 800c78c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c794:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c796:	e025      	b.n	800c7e4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c798:	7dfb      	ldrb	r3, [r7, #23]
 800c79a:	221a      	movs	r2, #26
 800c79c:	fb02 f303 	mul.w	r3, r2, r3
 800c7a0:	3308      	adds	r3, #8
 800c7a2:	68fa      	ldr	r2, [r7, #12]
 800c7a4:	4413      	add	r3, r2
 800c7a6:	3302      	adds	r3, #2
 800c7a8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c7aa:	693b      	ldr	r3, [r7, #16]
 800c7ac:	795b      	ldrb	r3, [r3, #5]
 800c7ae:	78fa      	ldrb	r2, [r7, #3]
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d002      	beq.n	800c7ba <USBH_FindInterface+0x4e>
 800c7b4:	78fb      	ldrb	r3, [r7, #3]
 800c7b6:	2bff      	cmp	r3, #255	; 0xff
 800c7b8:	d111      	bne.n	800c7de <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c7be:	78ba      	ldrb	r2, [r7, #2]
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	d002      	beq.n	800c7ca <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c7c4:	78bb      	ldrb	r3, [r7, #2]
 800c7c6:	2bff      	cmp	r3, #255	; 0xff
 800c7c8:	d109      	bne.n	800c7de <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c7ce:	787a      	ldrb	r2, [r7, #1]
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d002      	beq.n	800c7da <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c7d4:	787b      	ldrb	r3, [r7, #1]
 800c7d6:	2bff      	cmp	r3, #255	; 0xff
 800c7d8:	d101      	bne.n	800c7de <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c7da:	7dfb      	ldrb	r3, [r7, #23]
 800c7dc:	e006      	b.n	800c7ec <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c7de:	7dfb      	ldrb	r3, [r7, #23]
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c7e4:	7dfb      	ldrb	r3, [r7, #23]
 800c7e6:	2b01      	cmp	r3, #1
 800c7e8:	d9d6      	bls.n	800c798 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c7ea:	23ff      	movs	r3, #255	; 0xff
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	371c      	adds	r7, #28
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f6:	4770      	bx	lr

0800c7f8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b082      	sub	sp, #8
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f005 f925 	bl	8011a50 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800c806:	2101      	movs	r1, #1
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f005 fa3c 	bl	8011c86 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c80e:	2300      	movs	r3, #0
}
 800c810:	4618      	mov	r0, r3
 800c812:	3708      	adds	r7, #8
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}

0800c818 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b088      	sub	sp, #32
 800c81c:	af04      	add	r7, sp, #16
 800c81e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c820:	2302      	movs	r3, #2
 800c822:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c824:	2300      	movs	r3, #0
 800c826:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800c82e:	b2db      	uxtb	r3, r3
 800c830:	2b01      	cmp	r3, #1
 800c832:	d102      	bne.n	800c83a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2203      	movs	r2, #3
 800c838:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	781b      	ldrb	r3, [r3, #0]
 800c83e:	b2db      	uxtb	r3, r3
 800c840:	2b0b      	cmp	r3, #11
 800c842:	f200 823c 	bhi.w	800ccbe <USBH_Process+0x4a6>
 800c846:	a201      	add	r2, pc, #4	; (adr r2, 800c84c <USBH_Process+0x34>)
 800c848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c84c:	0800c87d 	.word	0x0800c87d
 800c850:	0800c8cb 	.word	0x0800c8cb
 800c854:	0800c94f 	.word	0x0800c94f
 800c858:	0800cc3d 	.word	0x0800cc3d
 800c85c:	0800ccbf 	.word	0x0800ccbf
 800c860:	0800ca0f 	.word	0x0800ca0f
 800c864:	0800cbc7 	.word	0x0800cbc7
 800c868:	0800ca61 	.word	0x0800ca61
 800c86c:	0800ca9d 	.word	0x0800ca9d
 800c870:	0800cad7 	.word	0x0800cad7
 800c874:	0800cb1f 	.word	0x0800cb1f
 800c878:	0800cc25 	.word	0x0800cc25
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c882:	b2db      	uxtb	r3, r3
 800c884:	2b00      	cmp	r3, #0
 800c886:	f000 821c 	beq.w	800ccc2 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2201      	movs	r2, #1
 800c88e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c890:	20c8      	movs	r0, #200	; 0xc8
 800c892:	f005 fa42 	bl	8011d1a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f005 f935 	bl	8011b06 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2201      	movs	r2, #1
 800c8b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	f001 fefa 	bl	800e6bc <osMessageQueuePut>
#endif
#endif
      }
      break;
 800c8c8:	e1fb      	b.n	800ccc2 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800c8d0:	2b01      	cmp	r3, #1
 800c8d2:	d107      	bne.n	800c8e4 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2202      	movs	r2, #2
 800c8e0:	701a      	strb	r2, [r3, #0]
 800c8e2:	e025      	b.n	800c930 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c8ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c8ee:	d914      	bls.n	800c91a <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c8f6:	3301      	adds	r3, #1
 800c8f8:	b2da      	uxtb	r2, r3
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c906:	2b03      	cmp	r3, #3
 800c908:	d903      	bls.n	800c912 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	220d      	movs	r2, #13
 800c90e:	701a      	strb	r2, [r3, #0]
 800c910:	e00e      	b.n	800c930 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2200      	movs	r2, #0
 800c916:	701a      	strb	r2, [r3, #0]
 800c918:	e00a      	b.n	800c930 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c920:	f103 020a 	add.w	r2, r3, #10
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800c92a:	200a      	movs	r0, #10
 800c92c:	f005 f9f5 	bl	8011d1a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2201      	movs	r2, #1
 800c934:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c944:	2300      	movs	r3, #0
 800c946:	2200      	movs	r2, #0
 800c948:	f001 feb8 	bl	800e6bc <osMessageQueuePut>
#endif
#endif
      break;
 800c94c:	e1c0      	b.n	800ccd0 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c954:	2b00      	cmp	r3, #0
 800c956:	d005      	beq.n	800c964 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c95e:	2104      	movs	r1, #4
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c964:	2064      	movs	r0, #100	; 0x64
 800c966:	f005 f9d8 	bl	8011d1a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	f005 f8a6 	bl	8011abc <USBH_LL_GetSpeed>
 800c970:	4603      	mov	r3, r0
 800c972:	461a      	mov	r2, r3
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2205      	movs	r2, #5
 800c97e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c980:	2100      	movs	r1, #0
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f001 fb23 	bl	800dfce <USBH_AllocPipe>
 800c988:	4603      	mov	r3, r0
 800c98a:	461a      	mov	r2, r3
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c990:	2180      	movs	r1, #128	; 0x80
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f001 fb1b 	bl	800dfce <USBH_AllocPipe>
 800c998:	4603      	mov	r3, r0
 800c99a:	461a      	mov	r2, r3
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	7919      	ldrb	r1, [r3, #4]
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c9b0:	687a      	ldr	r2, [r7, #4]
 800c9b2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c9b4:	b292      	uxth	r2, r2
 800c9b6:	9202      	str	r2, [sp, #8]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	9201      	str	r2, [sp, #4]
 800c9bc:	9300      	str	r3, [sp, #0]
 800c9be:	4603      	mov	r3, r0
 800c9c0:	2280      	movs	r2, #128	; 0x80
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f001 fad4 	bl	800df70 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	7959      	ldrb	r1, [r3, #5]
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c9dc:	b292      	uxth	r2, r2
 800c9de:	9202      	str	r2, [sp, #8]
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	9201      	str	r2, [sp, #4]
 800c9e4:	9300      	str	r3, [sp, #0]
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f001 fac0 	bl	800df70 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2201      	movs	r2, #1
 800c9f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ca04:	2300      	movs	r3, #0
 800ca06:	2200      	movs	r2, #0
 800ca08:	f001 fe58 	bl	800e6bc <osMessageQueuePut>
#endif
#endif
      break;
 800ca0c:	e160      	b.n	800ccd0 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f000 f964 	bl	800ccdc <USBH_HandleEnum>
 800ca14:	4603      	mov	r3, r0
 800ca16:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800ca18:	7bbb      	ldrb	r3, [r7, #14]
 800ca1a:	b2db      	uxtb	r3, r3
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	f040 8152 	bne.w	800ccc6 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2200      	movs	r2, #0
 800ca26:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800ca30:	2b01      	cmp	r3, #1
 800ca32:	d103      	bne.n	800ca3c <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2208      	movs	r2, #8
 800ca38:	701a      	strb	r2, [r3, #0]
 800ca3a:	e002      	b.n	800ca42 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2207      	movs	r2, #7
 800ca40:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2205      	movs	r2, #5
 800ca46:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ca56:	2300      	movs	r3, #0
 800ca58:	2200      	movs	r2, #0
 800ca5a:	f001 fe2f 	bl	800e6bc <osMessageQueuePut>
#endif
#endif
      }
      break;
 800ca5e:	e132      	b.n	800ccc6 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	f000 812f 	beq.w	800ccca <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ca72:	2101      	movs	r1, #1
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2208      	movs	r2, #8
 800ca7c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2205      	movs	r2, #5
 800ca82:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ca92:	2300      	movs	r3, #0
 800ca94:	2200      	movs	r2, #0
 800ca96:	f001 fe11 	bl	800e6bc <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800ca9a:	e116      	b.n	800ccca <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800caa2:	b29b      	uxth	r3, r3
 800caa4:	4619      	mov	r1, r3
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f000 fcf8 	bl	800d49c <USBH_SetCfg>
 800caac:	4603      	mov	r3, r0
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d102      	bne.n	800cab8 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2209      	movs	r2, #9
 800cab6:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2201      	movs	r2, #1
 800cabc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cacc:	2300      	movs	r3, #0
 800cace:	2200      	movs	r2, #0
 800cad0:	f001 fdf4 	bl	800e6bc <osMessageQueuePut>
#endif
#endif
      break;
 800cad4:	e0fc      	b.n	800ccd0 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800cadc:	f003 0320 	and.w	r3, r3, #32
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d00a      	beq.n	800cafa <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800cae4:	2101      	movs	r1, #1
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f000 fcfb 	bl	800d4e2 <USBH_SetFeature>
 800caec:	4603      	mov	r3, r0
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d106      	bne.n	800cb00 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	220a      	movs	r2, #10
 800caf6:	701a      	strb	r2, [r3, #0]
 800caf8:	e002      	b.n	800cb00 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	220a      	movs	r2, #10
 800cafe:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2201      	movs	r2, #1
 800cb04:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cb14:	2300      	movs	r3, #0
 800cb16:	2200      	movs	r2, #0
 800cb18:	f001 fdd0 	bl	800e6bc <osMessageQueuePut>
#endif
#endif
      break;
 800cb1c:	e0d8      	b.n	800ccd0 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d03f      	beq.n	800cba8 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cb30:	2300      	movs	r3, #0
 800cb32:	73fb      	strb	r3, [r7, #15]
 800cb34:	e016      	b.n	800cb64 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800cb36:	7bfa      	ldrb	r2, [r7, #15]
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	32de      	adds	r2, #222	; 0xde
 800cb3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb40:	791a      	ldrb	r2, [r3, #4]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d108      	bne.n	800cb5e <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800cb4c:	7bfa      	ldrb	r2, [r7, #15]
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	32de      	adds	r2, #222	; 0xde
 800cb52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800cb5c:	e005      	b.n	800cb6a <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cb5e:	7bfb      	ldrb	r3, [r7, #15]
 800cb60:	3301      	adds	r3, #1
 800cb62:	73fb      	strb	r3, [r7, #15]
 800cb64:	7bfb      	ldrb	r3, [r7, #15]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d0e5      	beq.n	800cb36 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d016      	beq.n	800cba2 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb7a:	689b      	ldr	r3, [r3, #8]
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	4798      	blx	r3
 800cb80:	4603      	mov	r3, r0
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d109      	bne.n	800cb9a <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2206      	movs	r2, #6
 800cb8a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cb92:	2103      	movs	r1, #3
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	4798      	blx	r3
 800cb98:	e006      	b.n	800cba8 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	220d      	movs	r2, #13
 800cb9e:	701a      	strb	r2, [r3, #0]
 800cba0:	e002      	b.n	800cba8 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	220d      	movs	r2, #13
 800cba6:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2205      	movs	r2, #5
 800cbac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	f001 fd7c 	bl	800e6bc <osMessageQueuePut>
#endif
#endif
      break;
 800cbc4:	e084      	b.n	800ccd0 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d017      	beq.n	800cc00 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cbd6:	691b      	ldr	r3, [r3, #16]
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	4798      	blx	r3
 800cbdc:	4603      	mov	r3, r0
 800cbde:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cbe0:	7bbb      	ldrb	r3, [r7, #14]
 800cbe2:	b2db      	uxtb	r3, r3
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d103      	bne.n	800cbf0 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	220b      	movs	r2, #11
 800cbec:	701a      	strb	r2, [r3, #0]
 800cbee:	e00a      	b.n	800cc06 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800cbf0:	7bbb      	ldrb	r3, [r7, #14]
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	2b02      	cmp	r3, #2
 800cbf6:	d106      	bne.n	800cc06 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	220d      	movs	r2, #13
 800cbfc:	701a      	strb	r2, [r3, #0]
 800cbfe:	e002      	b.n	800cc06 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	220d      	movs	r2, #13
 800cc04:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2205      	movs	r2, #5
 800cc0a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	f001 fd4d 	bl	800e6bc <osMessageQueuePut>
#endif
#endif
      break;
 800cc22:	e055      	b.n	800ccd0 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d04f      	beq.n	800ccce <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc34:	695b      	ldr	r3, [r3, #20]
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	4798      	blx	r3
      }
      break;
 800cc3a:	e048      	b.n	800ccce <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2200      	movs	r2, #0
 800cc40:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f7ff fcf7 	bl	800c638 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d009      	beq.n	800cc68 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc5a:	68db      	ldr	r3, [r3, #12]
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2200      	movs	r2, #0
 800cc64:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d005      	beq.n	800cc7e <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cc78:	2105      	movs	r1, #5
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800cc84:	b2db      	uxtb	r3, r3
 800cc86:	2b01      	cmp	r3, #1
 800cc88:	d107      	bne.n	800cc9a <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	f7ff fdb0 	bl	800c7f8 <USBH_Start>
 800cc98:	e002      	b.n	800cca0 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f004 fed8 	bl	8011a50 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2201      	movs	r2, #1
 800cca4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	f001 fd00 	bl	800e6bc <osMessageQueuePut>
#endif
#endif
      break;
 800ccbc:	e008      	b.n	800ccd0 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800ccbe:	bf00      	nop
 800ccc0:	e006      	b.n	800ccd0 <USBH_Process+0x4b8>
      break;
 800ccc2:	bf00      	nop
 800ccc4:	e004      	b.n	800ccd0 <USBH_Process+0x4b8>
      break;
 800ccc6:	bf00      	nop
 800ccc8:	e002      	b.n	800ccd0 <USBH_Process+0x4b8>
    break;
 800ccca:	bf00      	nop
 800cccc:	e000      	b.n	800ccd0 <USBH_Process+0x4b8>
      break;
 800ccce:	bf00      	nop
  }
  return USBH_OK;
 800ccd0:	2300      	movs	r3, #0
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3710      	adds	r7, #16
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}
 800ccda:	bf00      	nop

0800ccdc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b088      	sub	sp, #32
 800cce0:	af04      	add	r7, sp, #16
 800cce2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800cce4:	2301      	movs	r3, #1
 800cce6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800cce8:	2301      	movs	r3, #1
 800ccea:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	785b      	ldrb	r3, [r3, #1]
 800ccf0:	2b07      	cmp	r3, #7
 800ccf2:	f200 8208 	bhi.w	800d106 <USBH_HandleEnum+0x42a>
 800ccf6:	a201      	add	r2, pc, #4	; (adr r2, 800ccfc <USBH_HandleEnum+0x20>)
 800ccf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccfc:	0800cd1d 	.word	0x0800cd1d
 800cd00:	0800cddb 	.word	0x0800cddb
 800cd04:	0800ce45 	.word	0x0800ce45
 800cd08:	0800ced3 	.word	0x0800ced3
 800cd0c:	0800cf3d 	.word	0x0800cf3d
 800cd10:	0800cfad 	.word	0x0800cfad
 800cd14:	0800d049 	.word	0x0800d049
 800cd18:	0800d0c7 	.word	0x0800d0c7
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800cd1c:	2108      	movs	r1, #8
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f000 faec 	bl	800d2fc <USBH_Get_DevDesc>
 800cd24:	4603      	mov	r3, r0
 800cd26:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cd28:	7bbb      	ldrb	r3, [r7, #14]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d130      	bne.n	800cd90 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2201      	movs	r2, #1
 800cd3c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	7919      	ldrb	r1, [r3, #4]
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cd4e:	687a      	ldr	r2, [r7, #4]
 800cd50:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cd52:	b292      	uxth	r2, r2
 800cd54:	9202      	str	r2, [sp, #8]
 800cd56:	2200      	movs	r2, #0
 800cd58:	9201      	str	r2, [sp, #4]
 800cd5a:	9300      	str	r3, [sp, #0]
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	2280      	movs	r2, #128	; 0x80
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f001 f905 	bl	800df70 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	7959      	ldrb	r1, [r3, #5]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cd76:	687a      	ldr	r2, [r7, #4]
 800cd78:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cd7a:	b292      	uxth	r2, r2
 800cd7c:	9202      	str	r2, [sp, #8]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	9201      	str	r2, [sp, #4]
 800cd82:	9300      	str	r3, [sp, #0]
 800cd84:	4603      	mov	r3, r0
 800cd86:	2200      	movs	r2, #0
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f001 f8f1 	bl	800df70 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800cd8e:	e1bc      	b.n	800d10a <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cd90:	7bbb      	ldrb	r3, [r7, #14]
 800cd92:	2b03      	cmp	r3, #3
 800cd94:	f040 81b9 	bne.w	800d10a <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cd9e:	3301      	adds	r3, #1
 800cda0:	b2da      	uxtb	r2, r3
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cdae:	2b03      	cmp	r3, #3
 800cdb0:	d903      	bls.n	800cdba <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	220d      	movs	r2, #13
 800cdb6:	701a      	strb	r2, [r3, #0]
      break;
 800cdb8:	e1a7      	b.n	800d10a <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	795b      	ldrb	r3, [r3, #5]
 800cdbe:	4619      	mov	r1, r3
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f001 f925 	bl	800e010 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	791b      	ldrb	r3, [r3, #4]
 800cdca:	4619      	mov	r1, r3
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f001 f91f 	bl	800e010 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	701a      	strb	r2, [r3, #0]
      break;
 800cdd8:	e197      	b.n	800d10a <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800cdda:	2112      	movs	r1, #18
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f000 fa8d 	bl	800d2fc <USBH_Get_DevDesc>
 800cde2:	4603      	mov	r3, r0
 800cde4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cde6:	7bbb      	ldrb	r3, [r7, #14]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d103      	bne.n	800cdf4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2202      	movs	r2, #2
 800cdf0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cdf2:	e18c      	b.n	800d10e <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cdf4:	7bbb      	ldrb	r3, [r7, #14]
 800cdf6:	2b03      	cmp	r3, #3
 800cdf8:	f040 8189 	bne.w	800d10e <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ce02:	3301      	adds	r3, #1
 800ce04:	b2da      	uxtb	r2, r3
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ce12:	2b03      	cmp	r3, #3
 800ce14:	d903      	bls.n	800ce1e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	220d      	movs	r2, #13
 800ce1a:	701a      	strb	r2, [r3, #0]
      break;
 800ce1c:	e177      	b.n	800d10e <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	795b      	ldrb	r3, [r3, #5]
 800ce22:	4619      	mov	r1, r3
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f001 f8f3 	bl	800e010 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	791b      	ldrb	r3, [r3, #4]
 800ce2e:	4619      	mov	r1, r3
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f001 f8ed 	bl	800e010 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	701a      	strb	r2, [r3, #0]
      break;
 800ce42:	e164      	b.n	800d10e <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ce44:	2101      	movs	r1, #1
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f000 fb04 	bl	800d454 <USBH_SetAddress>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ce50:	7bbb      	ldrb	r3, [r7, #14]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d132      	bne.n	800cebc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800ce56:	2002      	movs	r0, #2
 800ce58:	f004 ff5f 	bl	8011d1a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2201      	movs	r2, #1
 800ce60:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2203      	movs	r2, #3
 800ce68:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	7919      	ldrb	r1, [r3, #4]
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ce7a:	687a      	ldr	r2, [r7, #4]
 800ce7c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ce7e:	b292      	uxth	r2, r2
 800ce80:	9202      	str	r2, [sp, #8]
 800ce82:	2200      	movs	r2, #0
 800ce84:	9201      	str	r2, [sp, #4]
 800ce86:	9300      	str	r3, [sp, #0]
 800ce88:	4603      	mov	r3, r0
 800ce8a:	2280      	movs	r2, #128	; 0x80
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f001 f86f 	bl	800df70 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	7959      	ldrb	r1, [r3, #5]
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800cea2:	687a      	ldr	r2, [r7, #4]
 800cea4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cea6:	b292      	uxth	r2, r2
 800cea8:	9202      	str	r2, [sp, #8]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	9201      	str	r2, [sp, #4]
 800ceae:	9300      	str	r3, [sp, #0]
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	6878      	ldr	r0, [r7, #4]
 800ceb6:	f001 f85b 	bl	800df70 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ceba:	e12a      	b.n	800d112 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cebc:	7bbb      	ldrb	r3, [r7, #14]
 800cebe:	2b03      	cmp	r3, #3
 800cec0:	f040 8127 	bne.w	800d112 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	220d      	movs	r2, #13
 800cec8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2200      	movs	r2, #0
 800cece:	705a      	strb	r2, [r3, #1]
      break;
 800ced0:	e11f      	b.n	800d112 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ced2:	2109      	movs	r1, #9
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f000 fa39 	bl	800d34c <USBH_Get_CfgDesc>
 800ceda:	4603      	mov	r3, r0
 800cedc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cede:	7bbb      	ldrb	r3, [r7, #14]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d103      	bne.n	800ceec <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2204      	movs	r2, #4
 800cee8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ceea:	e114      	b.n	800d116 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ceec:	7bbb      	ldrb	r3, [r7, #14]
 800ceee:	2b03      	cmp	r3, #3
 800cef0:	f040 8111 	bne.w	800d116 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cefa:	3301      	adds	r3, #1
 800cefc:	b2da      	uxtb	r2, r3
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cf0a:	2b03      	cmp	r3, #3
 800cf0c:	d903      	bls.n	800cf16 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	220d      	movs	r2, #13
 800cf12:	701a      	strb	r2, [r3, #0]
      break;
 800cf14:	e0ff      	b.n	800d116 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	795b      	ldrb	r3, [r3, #5]
 800cf1a:	4619      	mov	r1, r3
 800cf1c:	6878      	ldr	r0, [r7, #4]
 800cf1e:	f001 f877 	bl	800e010 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	791b      	ldrb	r3, [r3, #4]
 800cf26:	4619      	mov	r1, r3
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f001 f871 	bl	800e010 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2200      	movs	r2, #0
 800cf32:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2200      	movs	r2, #0
 800cf38:	701a      	strb	r2, [r3, #0]
      break;
 800cf3a:	e0ec      	b.n	800d116 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800cf42:	4619      	mov	r1, r3
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f000 fa01 	bl	800d34c <USBH_Get_CfgDesc>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cf4e:	7bbb      	ldrb	r3, [r7, #14]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d103      	bne.n	800cf5c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2205      	movs	r2, #5
 800cf58:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cf5a:	e0de      	b.n	800d11a <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cf5c:	7bbb      	ldrb	r3, [r7, #14]
 800cf5e:	2b03      	cmp	r3, #3
 800cf60:	f040 80db 	bne.w	800d11a <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cf6a:	3301      	adds	r3, #1
 800cf6c:	b2da      	uxtb	r2, r3
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cf7a:	2b03      	cmp	r3, #3
 800cf7c:	d903      	bls.n	800cf86 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	220d      	movs	r2, #13
 800cf82:	701a      	strb	r2, [r3, #0]
      break;
 800cf84:	e0c9      	b.n	800d11a <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	795b      	ldrb	r3, [r3, #5]
 800cf8a:	4619      	mov	r1, r3
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f001 f83f 	bl	800e010 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	791b      	ldrb	r3, [r3, #4]
 800cf96:	4619      	mov	r1, r3
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f001 f839 	bl	800e010 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	701a      	strb	r2, [r3, #0]
      break;
 800cfaa:	e0b6      	b.n	800d11a <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d036      	beq.n	800d024 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cfc2:	23ff      	movs	r3, #255	; 0xff
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f000 f9e5 	bl	800d394 <USBH_Get_StringDesc>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cfce:	7bbb      	ldrb	r3, [r7, #14]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d111      	bne.n	800cff8 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2206      	movs	r2, #6
 800cfd8:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2205      	movs	r2, #5
 800cfde:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cfee:	2300      	movs	r3, #0
 800cff0:	2200      	movs	r2, #0
 800cff2:	f001 fb63 	bl	800e6bc <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800cff6:	e092      	b.n	800d11e <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cff8:	7bbb      	ldrb	r3, [r7, #14]
 800cffa:	2b03      	cmp	r3, #3
 800cffc:	f040 808f 	bne.w	800d11e <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2206      	movs	r2, #6
 800d004:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2205      	movs	r2, #5
 800d00a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d01a:	2300      	movs	r3, #0
 800d01c:	2200      	movs	r2, #0
 800d01e:	f001 fb4d 	bl	800e6bc <osMessageQueuePut>
      break;
 800d022:	e07c      	b.n	800d11e <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2206      	movs	r2, #6
 800d028:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	2205      	movs	r2, #5
 800d02e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d03e:	2300      	movs	r3, #0
 800d040:	2200      	movs	r2, #0
 800d042:	f001 fb3b 	bl	800e6bc <osMessageQueuePut>
      break;
 800d046:	e06a      	b.n	800d11e <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d027      	beq.n	800d0a2 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d05e:	23ff      	movs	r3, #255	; 0xff
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f000 f997 	bl	800d394 <USBH_Get_StringDesc>
 800d066:	4603      	mov	r3, r0
 800d068:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d06a:	7bbb      	ldrb	r3, [r7, #14]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d103      	bne.n	800d078 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2207      	movs	r2, #7
 800d074:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d076:	e054      	b.n	800d122 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d078:	7bbb      	ldrb	r3, [r7, #14]
 800d07a:	2b03      	cmp	r3, #3
 800d07c:	d151      	bne.n	800d122 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2207      	movs	r2, #7
 800d082:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2205      	movs	r2, #5
 800d088:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d098:	2300      	movs	r3, #0
 800d09a:	2200      	movs	r2, #0
 800d09c:	f001 fb0e 	bl	800e6bc <osMessageQueuePut>
      break;
 800d0a0:	e03f      	b.n	800d122 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2207      	movs	r2, #7
 800d0a6:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2205      	movs	r2, #5
 800d0ac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d0bc:	2300      	movs	r3, #0
 800d0be:	2200      	movs	r2, #0
 800d0c0:	f001 fafc 	bl	800e6bc <osMessageQueuePut>
      break;
 800d0c4:	e02d      	b.n	800d122 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d017      	beq.n	800d100 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d0dc:	23ff      	movs	r3, #255	; 0xff
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f000 f958 	bl	800d394 <USBH_Get_StringDesc>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d0e8:	7bbb      	ldrb	r3, [r7, #14]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d102      	bne.n	800d0f4 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d0f2:	e018      	b.n	800d126 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d0f4:	7bbb      	ldrb	r3, [r7, #14]
 800d0f6:	2b03      	cmp	r3, #3
 800d0f8:	d115      	bne.n	800d126 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	73fb      	strb	r3, [r7, #15]
      break;
 800d0fe:	e012      	b.n	800d126 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800d100:	2300      	movs	r3, #0
 800d102:	73fb      	strb	r3, [r7, #15]
      break;
 800d104:	e00f      	b.n	800d126 <USBH_HandleEnum+0x44a>

    default:
      break;
 800d106:	bf00      	nop
 800d108:	e00e      	b.n	800d128 <USBH_HandleEnum+0x44c>
      break;
 800d10a:	bf00      	nop
 800d10c:	e00c      	b.n	800d128 <USBH_HandleEnum+0x44c>
      break;
 800d10e:	bf00      	nop
 800d110:	e00a      	b.n	800d128 <USBH_HandleEnum+0x44c>
      break;
 800d112:	bf00      	nop
 800d114:	e008      	b.n	800d128 <USBH_HandleEnum+0x44c>
      break;
 800d116:	bf00      	nop
 800d118:	e006      	b.n	800d128 <USBH_HandleEnum+0x44c>
      break;
 800d11a:	bf00      	nop
 800d11c:	e004      	b.n	800d128 <USBH_HandleEnum+0x44c>
      break;
 800d11e:	bf00      	nop
 800d120:	e002      	b.n	800d128 <USBH_HandleEnum+0x44c>
      break;
 800d122:	bf00      	nop
 800d124:	e000      	b.n	800d128 <USBH_HandleEnum+0x44c>
      break;
 800d126:	bf00      	nop
  }
  return Status;
 800d128:	7bfb      	ldrb	r3, [r7, #15]
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3710      	adds	r7, #16
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}
 800d132:	bf00      	nop

0800d134 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d134:	b480      	push	{r7}
 800d136:	b083      	sub	sp, #12
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
 800d13c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	683a      	ldr	r2, [r7, #0]
 800d142:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800d146:	bf00      	nop
 800d148:	370c      	adds	r7, #12
 800d14a:	46bd      	mov	sp, r7
 800d14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d150:	4770      	bx	lr

0800d152 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d152:	b580      	push	{r7, lr}
 800d154:	b082      	sub	sp, #8
 800d156:	af00      	add	r7, sp, #0
 800d158:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d160:	1c5a      	adds	r2, r3, #1
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	f000 f804 	bl	800d176 <USBH_HandleSof>
}
 800d16e:	bf00      	nop
 800d170:	3708      	adds	r7, #8
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}

0800d176 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d176:	b580      	push	{r7, lr}
 800d178:	b082      	sub	sp, #8
 800d17a:	af00      	add	r7, sp, #0
 800d17c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	781b      	ldrb	r3, [r3, #0]
 800d182:	b2db      	uxtb	r3, r3
 800d184:	2b0b      	cmp	r3, #11
 800d186:	d10a      	bne.n	800d19e <USBH_HandleSof+0x28>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d005      	beq.n	800d19e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d198:	699b      	ldr	r3, [r3, #24]
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	4798      	blx	r3
  }
}
 800d19e:	bf00      	nop
 800d1a0:	3708      	adds	r7, #8
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}

0800d1a6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d1a6:	b580      	push	{r7, lr}
 800d1a8:	b082      	sub	sp, #8
 800d1aa:	af00      	add	r7, sp, #0
 800d1ac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2201      	movs	r2, #1
 800d1b2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2201      	movs	r2, #1
 800d1ba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	f001 fa75 	bl	800e6bc <osMessageQueuePut>
#endif
#endif

  return;
 800d1d2:	bf00      	nop
}
 800d1d4:	3708      	adds	r7, #8
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}

0800d1da <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d1da:	b480      	push	{r7}
 800d1dc:	b083      	sub	sp, #12
 800d1de:	af00      	add	r7, sp, #0
 800d1e0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800d1ea:	bf00      	nop
}
 800d1ec:	370c      	adds	r7, #12
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f4:	4770      	bx	lr

0800d1f6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d1f6:	b580      	push	{r7, lr}
 800d1f8:	b082      	sub	sp, #8
 800d1fa:	af00      	add	r7, sp, #0
 800d1fc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2201      	movs	r2, #1
 800d202:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2200      	movs	r2, #0
 800d20a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2200      	movs	r2, #0
 800d212:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2201      	movs	r2, #1
 800d21a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d22a:	2300      	movs	r3, #0
 800d22c:	2200      	movs	r2, #0
 800d22e:	f001 fa45 	bl	800e6bc <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800d232:	2300      	movs	r3, #0
}
 800d234:	4618      	mov	r0, r3
 800d236:	3708      	adds	r7, #8
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}

0800d23c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b082      	sub	sp, #8
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2201      	movs	r2, #1
 800d248:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2200      	movs	r2, #0
 800d250:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2200      	movs	r2, #0
 800d258:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f004 fc12 	bl	8011a86 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	791b      	ldrb	r3, [r3, #4]
 800d266:	4619      	mov	r1, r3
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f000 fed1 	bl	800e010 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	795b      	ldrb	r3, [r3, #5]
 800d272:	4619      	mov	r1, r3
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f000 fecb 	bl	800e010 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	2201      	movs	r2, #1
 800d27e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d28e:	2300      	movs	r3, #0
 800d290:	2200      	movs	r2, #0
 800d292:	f001 fa13 	bl	800e6bc <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800d296:	2300      	movs	r3, #0
}
 800d298:	4618      	mov	r0, r3
 800d29a:	3708      	adds	r7, #8
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}

0800d2a0 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b084      	sub	sp, #16
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d2b4:	f04f 33ff 	mov.w	r3, #4294967295
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	f001 fa73 	bl	800e7a4 <osMessageQueueGet>
 800d2be:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d1f0      	bne.n	800d2a8 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f7ff faa6 	bl	800c818 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d2cc:	e7ec      	b.n	800d2a8 <USBH_Process_OS+0x8>

0800d2ce <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800d2ce:	b580      	push	{r7, lr}
 800d2d0:	b082      	sub	sp, #8
 800d2d2:	af00      	add	r7, sp, #0
 800d2d4:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2201      	movs	r2, #1
 800d2da:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	f001 f9e5 	bl	800e6bc <osMessageQueuePut>
#endif

  return USBH_OK;
 800d2f2:	2300      	movs	r3, #0
}
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	3708      	adds	r7, #8
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}

0800d2fc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b086      	sub	sp, #24
 800d300:	af02      	add	r7, sp, #8
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	460b      	mov	r3, r1
 800d306:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d30e:	78fb      	ldrb	r3, [r7, #3]
 800d310:	b29b      	uxth	r3, r3
 800d312:	9300      	str	r3, [sp, #0]
 800d314:	4613      	mov	r3, r2
 800d316:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d31a:	2100      	movs	r1, #0
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f000 f864 	bl	800d3ea <USBH_GetDescriptor>
 800d322:	4603      	mov	r3, r0
 800d324:	73fb      	strb	r3, [r7, #15]
 800d326:	7bfb      	ldrb	r3, [r7, #15]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d10a      	bne.n	800d342 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d338:	78fa      	ldrb	r2, [r7, #3]
 800d33a:	b292      	uxth	r2, r2
 800d33c:	4619      	mov	r1, r3
 800d33e:	f000 f918 	bl	800d572 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800d342:	7bfb      	ldrb	r3, [r7, #15]
}
 800d344:	4618      	mov	r0, r3
 800d346:	3710      	adds	r7, #16
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}

0800d34c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b086      	sub	sp, #24
 800d350:	af02      	add	r7, sp, #8
 800d352:	6078      	str	r0, [r7, #4]
 800d354:	460b      	mov	r3, r1
 800d356:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	331c      	adds	r3, #28
 800d35c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d35e:	887b      	ldrh	r3, [r7, #2]
 800d360:	9300      	str	r3, [sp, #0]
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d368:	2100      	movs	r1, #0
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f000 f83d 	bl	800d3ea <USBH_GetDescriptor>
 800d370:	4603      	mov	r3, r0
 800d372:	72fb      	strb	r3, [r7, #11]
 800d374:	7afb      	ldrb	r3, [r7, #11]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d107      	bne.n	800d38a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d380:	887a      	ldrh	r2, [r7, #2]
 800d382:	68f9      	ldr	r1, [r7, #12]
 800d384:	4618      	mov	r0, r3
 800d386:	f000 f964 	bl	800d652 <USBH_ParseCfgDesc>
  }

  return status;
 800d38a:	7afb      	ldrb	r3, [r7, #11]
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3710      	adds	r7, #16
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}

0800d394 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b088      	sub	sp, #32
 800d398:	af02      	add	r7, sp, #8
 800d39a:	60f8      	str	r0, [r7, #12]
 800d39c:	607a      	str	r2, [r7, #4]
 800d39e:	461a      	mov	r2, r3
 800d3a0:	460b      	mov	r3, r1
 800d3a2:	72fb      	strb	r3, [r7, #11]
 800d3a4:	4613      	mov	r3, r2
 800d3a6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800d3a8:	7afb      	ldrb	r3, [r7, #11]
 800d3aa:	b29b      	uxth	r3, r3
 800d3ac:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800d3b0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d3b8:	893b      	ldrh	r3, [r7, #8]
 800d3ba:	9300      	str	r3, [sp, #0]
 800d3bc:	460b      	mov	r3, r1
 800d3be:	2100      	movs	r1, #0
 800d3c0:	68f8      	ldr	r0, [r7, #12]
 800d3c2:	f000 f812 	bl	800d3ea <USBH_GetDescriptor>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	75fb      	strb	r3, [r7, #23]
 800d3ca:	7dfb      	ldrb	r3, [r7, #23]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d107      	bne.n	800d3e0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d3d6:	893a      	ldrh	r2, [r7, #8]
 800d3d8:	6879      	ldr	r1, [r7, #4]
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f000 fa37 	bl	800d84e <USBH_ParseStringDesc>
  }

  return status;
 800d3e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	3718      	adds	r7, #24
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}

0800d3ea <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800d3ea:	b580      	push	{r7, lr}
 800d3ec:	b084      	sub	sp, #16
 800d3ee:	af00      	add	r7, sp, #0
 800d3f0:	60f8      	str	r0, [r7, #12]
 800d3f2:	607b      	str	r3, [r7, #4]
 800d3f4:	460b      	mov	r3, r1
 800d3f6:	72fb      	strb	r3, [r7, #11]
 800d3f8:	4613      	mov	r3, r2
 800d3fa:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	789b      	ldrb	r3, [r3, #2]
 800d400:	2b01      	cmp	r3, #1
 800d402:	d11c      	bne.n	800d43e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d404:	7afb      	ldrb	r3, [r7, #11]
 800d406:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d40a:	b2da      	uxtb	r2, r3
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	2206      	movs	r2, #6
 800d414:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	893a      	ldrh	r2, [r7, #8]
 800d41a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d41c:	893b      	ldrh	r3, [r7, #8]
 800d41e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d422:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d426:	d104      	bne.n	800d432 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	f240 4209 	movw	r2, #1033	; 0x409
 800d42e:	829a      	strh	r2, [r3, #20]
 800d430:	e002      	b.n	800d438 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	2200      	movs	r2, #0
 800d436:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	8b3a      	ldrh	r2, [r7, #24]
 800d43c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d43e:	8b3b      	ldrh	r3, [r7, #24]
 800d440:	461a      	mov	r2, r3
 800d442:	6879      	ldr	r1, [r7, #4]
 800d444:	68f8      	ldr	r0, [r7, #12]
 800d446:	f000 fa50 	bl	800d8ea <USBH_CtlReq>
 800d44a:	4603      	mov	r3, r0
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	3710      	adds	r7, #16
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}

0800d454 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b082      	sub	sp, #8
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
 800d45c:	460b      	mov	r3, r1
 800d45e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	789b      	ldrb	r3, [r3, #2]
 800d464:	2b01      	cmp	r3, #1
 800d466:	d10f      	bne.n	800d488 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2200      	movs	r2, #0
 800d46c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2205      	movs	r2, #5
 800d472:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d474:	78fb      	ldrb	r3, [r7, #3]
 800d476:	b29a      	uxth	r2, r3
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2200      	movs	r2, #0
 800d480:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2200      	movs	r2, #0
 800d486:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d488:	2200      	movs	r2, #0
 800d48a:	2100      	movs	r1, #0
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f000 fa2c 	bl	800d8ea <USBH_CtlReq>
 800d492:	4603      	mov	r3, r0
}
 800d494:	4618      	mov	r0, r3
 800d496:	3708      	adds	r7, #8
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}

0800d49c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b082      	sub	sp, #8
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
 800d4a4:	460b      	mov	r3, r1
 800d4a6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	789b      	ldrb	r3, [r3, #2]
 800d4ac:	2b01      	cmp	r3, #1
 800d4ae:	d10e      	bne.n	800d4ce <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2209      	movs	r2, #9
 800d4ba:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	887a      	ldrh	r2, [r7, #2]
 800d4c0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	2100      	movs	r1, #0
 800d4d2:	6878      	ldr	r0, [r7, #4]
 800d4d4:	f000 fa09 	bl	800d8ea <USBH_CtlReq>
 800d4d8:	4603      	mov	r3, r0
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3708      	adds	r7, #8
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}

0800d4e2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d4e2:	b580      	push	{r7, lr}
 800d4e4:	b082      	sub	sp, #8
 800d4e6:	af00      	add	r7, sp, #0
 800d4e8:	6078      	str	r0, [r7, #4]
 800d4ea:	460b      	mov	r3, r1
 800d4ec:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	789b      	ldrb	r3, [r3, #2]
 800d4f2:	2b01      	cmp	r3, #1
 800d4f4:	d10f      	bne.n	800d516 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2203      	movs	r2, #3
 800d500:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d502:	78fb      	ldrb	r3, [r7, #3]
 800d504:	b29a      	uxth	r2, r3
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2200      	movs	r2, #0
 800d50e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2200      	movs	r2, #0
 800d514:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d516:	2200      	movs	r2, #0
 800d518:	2100      	movs	r1, #0
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f000 f9e5 	bl	800d8ea <USBH_CtlReq>
 800d520:	4603      	mov	r3, r0
}
 800d522:	4618      	mov	r0, r3
 800d524:	3708      	adds	r7, #8
 800d526:	46bd      	mov	sp, r7
 800d528:	bd80      	pop	{r7, pc}

0800d52a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d52a:	b580      	push	{r7, lr}
 800d52c:	b082      	sub	sp, #8
 800d52e:	af00      	add	r7, sp, #0
 800d530:	6078      	str	r0, [r7, #4]
 800d532:	460b      	mov	r3, r1
 800d534:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	789b      	ldrb	r3, [r3, #2]
 800d53a:	2b01      	cmp	r3, #1
 800d53c:	d10f      	bne.n	800d55e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2202      	movs	r2, #2
 800d542:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2201      	movs	r2, #1
 800d548:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2200      	movs	r2, #0
 800d54e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d550:	78fb      	ldrb	r3, [r7, #3]
 800d552:	b29a      	uxth	r2, r3
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2200      	movs	r2, #0
 800d55c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800d55e:	2200      	movs	r2, #0
 800d560:	2100      	movs	r1, #0
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f000 f9c1 	bl	800d8ea <USBH_CtlReq>
 800d568:	4603      	mov	r3, r0
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	3708      	adds	r7, #8
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}

0800d572 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800d572:	b480      	push	{r7}
 800d574:	b085      	sub	sp, #20
 800d576:	af00      	add	r7, sp, #0
 800d578:	60f8      	str	r0, [r7, #12]
 800d57a:	60b9      	str	r1, [r7, #8]
 800d57c:	4613      	mov	r3, r2
 800d57e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	781a      	ldrb	r2, [r3, #0]
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	785a      	ldrb	r2, [r3, #1]
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	3302      	adds	r3, #2
 800d594:	781b      	ldrb	r3, [r3, #0]
 800d596:	b29a      	uxth	r2, r3
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	3303      	adds	r3, #3
 800d59c:	781b      	ldrb	r3, [r3, #0]
 800d59e:	b29b      	uxth	r3, r3
 800d5a0:	021b      	lsls	r3, r3, #8
 800d5a2:	b29b      	uxth	r3, r3
 800d5a4:	4313      	orrs	r3, r2
 800d5a6:	b29a      	uxth	r2, r3
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800d5ac:	68bb      	ldr	r3, [r7, #8]
 800d5ae:	791a      	ldrb	r2, [r3, #4]
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	795a      	ldrb	r2, [r3, #5]
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	799a      	ldrb	r2, [r3, #6]
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	79da      	ldrb	r2, [r3, #7]
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800d5cc:	88fb      	ldrh	r3, [r7, #6]
 800d5ce:	2b08      	cmp	r3, #8
 800d5d0:	d939      	bls.n	800d646 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	3308      	adds	r3, #8
 800d5d6:	781b      	ldrb	r3, [r3, #0]
 800d5d8:	b29a      	uxth	r2, r3
 800d5da:	68bb      	ldr	r3, [r7, #8]
 800d5dc:	3309      	adds	r3, #9
 800d5de:	781b      	ldrb	r3, [r3, #0]
 800d5e0:	b29b      	uxth	r3, r3
 800d5e2:	021b      	lsls	r3, r3, #8
 800d5e4:	b29b      	uxth	r3, r3
 800d5e6:	4313      	orrs	r3, r2
 800d5e8:	b29a      	uxth	r2, r3
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	330a      	adds	r3, #10
 800d5f2:	781b      	ldrb	r3, [r3, #0]
 800d5f4:	b29a      	uxth	r2, r3
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	330b      	adds	r3, #11
 800d5fa:	781b      	ldrb	r3, [r3, #0]
 800d5fc:	b29b      	uxth	r3, r3
 800d5fe:	021b      	lsls	r3, r3, #8
 800d600:	b29b      	uxth	r3, r3
 800d602:	4313      	orrs	r3, r2
 800d604:	b29a      	uxth	r2, r3
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	330c      	adds	r3, #12
 800d60e:	781b      	ldrb	r3, [r3, #0]
 800d610:	b29a      	uxth	r2, r3
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	330d      	adds	r3, #13
 800d616:	781b      	ldrb	r3, [r3, #0]
 800d618:	b29b      	uxth	r3, r3
 800d61a:	021b      	lsls	r3, r3, #8
 800d61c:	b29b      	uxth	r3, r3
 800d61e:	4313      	orrs	r3, r2
 800d620:	b29a      	uxth	r2, r3
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	7b9a      	ldrb	r2, [r3, #14]
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	7bda      	ldrb	r2, [r3, #15]
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	7c1a      	ldrb	r2, [r3, #16]
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	7c5a      	ldrb	r2, [r3, #17]
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	745a      	strb	r2, [r3, #17]
  }
}
 800d646:	bf00      	nop
 800d648:	3714      	adds	r7, #20
 800d64a:	46bd      	mov	sp, r7
 800d64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d650:	4770      	bx	lr

0800d652 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800d652:	b580      	push	{r7, lr}
 800d654:	b08a      	sub	sp, #40	; 0x28
 800d656:	af00      	add	r7, sp, #0
 800d658:	60f8      	str	r0, [r7, #12]
 800d65a:	60b9      	str	r1, [r7, #8]
 800d65c:	4613      	mov	r3, r2
 800d65e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d664:	2300      	movs	r3, #0
 800d666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800d66a:	2300      	movs	r3, #0
 800d66c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800d674:	68bb      	ldr	r3, [r7, #8]
 800d676:	781a      	ldrb	r2, [r3, #0]
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	785a      	ldrb	r2, [r3, #1]
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	3302      	adds	r3, #2
 800d688:	781b      	ldrb	r3, [r3, #0]
 800d68a:	b29a      	uxth	r2, r3
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	3303      	adds	r3, #3
 800d690:	781b      	ldrb	r3, [r3, #0]
 800d692:	b29b      	uxth	r3, r3
 800d694:	021b      	lsls	r3, r3, #8
 800d696:	b29b      	uxth	r3, r3
 800d698:	4313      	orrs	r3, r2
 800d69a:	b29a      	uxth	r2, r3
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	791a      	ldrb	r2, [r3, #4]
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	795a      	ldrb	r2, [r3, #5]
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	799a      	ldrb	r2, [r3, #6]
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	79da      	ldrb	r2, [r3, #7]
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	7a1a      	ldrb	r2, [r3, #8]
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d6c8:	88fb      	ldrh	r3, [r7, #6]
 800d6ca:	2b09      	cmp	r3, #9
 800d6cc:	d95f      	bls.n	800d78e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800d6ce:	2309      	movs	r3, #9
 800d6d0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d6d6:	e051      	b.n	800d77c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d6d8:	f107 0316 	add.w	r3, r7, #22
 800d6dc:	4619      	mov	r1, r3
 800d6de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d6e0:	f000 f8e8 	bl	800d8b4 <USBH_GetNextDesc>
 800d6e4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800d6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e8:	785b      	ldrb	r3, [r3, #1]
 800d6ea:	2b04      	cmp	r3, #4
 800d6ec:	d146      	bne.n	800d77c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800d6ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d6f2:	221a      	movs	r2, #26
 800d6f4:	fb02 f303 	mul.w	r3, r2, r3
 800d6f8:	3308      	adds	r3, #8
 800d6fa:	68fa      	ldr	r2, [r7, #12]
 800d6fc:	4413      	add	r3, r2
 800d6fe:	3302      	adds	r3, #2
 800d700:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d702:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d704:	69f8      	ldr	r0, [r7, #28]
 800d706:	f000 f846 	bl	800d796 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d70a:	2300      	movs	r3, #0
 800d70c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800d710:	2300      	movs	r3, #0
 800d712:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d714:	e022      	b.n	800d75c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d716:	f107 0316 	add.w	r3, r7, #22
 800d71a:	4619      	mov	r1, r3
 800d71c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d71e:	f000 f8c9 	bl	800d8b4 <USBH_GetNextDesc>
 800d722:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800d724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d726:	785b      	ldrb	r3, [r3, #1]
 800d728:	2b05      	cmp	r3, #5
 800d72a:	d117      	bne.n	800d75c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d72c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d730:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d734:	3201      	adds	r2, #1
 800d736:	00d2      	lsls	r2, r2, #3
 800d738:	211a      	movs	r1, #26
 800d73a:	fb01 f303 	mul.w	r3, r1, r3
 800d73e:	4413      	add	r3, r2
 800d740:	3308      	adds	r3, #8
 800d742:	68fa      	ldr	r2, [r7, #12]
 800d744:	4413      	add	r3, r2
 800d746:	3304      	adds	r3, #4
 800d748:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800d74a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d74c:	69b8      	ldr	r0, [r7, #24]
 800d74e:	f000 f851 	bl	800d7f4 <USBH_ParseEPDesc>
            ep_ix++;
 800d752:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d756:	3301      	adds	r3, #1
 800d758:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d75c:	69fb      	ldr	r3, [r7, #28]
 800d75e:	791b      	ldrb	r3, [r3, #4]
 800d760:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d764:	429a      	cmp	r2, r3
 800d766:	d204      	bcs.n	800d772 <USBH_ParseCfgDesc+0x120>
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	885a      	ldrh	r2, [r3, #2]
 800d76c:	8afb      	ldrh	r3, [r7, #22]
 800d76e:	429a      	cmp	r2, r3
 800d770:	d8d1      	bhi.n	800d716 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800d772:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d776:	3301      	adds	r3, #1
 800d778:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d77c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d780:	2b01      	cmp	r3, #1
 800d782:	d804      	bhi.n	800d78e <USBH_ParseCfgDesc+0x13c>
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	885a      	ldrh	r2, [r3, #2]
 800d788:	8afb      	ldrh	r3, [r7, #22]
 800d78a:	429a      	cmp	r2, r3
 800d78c:	d8a4      	bhi.n	800d6d8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800d78e:	bf00      	nop
 800d790:	3728      	adds	r7, #40	; 0x28
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}

0800d796 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800d796:	b480      	push	{r7}
 800d798:	b083      	sub	sp, #12
 800d79a:	af00      	add	r7, sp, #0
 800d79c:	6078      	str	r0, [r7, #4]
 800d79e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	781a      	ldrb	r2, [r3, #0]
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	785a      	ldrb	r2, [r3, #1]
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	789a      	ldrb	r2, [r3, #2]
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	78da      	ldrb	r2, [r3, #3]
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	791a      	ldrb	r2, [r3, #4]
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	795a      	ldrb	r2, [r3, #5]
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	799a      	ldrb	r2, [r3, #6]
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	79da      	ldrb	r2, [r3, #7]
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	7a1a      	ldrb	r2, [r3, #8]
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	721a      	strb	r2, [r3, #8]
}
 800d7e8:	bf00      	nop
 800d7ea:	370c      	adds	r7, #12
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f2:	4770      	bx	lr

0800d7f4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b083      	sub	sp, #12
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
 800d7fc:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	781a      	ldrb	r2, [r3, #0]
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	785a      	ldrb	r2, [r3, #1]
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	789a      	ldrb	r2, [r3, #2]
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	78da      	ldrb	r2, [r3, #3]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	3304      	adds	r3, #4
 800d822:	781b      	ldrb	r3, [r3, #0]
 800d824:	b29a      	uxth	r2, r3
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	3305      	adds	r3, #5
 800d82a:	781b      	ldrb	r3, [r3, #0]
 800d82c:	b29b      	uxth	r3, r3
 800d82e:	021b      	lsls	r3, r3, #8
 800d830:	b29b      	uxth	r3, r3
 800d832:	4313      	orrs	r3, r2
 800d834:	b29a      	uxth	r2, r3
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	799a      	ldrb	r2, [r3, #6]
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	719a      	strb	r2, [r3, #6]
}
 800d842:	bf00      	nop
 800d844:	370c      	adds	r7, #12
 800d846:	46bd      	mov	sp, r7
 800d848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84c:	4770      	bx	lr

0800d84e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d84e:	b480      	push	{r7}
 800d850:	b087      	sub	sp, #28
 800d852:	af00      	add	r7, sp, #0
 800d854:	60f8      	str	r0, [r7, #12]
 800d856:	60b9      	str	r1, [r7, #8]
 800d858:	4613      	mov	r3, r2
 800d85a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	3301      	adds	r3, #1
 800d860:	781b      	ldrb	r3, [r3, #0]
 800d862:	2b03      	cmp	r3, #3
 800d864:	d120      	bne.n	800d8a8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	781b      	ldrb	r3, [r3, #0]
 800d86a:	1e9a      	subs	r2, r3, #2
 800d86c:	88fb      	ldrh	r3, [r7, #6]
 800d86e:	4293      	cmp	r3, r2
 800d870:	bf28      	it	cs
 800d872:	4613      	movcs	r3, r2
 800d874:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	3302      	adds	r3, #2
 800d87a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d87c:	2300      	movs	r3, #0
 800d87e:	82fb      	strh	r3, [r7, #22]
 800d880:	e00b      	b.n	800d89a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d882:	8afb      	ldrh	r3, [r7, #22]
 800d884:	68fa      	ldr	r2, [r7, #12]
 800d886:	4413      	add	r3, r2
 800d888:	781a      	ldrb	r2, [r3, #0]
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	3301      	adds	r3, #1
 800d892:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d894:	8afb      	ldrh	r3, [r7, #22]
 800d896:	3302      	adds	r3, #2
 800d898:	82fb      	strh	r3, [r7, #22]
 800d89a:	8afa      	ldrh	r2, [r7, #22]
 800d89c:	8abb      	ldrh	r3, [r7, #20]
 800d89e:	429a      	cmp	r2, r3
 800d8a0:	d3ef      	bcc.n	800d882 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	701a      	strb	r2, [r3, #0]
  }
}
 800d8a8:	bf00      	nop
 800d8aa:	371c      	adds	r7, #28
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b2:	4770      	bx	lr

0800d8b4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	b085      	sub	sp, #20
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	881a      	ldrh	r2, [r3, #0]
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	781b      	ldrb	r3, [r3, #0]
 800d8c6:	b29b      	uxth	r3, r3
 800d8c8:	4413      	add	r3, r2
 800d8ca:	b29a      	uxth	r2, r3
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	781b      	ldrb	r3, [r3, #0]
 800d8d4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	4413      	add	r3, r2
 800d8da:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d8dc:	68fb      	ldr	r3, [r7, #12]
}
 800d8de:	4618      	mov	r0, r3
 800d8e0:	3714      	adds	r7, #20
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e8:	4770      	bx	lr

0800d8ea <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d8ea:	b580      	push	{r7, lr}
 800d8ec:	b086      	sub	sp, #24
 800d8ee:	af00      	add	r7, sp, #0
 800d8f0:	60f8      	str	r0, [r7, #12]
 800d8f2:	60b9      	str	r1, [r7, #8]
 800d8f4:	4613      	mov	r3, r2
 800d8f6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	789b      	ldrb	r3, [r3, #2]
 800d900:	2b01      	cmp	r3, #1
 800d902:	d002      	beq.n	800d90a <USBH_CtlReq+0x20>
 800d904:	2b02      	cmp	r3, #2
 800d906:	d01d      	beq.n	800d944 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800d908:	e043      	b.n	800d992 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	68ba      	ldr	r2, [r7, #8]
 800d90e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	88fa      	ldrh	r2, [r7, #6]
 800d914:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	2201      	movs	r2, #1
 800d91a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	2202      	movs	r2, #2
 800d920:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d922:	2301      	movs	r3, #1
 800d924:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	2203      	movs	r2, #3
 800d92a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d93a:	2300      	movs	r3, #0
 800d93c:	2200      	movs	r2, #0
 800d93e:	f000 febd 	bl	800e6bc <osMessageQueuePut>
      break;
 800d942:	e026      	b.n	800d992 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800d944:	68f8      	ldr	r0, [r7, #12]
 800d946:	f000 f829 	bl	800d99c <USBH_HandleControl>
 800d94a:	4603      	mov	r3, r0
 800d94c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d94e:	7dfb      	ldrb	r3, [r7, #23]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d002      	beq.n	800d95a <USBH_CtlReq+0x70>
 800d954:	7dfb      	ldrb	r3, [r7, #23]
 800d956:	2b03      	cmp	r3, #3
 800d958:	d106      	bne.n	800d968 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	2201      	movs	r2, #1
 800d95e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	2200      	movs	r2, #0
 800d964:	761a      	strb	r2, [r3, #24]
 800d966:	e005      	b.n	800d974 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800d968:	7dfb      	ldrb	r3, [r7, #23]
 800d96a:	2b02      	cmp	r3, #2
 800d96c:	d102      	bne.n	800d974 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	2201      	movs	r2, #1
 800d972:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	2203      	movs	r2, #3
 800d978:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d988:	2300      	movs	r3, #0
 800d98a:	2200      	movs	r2, #0
 800d98c:	f000 fe96 	bl	800e6bc <osMessageQueuePut>
      break;
 800d990:	bf00      	nop
  }
  return status;
 800d992:	7dfb      	ldrb	r3, [r7, #23]
}
 800d994:	4618      	mov	r0, r3
 800d996:	3718      	adds	r7, #24
 800d998:	46bd      	mov	sp, r7
 800d99a:	bd80      	pop	{r7, pc}

0800d99c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b086      	sub	sp, #24
 800d9a0:	af02      	add	r7, sp, #8
 800d9a2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	7e1b      	ldrb	r3, [r3, #24]
 800d9b0:	3b01      	subs	r3, #1
 800d9b2:	2b0a      	cmp	r3, #10
 800d9b4:	f200 822b 	bhi.w	800de0e <USBH_HandleControl+0x472>
 800d9b8:	a201      	add	r2, pc, #4	; (adr r2, 800d9c0 <USBH_HandleControl+0x24>)
 800d9ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9be:	bf00      	nop
 800d9c0:	0800d9ed 	.word	0x0800d9ed
 800d9c4:	0800da07 	.word	0x0800da07
 800d9c8:	0800daa9 	.word	0x0800daa9
 800d9cc:	0800dacf 	.word	0x0800dacf
 800d9d0:	0800db5b 	.word	0x0800db5b
 800d9d4:	0800db87 	.word	0x0800db87
 800d9d8:	0800dc49 	.word	0x0800dc49
 800d9dc:	0800dc6b 	.word	0x0800dc6b
 800d9e0:	0800dcfd 	.word	0x0800dcfd
 800d9e4:	0800dd25 	.word	0x0800dd25
 800d9e8:	0800ddb7 	.word	0x0800ddb7
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	f103 0110 	add.w	r1, r3, #16
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	795b      	ldrb	r3, [r3, #5]
 800d9f6:	461a      	mov	r2, r3
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f000 fa19 	bl	800de30 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2202      	movs	r2, #2
 800da02:	761a      	strb	r2, [r3, #24]
      break;
 800da04:	e20e      	b.n	800de24 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	795b      	ldrb	r3, [r3, #5]
 800da0a:	4619      	mov	r1, r3
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f004 f927 	bl	8011c60 <USBH_LL_GetURBState>
 800da12:	4603      	mov	r3, r0
 800da14:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800da16:	7bbb      	ldrb	r3, [r7, #14]
 800da18:	2b01      	cmp	r3, #1
 800da1a:	d12c      	bne.n	800da76 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	7c1b      	ldrb	r3, [r3, #16]
 800da20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800da24:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	8adb      	ldrh	r3, [r3, #22]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d00a      	beq.n	800da44 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800da2e:	7b7b      	ldrb	r3, [r7, #13]
 800da30:	2b80      	cmp	r3, #128	; 0x80
 800da32:	d103      	bne.n	800da3c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2203      	movs	r2, #3
 800da38:	761a      	strb	r2, [r3, #24]
 800da3a:	e00d      	b.n	800da58 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2205      	movs	r2, #5
 800da40:	761a      	strb	r2, [r3, #24]
 800da42:	e009      	b.n	800da58 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800da44:	7b7b      	ldrb	r3, [r7, #13]
 800da46:	2b80      	cmp	r3, #128	; 0x80
 800da48:	d103      	bne.n	800da52 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2209      	movs	r2, #9
 800da4e:	761a      	strb	r2, [r3, #24]
 800da50:	e002      	b.n	800da58 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	2207      	movs	r2, #7
 800da56:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2203      	movs	r2, #3
 800da5c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800da6c:	2300      	movs	r3, #0
 800da6e:	2200      	movs	r2, #0
 800da70:	f000 fe24 	bl	800e6bc <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800da74:	e1cd      	b.n	800de12 <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800da76:	7bbb      	ldrb	r3, [r7, #14]
 800da78:	2b04      	cmp	r3, #4
 800da7a:	d003      	beq.n	800da84 <USBH_HandleControl+0xe8>
 800da7c:	7bbb      	ldrb	r3, [r7, #14]
 800da7e:	2b02      	cmp	r3, #2
 800da80:	f040 81c7 	bne.w	800de12 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	220b      	movs	r2, #11
 800da88:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2203      	movs	r2, #3
 800da8e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800da9e:	2300      	movs	r3, #0
 800daa0:	2200      	movs	r2, #0
 800daa2:	f000 fe0b 	bl	800e6bc <osMessageQueuePut>
      break;
 800daa6:	e1b4      	b.n	800de12 <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800daae:	b29a      	uxth	r2, r3
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6899      	ldr	r1, [r3, #8]
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	899a      	ldrh	r2, [r3, #12]
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	791b      	ldrb	r3, [r3, #4]
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	f000 f9f4 	bl	800deae <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2204      	movs	r2, #4
 800daca:	761a      	strb	r2, [r3, #24]
      break;
 800dacc:	e1aa      	b.n	800de24 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	791b      	ldrb	r3, [r3, #4]
 800dad2:	4619      	mov	r1, r3
 800dad4:	6878      	ldr	r0, [r7, #4]
 800dad6:	f004 f8c3 	bl	8011c60 <USBH_LL_GetURBState>
 800dada:	4603      	mov	r3, r0
 800dadc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800dade:	7bbb      	ldrb	r3, [r7, #14]
 800dae0:	2b01      	cmp	r3, #1
 800dae2:	d110      	bne.n	800db06 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2209      	movs	r2, #9
 800dae8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2203      	movs	r2, #3
 800daee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dafe:	2300      	movs	r3, #0
 800db00:	2200      	movs	r2, #0
 800db02:	f000 fddb 	bl	800e6bc <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800db06:	7bbb      	ldrb	r3, [r7, #14]
 800db08:	2b05      	cmp	r3, #5
 800db0a:	d110      	bne.n	800db2e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800db0c:	2303      	movs	r3, #3
 800db0e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2203      	movs	r2, #3
 800db14:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800db24:	2300      	movs	r3, #0
 800db26:	2200      	movs	r2, #0
 800db28:	f000 fdc8 	bl	800e6bc <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800db2c:	e173      	b.n	800de16 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800db2e:	7bbb      	ldrb	r3, [r7, #14]
 800db30:	2b04      	cmp	r3, #4
 800db32:	f040 8170 	bne.w	800de16 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	220b      	movs	r2, #11
 800db3a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2203      	movs	r2, #3
 800db40:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800db50:	2300      	movs	r3, #0
 800db52:	2200      	movs	r2, #0
 800db54:	f000 fdb2 	bl	800e6bc <osMessageQueuePut>
      break;
 800db58:	e15d      	b.n	800de16 <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	6899      	ldr	r1, [r3, #8]
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	899a      	ldrh	r2, [r3, #12]
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	7958      	ldrb	r0, [r3, #5]
 800db66:	2301      	movs	r3, #1
 800db68:	9300      	str	r3, [sp, #0]
 800db6a:	4603      	mov	r3, r0
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f000 f979 	bl	800de64 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800db78:	b29a      	uxth	r2, r3
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2206      	movs	r2, #6
 800db82:	761a      	strb	r2, [r3, #24]
      break;
 800db84:	e14e      	b.n	800de24 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	795b      	ldrb	r3, [r3, #5]
 800db8a:	4619      	mov	r1, r3
 800db8c:	6878      	ldr	r0, [r7, #4]
 800db8e:	f004 f867 	bl	8011c60 <USBH_LL_GetURBState>
 800db92:	4603      	mov	r3, r0
 800db94:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800db96:	7bbb      	ldrb	r3, [r7, #14]
 800db98:	2b01      	cmp	r3, #1
 800db9a:	d111      	bne.n	800dbc0 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2207      	movs	r2, #7
 800dba0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	2203      	movs	r2, #3
 800dba6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	2200      	movs	r2, #0
 800dbba:	f000 fd7f 	bl	800e6bc <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800dbbe:	e12c      	b.n	800de1a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 800dbc0:	7bbb      	ldrb	r3, [r7, #14]
 800dbc2:	2b05      	cmp	r3, #5
 800dbc4:	d113      	bne.n	800dbee <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	220c      	movs	r2, #12
 800dbca:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800dbcc:	2303      	movs	r3, #3
 800dbce:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2203      	movs	r2, #3
 800dbd4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	f000 fd68 	bl	800e6bc <osMessageQueuePut>
      break;
 800dbec:	e115      	b.n	800de1a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800dbee:	7bbb      	ldrb	r3, [r7, #14]
 800dbf0:	2b02      	cmp	r3, #2
 800dbf2:	d111      	bne.n	800dc18 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2205      	movs	r2, #5
 800dbf8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	2203      	movs	r2, #3
 800dbfe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dc0e:	2300      	movs	r3, #0
 800dc10:	2200      	movs	r2, #0
 800dc12:	f000 fd53 	bl	800e6bc <osMessageQueuePut>
      break;
 800dc16:	e100      	b.n	800de1a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 800dc18:	7bbb      	ldrb	r3, [r7, #14]
 800dc1a:	2b04      	cmp	r3, #4
 800dc1c:	f040 80fd 	bne.w	800de1a <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	220b      	movs	r2, #11
 800dc24:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800dc26:	2302      	movs	r3, #2
 800dc28:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2203      	movs	r2, #3
 800dc2e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dc3e:	2300      	movs	r3, #0
 800dc40:	2200      	movs	r2, #0
 800dc42:	f000 fd3b 	bl	800e6bc <osMessageQueuePut>
      break;
 800dc46:	e0e8      	b.n	800de1a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	791b      	ldrb	r3, [r3, #4]
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	2100      	movs	r1, #0
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f000 f92c 	bl	800deae <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800dc5c:	b29a      	uxth	r2, r3
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	2208      	movs	r2, #8
 800dc66:	761a      	strb	r2, [r3, #24]

      break;
 800dc68:	e0dc      	b.n	800de24 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	791b      	ldrb	r3, [r3, #4]
 800dc6e:	4619      	mov	r1, r3
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f003 fff5 	bl	8011c60 <USBH_LL_GetURBState>
 800dc76:	4603      	mov	r3, r0
 800dc78:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800dc7a:	7bbb      	ldrb	r3, [r7, #14]
 800dc7c:	2b01      	cmp	r3, #1
 800dc7e:	d113      	bne.n	800dca8 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	220d      	movs	r2, #13
 800dc84:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800dc86:	2300      	movs	r3, #0
 800dc88:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2203      	movs	r2, #3
 800dc8e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dc9e:	2300      	movs	r3, #0
 800dca0:	2200      	movs	r2, #0
 800dca2:	f000 fd0b 	bl	800e6bc <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800dca6:	e0ba      	b.n	800de1e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 800dca8:	7bbb      	ldrb	r3, [r7, #14]
 800dcaa:	2b04      	cmp	r3, #4
 800dcac:	d111      	bne.n	800dcd2 <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	220b      	movs	r2, #11
 800dcb2:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2203      	movs	r2, #3
 800dcb8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dcc8:	2300      	movs	r3, #0
 800dcca:	2200      	movs	r2, #0
 800dccc:	f000 fcf6 	bl	800e6bc <osMessageQueuePut>
      break;
 800dcd0:	e0a5      	b.n	800de1e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 800dcd2:	7bbb      	ldrb	r3, [r7, #14]
 800dcd4:	2b05      	cmp	r3, #5
 800dcd6:	f040 80a2 	bne.w	800de1e <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 800dcda:	2303      	movs	r3, #3
 800dcdc:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2203      	movs	r2, #3
 800dce2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	f000 fce1 	bl	800e6bc <osMessageQueuePut>
      break;
 800dcfa:	e090      	b.n	800de1e <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	795a      	ldrb	r2, [r3, #5]
 800dd00:	2301      	movs	r3, #1
 800dd02:	9300      	str	r3, [sp, #0]
 800dd04:	4613      	mov	r3, r2
 800dd06:	2200      	movs	r2, #0
 800dd08:	2100      	movs	r1, #0
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f000 f8aa 	bl	800de64 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800dd16:	b29a      	uxth	r2, r3
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	220a      	movs	r2, #10
 800dd20:	761a      	strb	r2, [r3, #24]
      break;
 800dd22:	e07f      	b.n	800de24 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	795b      	ldrb	r3, [r3, #5]
 800dd28:	4619      	mov	r1, r3
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	f003 ff98 	bl	8011c60 <USBH_LL_GetURBState>
 800dd30:	4603      	mov	r3, r0
 800dd32:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800dd34:	7bbb      	ldrb	r3, [r7, #14]
 800dd36:	2b01      	cmp	r3, #1
 800dd38:	d113      	bne.n	800dd62 <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	220d      	movs	r2, #13
 800dd42:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	2203      	movs	r2, #3
 800dd48:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dd58:	2300      	movs	r3, #0
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	f000 fcae 	bl	800e6bc <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800dd60:	e05f      	b.n	800de22 <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 800dd62:	7bbb      	ldrb	r3, [r7, #14]
 800dd64:	2b02      	cmp	r3, #2
 800dd66:	d111      	bne.n	800dd8c <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2209      	movs	r2, #9
 800dd6c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2203      	movs	r2, #3
 800dd72:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dd82:	2300      	movs	r3, #0
 800dd84:	2200      	movs	r2, #0
 800dd86:	f000 fc99 	bl	800e6bc <osMessageQueuePut>
      break;
 800dd8a:	e04a      	b.n	800de22 <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 800dd8c:	7bbb      	ldrb	r3, [r7, #14]
 800dd8e:	2b04      	cmp	r3, #4
 800dd90:	d147      	bne.n	800de22 <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	220b      	movs	r2, #11
 800dd96:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2203      	movs	r2, #3
 800dd9c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ddac:	2300      	movs	r3, #0
 800ddae:	2200      	movs	r2, #0
 800ddb0:	f000 fc84 	bl	800e6bc <osMessageQueuePut>
      break;
 800ddb4:	e035      	b.n	800de22 <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	7e5b      	ldrb	r3, [r3, #25]
 800ddba:	3301      	adds	r3, #1
 800ddbc:	b2da      	uxtb	r2, r3
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	765a      	strb	r2, [r3, #25]
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	7e5b      	ldrb	r3, [r3, #25]
 800ddc6:	2b02      	cmp	r3, #2
 800ddc8:	d806      	bhi.n	800ddd8 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	2201      	movs	r2, #1
 800ddce:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2201      	movs	r2, #1
 800ddd4:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ddd6:	e025      	b.n	800de24 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ddde:	2106      	movs	r1, #6
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2200      	movs	r2, #0
 800dde8:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	795b      	ldrb	r3, [r3, #5]
 800ddee:	4619      	mov	r1, r3
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f000 f90d 	bl	800e010 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	791b      	ldrb	r3, [r3, #4]
 800ddfa:	4619      	mov	r1, r3
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f000 f907 	bl	800e010 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2200      	movs	r2, #0
 800de06:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800de08:	2302      	movs	r3, #2
 800de0a:	73fb      	strb	r3, [r7, #15]
      break;
 800de0c:	e00a      	b.n	800de24 <USBH_HandleControl+0x488>

    default:
      break;
 800de0e:	bf00      	nop
 800de10:	e008      	b.n	800de24 <USBH_HandleControl+0x488>
      break;
 800de12:	bf00      	nop
 800de14:	e006      	b.n	800de24 <USBH_HandleControl+0x488>
      break;
 800de16:	bf00      	nop
 800de18:	e004      	b.n	800de24 <USBH_HandleControl+0x488>
      break;
 800de1a:	bf00      	nop
 800de1c:	e002      	b.n	800de24 <USBH_HandleControl+0x488>
      break;
 800de1e:	bf00      	nop
 800de20:	e000      	b.n	800de24 <USBH_HandleControl+0x488>
      break;
 800de22:	bf00      	nop
  }

  return status;
 800de24:	7bfb      	ldrb	r3, [r7, #15]
}
 800de26:	4618      	mov	r0, r3
 800de28:	3710      	adds	r7, #16
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}
 800de2e:	bf00      	nop

0800de30 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b088      	sub	sp, #32
 800de34:	af04      	add	r7, sp, #16
 800de36:	60f8      	str	r0, [r7, #12]
 800de38:	60b9      	str	r1, [r7, #8]
 800de3a:	4613      	mov	r3, r2
 800de3c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800de3e:	79f9      	ldrb	r1, [r7, #7]
 800de40:	2300      	movs	r3, #0
 800de42:	9303      	str	r3, [sp, #12]
 800de44:	2308      	movs	r3, #8
 800de46:	9302      	str	r3, [sp, #8]
 800de48:	68bb      	ldr	r3, [r7, #8]
 800de4a:	9301      	str	r3, [sp, #4]
 800de4c:	2300      	movs	r3, #0
 800de4e:	9300      	str	r3, [sp, #0]
 800de50:	2300      	movs	r3, #0
 800de52:	2200      	movs	r2, #0
 800de54:	68f8      	ldr	r0, [r7, #12]
 800de56:	f003 fed2 	bl	8011bfe <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800de5a:	2300      	movs	r3, #0
}
 800de5c:	4618      	mov	r0, r3
 800de5e:	3710      	adds	r7, #16
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}

0800de64 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b088      	sub	sp, #32
 800de68:	af04      	add	r7, sp, #16
 800de6a:	60f8      	str	r0, [r7, #12]
 800de6c:	60b9      	str	r1, [r7, #8]
 800de6e:	4611      	mov	r1, r2
 800de70:	461a      	mov	r2, r3
 800de72:	460b      	mov	r3, r1
 800de74:	80fb      	strh	r3, [r7, #6]
 800de76:	4613      	mov	r3, r2
 800de78:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800de80:	2b00      	cmp	r3, #0
 800de82:	d001      	beq.n	800de88 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800de84:	2300      	movs	r3, #0
 800de86:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800de88:	7979      	ldrb	r1, [r7, #5]
 800de8a:	7e3b      	ldrb	r3, [r7, #24]
 800de8c:	9303      	str	r3, [sp, #12]
 800de8e:	88fb      	ldrh	r3, [r7, #6]
 800de90:	9302      	str	r3, [sp, #8]
 800de92:	68bb      	ldr	r3, [r7, #8]
 800de94:	9301      	str	r3, [sp, #4]
 800de96:	2301      	movs	r3, #1
 800de98:	9300      	str	r3, [sp, #0]
 800de9a:	2300      	movs	r3, #0
 800de9c:	2200      	movs	r2, #0
 800de9e:	68f8      	ldr	r0, [r7, #12]
 800dea0:	f003 fead 	bl	8011bfe <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800dea4:	2300      	movs	r3, #0
}
 800dea6:	4618      	mov	r0, r3
 800dea8:	3710      	adds	r7, #16
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}

0800deae <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800deae:	b580      	push	{r7, lr}
 800deb0:	b088      	sub	sp, #32
 800deb2:	af04      	add	r7, sp, #16
 800deb4:	60f8      	str	r0, [r7, #12]
 800deb6:	60b9      	str	r1, [r7, #8]
 800deb8:	4611      	mov	r1, r2
 800deba:	461a      	mov	r2, r3
 800debc:	460b      	mov	r3, r1
 800debe:	80fb      	strh	r3, [r7, #6]
 800dec0:	4613      	mov	r3, r2
 800dec2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800dec4:	7979      	ldrb	r1, [r7, #5]
 800dec6:	2300      	movs	r3, #0
 800dec8:	9303      	str	r3, [sp, #12]
 800deca:	88fb      	ldrh	r3, [r7, #6]
 800decc:	9302      	str	r3, [sp, #8]
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	9301      	str	r3, [sp, #4]
 800ded2:	2301      	movs	r3, #1
 800ded4:	9300      	str	r3, [sp, #0]
 800ded6:	2300      	movs	r3, #0
 800ded8:	2201      	movs	r2, #1
 800deda:	68f8      	ldr	r0, [r7, #12]
 800dedc:	f003 fe8f 	bl	8011bfe <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800dee0:	2300      	movs	r3, #0

}
 800dee2:	4618      	mov	r0, r3
 800dee4:	3710      	adds	r7, #16
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}

0800deea <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800deea:	b580      	push	{r7, lr}
 800deec:	b088      	sub	sp, #32
 800deee:	af04      	add	r7, sp, #16
 800def0:	60f8      	str	r0, [r7, #12]
 800def2:	60b9      	str	r1, [r7, #8]
 800def4:	4611      	mov	r1, r2
 800def6:	461a      	mov	r2, r3
 800def8:	460b      	mov	r3, r1
 800defa:	80fb      	strh	r3, [r7, #6]
 800defc:	4613      	mov	r3, r2
 800defe:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800df06:	2b00      	cmp	r3, #0
 800df08:	d001      	beq.n	800df0e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800df0a:	2300      	movs	r3, #0
 800df0c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800df0e:	7979      	ldrb	r1, [r7, #5]
 800df10:	7e3b      	ldrb	r3, [r7, #24]
 800df12:	9303      	str	r3, [sp, #12]
 800df14:	88fb      	ldrh	r3, [r7, #6]
 800df16:	9302      	str	r3, [sp, #8]
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	9301      	str	r3, [sp, #4]
 800df1c:	2301      	movs	r3, #1
 800df1e:	9300      	str	r3, [sp, #0]
 800df20:	2302      	movs	r3, #2
 800df22:	2200      	movs	r2, #0
 800df24:	68f8      	ldr	r0, [r7, #12]
 800df26:	f003 fe6a 	bl	8011bfe <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800df2a:	2300      	movs	r3, #0
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3710      	adds	r7, #16
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}

0800df34 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b088      	sub	sp, #32
 800df38:	af04      	add	r7, sp, #16
 800df3a:	60f8      	str	r0, [r7, #12]
 800df3c:	60b9      	str	r1, [r7, #8]
 800df3e:	4611      	mov	r1, r2
 800df40:	461a      	mov	r2, r3
 800df42:	460b      	mov	r3, r1
 800df44:	80fb      	strh	r3, [r7, #6]
 800df46:	4613      	mov	r3, r2
 800df48:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800df4a:	7979      	ldrb	r1, [r7, #5]
 800df4c:	2300      	movs	r3, #0
 800df4e:	9303      	str	r3, [sp, #12]
 800df50:	88fb      	ldrh	r3, [r7, #6]
 800df52:	9302      	str	r3, [sp, #8]
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	9301      	str	r3, [sp, #4]
 800df58:	2301      	movs	r3, #1
 800df5a:	9300      	str	r3, [sp, #0]
 800df5c:	2302      	movs	r3, #2
 800df5e:	2201      	movs	r2, #1
 800df60:	68f8      	ldr	r0, [r7, #12]
 800df62:	f003 fe4c 	bl	8011bfe <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800df66:	2300      	movs	r3, #0
}
 800df68:	4618      	mov	r0, r3
 800df6a:	3710      	adds	r7, #16
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}

0800df70 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b086      	sub	sp, #24
 800df74:	af04      	add	r7, sp, #16
 800df76:	6078      	str	r0, [r7, #4]
 800df78:	4608      	mov	r0, r1
 800df7a:	4611      	mov	r1, r2
 800df7c:	461a      	mov	r2, r3
 800df7e:	4603      	mov	r3, r0
 800df80:	70fb      	strb	r3, [r7, #3]
 800df82:	460b      	mov	r3, r1
 800df84:	70bb      	strb	r3, [r7, #2]
 800df86:	4613      	mov	r3, r2
 800df88:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800df8a:	7878      	ldrb	r0, [r7, #1]
 800df8c:	78ba      	ldrb	r2, [r7, #2]
 800df8e:	78f9      	ldrb	r1, [r7, #3]
 800df90:	8b3b      	ldrh	r3, [r7, #24]
 800df92:	9302      	str	r3, [sp, #8]
 800df94:	7d3b      	ldrb	r3, [r7, #20]
 800df96:	9301      	str	r3, [sp, #4]
 800df98:	7c3b      	ldrb	r3, [r7, #16]
 800df9a:	9300      	str	r3, [sp, #0]
 800df9c:	4603      	mov	r3, r0
 800df9e:	6878      	ldr	r0, [r7, #4]
 800dfa0:	f003 fddf 	bl	8011b62 <USBH_LL_OpenPipe>

  return USBH_OK;
 800dfa4:	2300      	movs	r3, #0
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	3708      	adds	r7, #8
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd80      	pop	{r7, pc}

0800dfae <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800dfae:	b580      	push	{r7, lr}
 800dfb0:	b082      	sub	sp, #8
 800dfb2:	af00      	add	r7, sp, #0
 800dfb4:	6078      	str	r0, [r7, #4]
 800dfb6:	460b      	mov	r3, r1
 800dfb8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800dfba:	78fb      	ldrb	r3, [r7, #3]
 800dfbc:	4619      	mov	r1, r3
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	f003 fdfe 	bl	8011bc0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800dfc4:	2300      	movs	r3, #0
}
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	3708      	adds	r7, #8
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}

0800dfce <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800dfce:	b580      	push	{r7, lr}
 800dfd0:	b084      	sub	sp, #16
 800dfd2:	af00      	add	r7, sp, #0
 800dfd4:	6078      	str	r0, [r7, #4]
 800dfd6:	460b      	mov	r3, r1
 800dfd8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800dfda:	6878      	ldr	r0, [r7, #4]
 800dfdc:	f000 f836 	bl	800e04c <USBH_GetFreePipe>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800dfe4:	89fb      	ldrh	r3, [r7, #14]
 800dfe6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dfea:	4293      	cmp	r3, r2
 800dfec:	d00a      	beq.n	800e004 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800dfee:	78fa      	ldrb	r2, [r7, #3]
 800dff0:	89fb      	ldrh	r3, [r7, #14]
 800dff2:	f003 030f 	and.w	r3, r3, #15
 800dff6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dffa:	6879      	ldr	r1, [r7, #4]
 800dffc:	33e0      	adds	r3, #224	; 0xe0
 800dffe:	009b      	lsls	r3, r3, #2
 800e000:	440b      	add	r3, r1
 800e002:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e004:	89fb      	ldrh	r3, [r7, #14]
 800e006:	b2db      	uxtb	r3, r3
}
 800e008:	4618      	mov	r0, r3
 800e00a:	3710      	adds	r7, #16
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}

0800e010 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e010:	b480      	push	{r7}
 800e012:	b083      	sub	sp, #12
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
 800e018:	460b      	mov	r3, r1
 800e01a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800e01c:	78fb      	ldrb	r3, [r7, #3]
 800e01e:	2b0a      	cmp	r3, #10
 800e020:	d80d      	bhi.n	800e03e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e022:	78fb      	ldrb	r3, [r7, #3]
 800e024:	687a      	ldr	r2, [r7, #4]
 800e026:	33e0      	adds	r3, #224	; 0xe0
 800e028:	009b      	lsls	r3, r3, #2
 800e02a:	4413      	add	r3, r2
 800e02c:	685a      	ldr	r2, [r3, #4]
 800e02e:	78fb      	ldrb	r3, [r7, #3]
 800e030:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e034:	6879      	ldr	r1, [r7, #4]
 800e036:	33e0      	adds	r3, #224	; 0xe0
 800e038:	009b      	lsls	r3, r3, #2
 800e03a:	440b      	add	r3, r1
 800e03c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e03e:	2300      	movs	r3, #0
}
 800e040:	4618      	mov	r0, r3
 800e042:	370c      	adds	r7, #12
 800e044:	46bd      	mov	sp, r7
 800e046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04a:	4770      	bx	lr

0800e04c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e04c:	b480      	push	{r7}
 800e04e:	b085      	sub	sp, #20
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e054:	2300      	movs	r3, #0
 800e056:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800e058:	2300      	movs	r3, #0
 800e05a:	73fb      	strb	r3, [r7, #15]
 800e05c:	e00f      	b.n	800e07e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e05e:	7bfb      	ldrb	r3, [r7, #15]
 800e060:	687a      	ldr	r2, [r7, #4]
 800e062:	33e0      	adds	r3, #224	; 0xe0
 800e064:	009b      	lsls	r3, r3, #2
 800e066:	4413      	add	r3, r2
 800e068:	685b      	ldr	r3, [r3, #4]
 800e06a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d102      	bne.n	800e078 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800e072:	7bfb      	ldrb	r3, [r7, #15]
 800e074:	b29b      	uxth	r3, r3
 800e076:	e007      	b.n	800e088 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800e078:	7bfb      	ldrb	r3, [r7, #15]
 800e07a:	3301      	adds	r3, #1
 800e07c:	73fb      	strb	r3, [r7, #15]
 800e07e:	7bfb      	ldrb	r3, [r7, #15]
 800e080:	2b0a      	cmp	r3, #10
 800e082:	d9ec      	bls.n	800e05e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e084:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800e088:	4618      	mov	r0, r3
 800e08a:	3714      	adds	r7, #20
 800e08c:	46bd      	mov	sp, r7
 800e08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e092:	4770      	bx	lr

0800e094 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e094:	b480      	push	{r7}
 800e096:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800e098:	bf00      	nop
 800e09a:	46bd      	mov	sp, r7
 800e09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a0:	4770      	bx	lr
	...

0800e0a4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e0a4:	b480      	push	{r7}
 800e0a6:	b085      	sub	sp, #20
 800e0a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e0aa:	f3ef 8305 	mrs	r3, IPSR
 800e0ae:	60bb      	str	r3, [r7, #8]
  return(result);
 800e0b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d10f      	bne.n	800e0d6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e0b6:	f3ef 8310 	mrs	r3, PRIMASK
 800e0ba:	607b      	str	r3, [r7, #4]
  return(result);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d105      	bne.n	800e0ce <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e0c2:	f3ef 8311 	mrs	r3, BASEPRI
 800e0c6:	603b      	str	r3, [r7, #0]
  return(result);
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d007      	beq.n	800e0de <osKernelInitialize+0x3a>
 800e0ce:	4b0e      	ldr	r3, [pc, #56]	; (800e108 <osKernelInitialize+0x64>)
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	2b02      	cmp	r3, #2
 800e0d4:	d103      	bne.n	800e0de <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800e0d6:	f06f 0305 	mvn.w	r3, #5
 800e0da:	60fb      	str	r3, [r7, #12]
 800e0dc:	e00c      	b.n	800e0f8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e0de:	4b0a      	ldr	r3, [pc, #40]	; (800e108 <osKernelInitialize+0x64>)
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d105      	bne.n	800e0f2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e0e6:	4b08      	ldr	r3, [pc, #32]	; (800e108 <osKernelInitialize+0x64>)
 800e0e8:	2201      	movs	r2, #1
 800e0ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	60fb      	str	r3, [r7, #12]
 800e0f0:	e002      	b.n	800e0f8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800e0f2:	f04f 33ff 	mov.w	r3, #4294967295
 800e0f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e0f8:	68fb      	ldr	r3, [r7, #12]
}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	3714      	adds	r7, #20
 800e0fe:	46bd      	mov	sp, r7
 800e100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e104:	4770      	bx	lr
 800e106:	bf00      	nop
 800e108:	2000021c 	.word	0x2000021c

0800e10c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b084      	sub	sp, #16
 800e110:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e112:	f3ef 8305 	mrs	r3, IPSR
 800e116:	60bb      	str	r3, [r7, #8]
  return(result);
 800e118:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d10f      	bne.n	800e13e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e11e:	f3ef 8310 	mrs	r3, PRIMASK
 800e122:	607b      	str	r3, [r7, #4]
  return(result);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d105      	bne.n	800e136 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e12a:	f3ef 8311 	mrs	r3, BASEPRI
 800e12e:	603b      	str	r3, [r7, #0]
  return(result);
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d007      	beq.n	800e146 <osKernelStart+0x3a>
 800e136:	4b0f      	ldr	r3, [pc, #60]	; (800e174 <osKernelStart+0x68>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	2b02      	cmp	r3, #2
 800e13c:	d103      	bne.n	800e146 <osKernelStart+0x3a>
    stat = osErrorISR;
 800e13e:	f06f 0305 	mvn.w	r3, #5
 800e142:	60fb      	str	r3, [r7, #12]
 800e144:	e010      	b.n	800e168 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e146:	4b0b      	ldr	r3, [pc, #44]	; (800e174 <osKernelStart+0x68>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	2b01      	cmp	r3, #1
 800e14c:	d109      	bne.n	800e162 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e14e:	f7ff ffa1 	bl	800e094 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e152:	4b08      	ldr	r3, [pc, #32]	; (800e174 <osKernelStart+0x68>)
 800e154:	2202      	movs	r2, #2
 800e156:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e158:	f001 fdb6 	bl	800fcc8 <vTaskStartScheduler>
      stat = osOK;
 800e15c:	2300      	movs	r3, #0
 800e15e:	60fb      	str	r3, [r7, #12]
 800e160:	e002      	b.n	800e168 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800e162:	f04f 33ff 	mov.w	r3, #4294967295
 800e166:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e168:	68fb      	ldr	r3, [r7, #12]
}
 800e16a:	4618      	mov	r0, r3
 800e16c:	3710      	adds	r7, #16
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd80      	pop	{r7, pc}
 800e172:	bf00      	nop
 800e174:	2000021c 	.word	0x2000021c

0800e178 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e178:	b580      	push	{r7, lr}
 800e17a:	b090      	sub	sp, #64	; 0x40
 800e17c:	af04      	add	r7, sp, #16
 800e17e:	60f8      	str	r0, [r7, #12]
 800e180:	60b9      	str	r1, [r7, #8]
 800e182:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e184:	2300      	movs	r3, #0
 800e186:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e188:	f3ef 8305 	mrs	r3, IPSR
 800e18c:	61fb      	str	r3, [r7, #28]
  return(result);
 800e18e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800e190:	2b00      	cmp	r3, #0
 800e192:	f040 808f 	bne.w	800e2b4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e196:	f3ef 8310 	mrs	r3, PRIMASK
 800e19a:	61bb      	str	r3, [r7, #24]
  return(result);
 800e19c:	69bb      	ldr	r3, [r7, #24]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d105      	bne.n	800e1ae <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e1a2:	f3ef 8311 	mrs	r3, BASEPRI
 800e1a6:	617b      	str	r3, [r7, #20]
  return(result);
 800e1a8:	697b      	ldr	r3, [r7, #20]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d003      	beq.n	800e1b6 <osThreadNew+0x3e>
 800e1ae:	4b44      	ldr	r3, [pc, #272]	; (800e2c0 <osThreadNew+0x148>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	2b02      	cmp	r3, #2
 800e1b4:	d07e      	beq.n	800e2b4 <osThreadNew+0x13c>
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d07b      	beq.n	800e2b4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800e1bc:	2380      	movs	r3, #128	; 0x80
 800e1be:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800e1c0:	2318      	movs	r3, #24
 800e1c2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800e1c8:	f04f 33ff 	mov.w	r3, #4294967295
 800e1cc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d045      	beq.n	800e260 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d002      	beq.n	800e1e2 <osThreadNew+0x6a>
        name = attr->name;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	699b      	ldr	r3, [r3, #24]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d002      	beq.n	800e1f0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	699b      	ldr	r3, [r3, #24]
 800e1ee:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d008      	beq.n	800e208 <osThreadNew+0x90>
 800e1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f8:	2b38      	cmp	r3, #56	; 0x38
 800e1fa:	d805      	bhi.n	800e208 <osThreadNew+0x90>
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	685b      	ldr	r3, [r3, #4]
 800e200:	f003 0301 	and.w	r3, r3, #1
 800e204:	2b00      	cmp	r3, #0
 800e206:	d001      	beq.n	800e20c <osThreadNew+0x94>
        return (NULL);
 800e208:	2300      	movs	r3, #0
 800e20a:	e054      	b.n	800e2b6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	695b      	ldr	r3, [r3, #20]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d003      	beq.n	800e21c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	695b      	ldr	r3, [r3, #20]
 800e218:	089b      	lsrs	r3, r3, #2
 800e21a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	689b      	ldr	r3, [r3, #8]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d00e      	beq.n	800e242 <osThreadNew+0xca>
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	68db      	ldr	r3, [r3, #12]
 800e228:	2b5b      	cmp	r3, #91	; 0x5b
 800e22a:	d90a      	bls.n	800e242 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e230:	2b00      	cmp	r3, #0
 800e232:	d006      	beq.n	800e242 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	695b      	ldr	r3, [r3, #20]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d002      	beq.n	800e242 <osThreadNew+0xca>
        mem = 1;
 800e23c:	2301      	movs	r3, #1
 800e23e:	623b      	str	r3, [r7, #32]
 800e240:	e010      	b.n	800e264 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	689b      	ldr	r3, [r3, #8]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d10c      	bne.n	800e264 <osThreadNew+0xec>
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	68db      	ldr	r3, [r3, #12]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d108      	bne.n	800e264 <osThreadNew+0xec>
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	691b      	ldr	r3, [r3, #16]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d104      	bne.n	800e264 <osThreadNew+0xec>
          mem = 0;
 800e25a:	2300      	movs	r3, #0
 800e25c:	623b      	str	r3, [r7, #32]
 800e25e:	e001      	b.n	800e264 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800e260:	2300      	movs	r3, #0
 800e262:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800e264:	6a3b      	ldr	r3, [r7, #32]
 800e266:	2b01      	cmp	r3, #1
 800e268:	d110      	bne.n	800e28c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800e26e:	687a      	ldr	r2, [r7, #4]
 800e270:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e272:	9202      	str	r2, [sp, #8]
 800e274:	9301      	str	r3, [sp, #4]
 800e276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e278:	9300      	str	r3, [sp, #0]
 800e27a:	68bb      	ldr	r3, [r7, #8]
 800e27c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e27e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e280:	68f8      	ldr	r0, [r7, #12]
 800e282:	f001 fb4f 	bl	800f924 <xTaskCreateStatic>
 800e286:	4603      	mov	r3, r0
 800e288:	613b      	str	r3, [r7, #16]
 800e28a:	e013      	b.n	800e2b4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800e28c:	6a3b      	ldr	r3, [r7, #32]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d110      	bne.n	800e2b4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e294:	b29a      	uxth	r2, r3
 800e296:	f107 0310 	add.w	r3, r7, #16
 800e29a:	9301      	str	r3, [sp, #4]
 800e29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e29e:	9300      	str	r3, [sp, #0]
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e2a4:	68f8      	ldr	r0, [r7, #12]
 800e2a6:	f001 fb97 	bl	800f9d8 <xTaskCreate>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	2b01      	cmp	r3, #1
 800e2ae:	d001      	beq.n	800e2b4 <osThreadNew+0x13c>
          hTask = NULL;
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e2b4:	693b      	ldr	r3, [r7, #16]
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3730      	adds	r7, #48	; 0x30
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}
 800e2be:	bf00      	nop
 800e2c0:	2000021c 	.word	0x2000021c

0800e2c4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b086      	sub	sp, #24
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e2cc:	f3ef 8305 	mrs	r3, IPSR
 800e2d0:	613b      	str	r3, [r7, #16]
  return(result);
 800e2d2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d10f      	bne.n	800e2f8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e2d8:	f3ef 8310 	mrs	r3, PRIMASK
 800e2dc:	60fb      	str	r3, [r7, #12]
  return(result);
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d105      	bne.n	800e2f0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e2e4:	f3ef 8311 	mrs	r3, BASEPRI
 800e2e8:	60bb      	str	r3, [r7, #8]
  return(result);
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d007      	beq.n	800e300 <osDelay+0x3c>
 800e2f0:	4b0a      	ldr	r3, [pc, #40]	; (800e31c <osDelay+0x58>)
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	2b02      	cmp	r3, #2
 800e2f6:	d103      	bne.n	800e300 <osDelay+0x3c>
    stat = osErrorISR;
 800e2f8:	f06f 0305 	mvn.w	r3, #5
 800e2fc:	617b      	str	r3, [r7, #20]
 800e2fe:	e007      	b.n	800e310 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800e300:	2300      	movs	r3, #0
 800e302:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d002      	beq.n	800e310 <osDelay+0x4c>
      vTaskDelay(ticks);
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f001 fca8 	bl	800fc60 <vTaskDelay>
    }
  }

  return (stat);
 800e310:	697b      	ldr	r3, [r7, #20]
}
 800e312:	4618      	mov	r0, r3
 800e314:	3718      	adds	r7, #24
 800e316:	46bd      	mov	sp, r7
 800e318:	bd80      	pop	{r7, pc}
 800e31a:	bf00      	nop
 800e31c:	2000021c 	.word	0x2000021c

0800e320 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800e320:	b580      	push	{r7, lr}
 800e322:	b08a      	sub	sp, #40	; 0x28
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800e328:	2300      	movs	r3, #0
 800e32a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e32c:	f3ef 8305 	mrs	r3, IPSR
 800e330:	613b      	str	r3, [r7, #16]
  return(result);
 800e332:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800e334:	2b00      	cmp	r3, #0
 800e336:	f040 8085 	bne.w	800e444 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e33a:	f3ef 8310 	mrs	r3, PRIMASK
 800e33e:	60fb      	str	r3, [r7, #12]
  return(result);
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d105      	bne.n	800e352 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e346:	f3ef 8311 	mrs	r3, BASEPRI
 800e34a:	60bb      	str	r3, [r7, #8]
  return(result);
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d003      	beq.n	800e35a <osMutexNew+0x3a>
 800e352:	4b3f      	ldr	r3, [pc, #252]	; (800e450 <osMutexNew+0x130>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	2b02      	cmp	r3, #2
 800e358:	d074      	beq.n	800e444 <osMutexNew+0x124>
    if (attr != NULL) {
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d003      	beq.n	800e368 <osMutexNew+0x48>
      type = attr->attr_bits;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	685b      	ldr	r3, [r3, #4]
 800e364:	623b      	str	r3, [r7, #32]
 800e366:	e001      	b.n	800e36c <osMutexNew+0x4c>
    } else {
      type = 0U;
 800e368:	2300      	movs	r3, #0
 800e36a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800e36c:	6a3b      	ldr	r3, [r7, #32]
 800e36e:	f003 0301 	and.w	r3, r3, #1
 800e372:	2b00      	cmp	r3, #0
 800e374:	d002      	beq.n	800e37c <osMutexNew+0x5c>
      rmtx = 1U;
 800e376:	2301      	movs	r3, #1
 800e378:	61fb      	str	r3, [r7, #28]
 800e37a:	e001      	b.n	800e380 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800e37c:	2300      	movs	r3, #0
 800e37e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800e380:	6a3b      	ldr	r3, [r7, #32]
 800e382:	f003 0308 	and.w	r3, r3, #8
 800e386:	2b00      	cmp	r3, #0
 800e388:	d15c      	bne.n	800e444 <osMutexNew+0x124>
      mem = -1;
 800e38a:	f04f 33ff 	mov.w	r3, #4294967295
 800e38e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d015      	beq.n	800e3c2 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	689b      	ldr	r3, [r3, #8]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d006      	beq.n	800e3ac <osMutexNew+0x8c>
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	68db      	ldr	r3, [r3, #12]
 800e3a2:	2b4f      	cmp	r3, #79	; 0x4f
 800e3a4:	d902      	bls.n	800e3ac <osMutexNew+0x8c>
          mem = 1;
 800e3a6:	2301      	movs	r3, #1
 800e3a8:	61bb      	str	r3, [r7, #24]
 800e3aa:	e00c      	b.n	800e3c6 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	689b      	ldr	r3, [r3, #8]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d108      	bne.n	800e3c6 <osMutexNew+0xa6>
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	68db      	ldr	r3, [r3, #12]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d104      	bne.n	800e3c6 <osMutexNew+0xa6>
            mem = 0;
 800e3bc:	2300      	movs	r3, #0
 800e3be:	61bb      	str	r3, [r7, #24]
 800e3c0:	e001      	b.n	800e3c6 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800e3c6:	69bb      	ldr	r3, [r7, #24]
 800e3c8:	2b01      	cmp	r3, #1
 800e3ca:	d112      	bne.n	800e3f2 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800e3cc:	69fb      	ldr	r3, [r7, #28]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d007      	beq.n	800e3e2 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	689b      	ldr	r3, [r3, #8]
 800e3d6:	4619      	mov	r1, r3
 800e3d8:	2004      	movs	r0, #4
 800e3da:	f000 fcac 	bl	800ed36 <xQueueCreateMutexStatic>
 800e3de:	6278      	str	r0, [r7, #36]	; 0x24
 800e3e0:	e016      	b.n	800e410 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	689b      	ldr	r3, [r3, #8]
 800e3e6:	4619      	mov	r1, r3
 800e3e8:	2001      	movs	r0, #1
 800e3ea:	f000 fca4 	bl	800ed36 <xQueueCreateMutexStatic>
 800e3ee:	6278      	str	r0, [r7, #36]	; 0x24
 800e3f0:	e00e      	b.n	800e410 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800e3f2:	69bb      	ldr	r3, [r7, #24]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d10b      	bne.n	800e410 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800e3f8:	69fb      	ldr	r3, [r7, #28]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d004      	beq.n	800e408 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800e3fe:	2004      	movs	r0, #4
 800e400:	f000 fc81 	bl	800ed06 <xQueueCreateMutex>
 800e404:	6278      	str	r0, [r7, #36]	; 0x24
 800e406:	e003      	b.n	800e410 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800e408:	2001      	movs	r0, #1
 800e40a:	f000 fc7c 	bl	800ed06 <xQueueCreateMutex>
 800e40e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800e410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e412:	2b00      	cmp	r3, #0
 800e414:	d00c      	beq.n	800e430 <osMutexNew+0x110>
        if (attr != NULL) {
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d003      	beq.n	800e424 <osMutexNew+0x104>
          name = attr->name;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	617b      	str	r3, [r7, #20]
 800e422:	e001      	b.n	800e428 <osMutexNew+0x108>
        } else {
          name = NULL;
 800e424:	2300      	movs	r3, #0
 800e426:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800e428:	6979      	ldr	r1, [r7, #20]
 800e42a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e42c:	f001 fa1e 	bl	800f86c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800e430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e432:	2b00      	cmp	r3, #0
 800e434:	d006      	beq.n	800e444 <osMutexNew+0x124>
 800e436:	69fb      	ldr	r3, [r7, #28]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d003      	beq.n	800e444 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800e43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e43e:	f043 0301 	orr.w	r3, r3, #1
 800e442:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800e444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e446:	4618      	mov	r0, r3
 800e448:	3728      	adds	r7, #40	; 0x28
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}
 800e44e:	bf00      	nop
 800e450:	2000021c 	.word	0x2000021c

0800e454 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800e454:	b580      	push	{r7, lr}
 800e456:	b088      	sub	sp, #32
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
 800e45c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	f023 0301 	bic.w	r3, r3, #1
 800e464:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	f003 0301 	and.w	r3, r3, #1
 800e46c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800e46e:	2300      	movs	r3, #0
 800e470:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e472:	f3ef 8305 	mrs	r3, IPSR
 800e476:	613b      	str	r3, [r7, #16]
  return(result);
 800e478:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d10f      	bne.n	800e49e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e47e:	f3ef 8310 	mrs	r3, PRIMASK
 800e482:	60fb      	str	r3, [r7, #12]
  return(result);
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d105      	bne.n	800e496 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e48a:	f3ef 8311 	mrs	r3, BASEPRI
 800e48e:	60bb      	str	r3, [r7, #8]
  return(result);
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d007      	beq.n	800e4a6 <osMutexAcquire+0x52>
 800e496:	4b1d      	ldr	r3, [pc, #116]	; (800e50c <osMutexAcquire+0xb8>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	2b02      	cmp	r3, #2
 800e49c:	d103      	bne.n	800e4a6 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800e49e:	f06f 0305 	mvn.w	r3, #5
 800e4a2:	61fb      	str	r3, [r7, #28]
 800e4a4:	e02c      	b.n	800e500 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800e4a6:	69bb      	ldr	r3, [r7, #24]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d103      	bne.n	800e4b4 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800e4ac:	f06f 0303 	mvn.w	r3, #3
 800e4b0:	61fb      	str	r3, [r7, #28]
 800e4b2:	e025      	b.n	800e500 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800e4b4:	697b      	ldr	r3, [r7, #20]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d011      	beq.n	800e4de <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800e4ba:	6839      	ldr	r1, [r7, #0]
 800e4bc:	69b8      	ldr	r0, [r7, #24]
 800e4be:	f000 fc88 	bl	800edd2 <xQueueTakeMutexRecursive>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	2b01      	cmp	r3, #1
 800e4c6:	d01b      	beq.n	800e500 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d003      	beq.n	800e4d6 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800e4ce:	f06f 0301 	mvn.w	r3, #1
 800e4d2:	61fb      	str	r3, [r7, #28]
 800e4d4:	e014      	b.n	800e500 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800e4d6:	f06f 0302 	mvn.w	r3, #2
 800e4da:	61fb      	str	r3, [r7, #28]
 800e4dc:	e010      	b.n	800e500 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800e4de:	6839      	ldr	r1, [r7, #0]
 800e4e0:	69b8      	ldr	r0, [r7, #24]
 800e4e2:	f000 ff15 	bl	800f310 <xQueueSemaphoreTake>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	2b01      	cmp	r3, #1
 800e4ea:	d009      	beq.n	800e500 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d003      	beq.n	800e4fa <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800e4f2:	f06f 0301 	mvn.w	r3, #1
 800e4f6:	61fb      	str	r3, [r7, #28]
 800e4f8:	e002      	b.n	800e500 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800e4fa:	f06f 0302 	mvn.w	r3, #2
 800e4fe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e500:	69fb      	ldr	r3, [r7, #28]
}
 800e502:	4618      	mov	r0, r3
 800e504:	3720      	adds	r7, #32
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}
 800e50a:	bf00      	nop
 800e50c:	2000021c 	.word	0x2000021c

0800e510 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800e510:	b580      	push	{r7, lr}
 800e512:	b088      	sub	sp, #32
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	f023 0301 	bic.w	r3, r3, #1
 800e51e:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	f003 0301 	and.w	r3, r3, #1
 800e526:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800e528:	2300      	movs	r3, #0
 800e52a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e52c:	f3ef 8305 	mrs	r3, IPSR
 800e530:	613b      	str	r3, [r7, #16]
  return(result);
 800e532:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800e534:	2b00      	cmp	r3, #0
 800e536:	d10f      	bne.n	800e558 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e538:	f3ef 8310 	mrs	r3, PRIMASK
 800e53c:	60fb      	str	r3, [r7, #12]
  return(result);
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d105      	bne.n	800e550 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e544:	f3ef 8311 	mrs	r3, BASEPRI
 800e548:	60bb      	str	r3, [r7, #8]
  return(result);
 800e54a:	68bb      	ldr	r3, [r7, #8]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d007      	beq.n	800e560 <osMutexRelease+0x50>
 800e550:	4b16      	ldr	r3, [pc, #88]	; (800e5ac <osMutexRelease+0x9c>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	2b02      	cmp	r3, #2
 800e556:	d103      	bne.n	800e560 <osMutexRelease+0x50>
    stat = osErrorISR;
 800e558:	f06f 0305 	mvn.w	r3, #5
 800e55c:	61fb      	str	r3, [r7, #28]
 800e55e:	e01f      	b.n	800e5a0 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800e560:	69bb      	ldr	r3, [r7, #24]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d103      	bne.n	800e56e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800e566:	f06f 0303 	mvn.w	r3, #3
 800e56a:	61fb      	str	r3, [r7, #28]
 800e56c:	e018      	b.n	800e5a0 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800e56e:	697b      	ldr	r3, [r7, #20]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d009      	beq.n	800e588 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800e574:	69b8      	ldr	r0, [r7, #24]
 800e576:	f000 fbf9 	bl	800ed6c <xQueueGiveMutexRecursive>
 800e57a:	4603      	mov	r3, r0
 800e57c:	2b01      	cmp	r3, #1
 800e57e:	d00f      	beq.n	800e5a0 <osMutexRelease+0x90>
        stat = osErrorResource;
 800e580:	f06f 0302 	mvn.w	r3, #2
 800e584:	61fb      	str	r3, [r7, #28]
 800e586:	e00b      	b.n	800e5a0 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800e588:	2300      	movs	r3, #0
 800e58a:	2200      	movs	r2, #0
 800e58c:	2100      	movs	r1, #0
 800e58e:	69b8      	ldr	r0, [r7, #24]
 800e590:	f000 fc54 	bl	800ee3c <xQueueGenericSend>
 800e594:	4603      	mov	r3, r0
 800e596:	2b01      	cmp	r3, #1
 800e598:	d002      	beq.n	800e5a0 <osMutexRelease+0x90>
        stat = osErrorResource;
 800e59a:	f06f 0302 	mvn.w	r3, #2
 800e59e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800e5a0:	69fb      	ldr	r3, [r7, #28]
}
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	3720      	adds	r7, #32
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	bd80      	pop	{r7, pc}
 800e5aa:	bf00      	nop
 800e5ac:	2000021c 	.word	0x2000021c

0800e5b0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b08c      	sub	sp, #48	; 0x30
 800e5b4:	af02      	add	r7, sp, #8
 800e5b6:	60f8      	str	r0, [r7, #12]
 800e5b8:	60b9      	str	r1, [r7, #8]
 800e5ba:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800e5bc:	2300      	movs	r3, #0
 800e5be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e5c0:	f3ef 8305 	mrs	r3, IPSR
 800e5c4:	61bb      	str	r3, [r7, #24]
  return(result);
 800e5c6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d170      	bne.n	800e6ae <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e5cc:	f3ef 8310 	mrs	r3, PRIMASK
 800e5d0:	617b      	str	r3, [r7, #20]
  return(result);
 800e5d2:	697b      	ldr	r3, [r7, #20]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d105      	bne.n	800e5e4 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e5d8:	f3ef 8311 	mrs	r3, BASEPRI
 800e5dc:	613b      	str	r3, [r7, #16]
  return(result);
 800e5de:	693b      	ldr	r3, [r7, #16]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d003      	beq.n	800e5ec <osMessageQueueNew+0x3c>
 800e5e4:	4b34      	ldr	r3, [pc, #208]	; (800e6b8 <osMessageQueueNew+0x108>)
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	2b02      	cmp	r3, #2
 800e5ea:	d060      	beq.n	800e6ae <osMessageQueueNew+0xfe>
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d05d      	beq.n	800e6ae <osMessageQueueNew+0xfe>
 800e5f2:	68bb      	ldr	r3, [r7, #8]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d05a      	beq.n	800e6ae <osMessageQueueNew+0xfe>
    mem = -1;
 800e5f8:	f04f 33ff 	mov.w	r3, #4294967295
 800e5fc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d029      	beq.n	800e658 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	689b      	ldr	r3, [r3, #8]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d012      	beq.n	800e632 <osMessageQueueNew+0x82>
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	68db      	ldr	r3, [r3, #12]
 800e610:	2b4f      	cmp	r3, #79	; 0x4f
 800e612:	d90e      	bls.n	800e632 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d00a      	beq.n	800e632 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	695a      	ldr	r2, [r3, #20]
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	68b9      	ldr	r1, [r7, #8]
 800e624:	fb01 f303 	mul.w	r3, r1, r3
 800e628:	429a      	cmp	r2, r3
 800e62a:	d302      	bcc.n	800e632 <osMessageQueueNew+0x82>
        mem = 1;
 800e62c:	2301      	movs	r3, #1
 800e62e:	623b      	str	r3, [r7, #32]
 800e630:	e014      	b.n	800e65c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	689b      	ldr	r3, [r3, #8]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d110      	bne.n	800e65c <osMessageQueueNew+0xac>
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	68db      	ldr	r3, [r3, #12]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d10c      	bne.n	800e65c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e646:	2b00      	cmp	r3, #0
 800e648:	d108      	bne.n	800e65c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	695b      	ldr	r3, [r3, #20]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d104      	bne.n	800e65c <osMessageQueueNew+0xac>
          mem = 0;
 800e652:	2300      	movs	r3, #0
 800e654:	623b      	str	r3, [r7, #32]
 800e656:	e001      	b.n	800e65c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800e658:	2300      	movs	r3, #0
 800e65a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800e65c:	6a3b      	ldr	r3, [r7, #32]
 800e65e:	2b01      	cmp	r3, #1
 800e660:	d10c      	bne.n	800e67c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	691a      	ldr	r2, [r3, #16]
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	6899      	ldr	r1, [r3, #8]
 800e66a:	2300      	movs	r3, #0
 800e66c:	9300      	str	r3, [sp, #0]
 800e66e:	460b      	mov	r3, r1
 800e670:	68b9      	ldr	r1, [r7, #8]
 800e672:	68f8      	ldr	r0, [r7, #12]
 800e674:	f000 fa58 	bl	800eb28 <xQueueGenericCreateStatic>
 800e678:	6278      	str	r0, [r7, #36]	; 0x24
 800e67a:	e008      	b.n	800e68e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800e67c:	6a3b      	ldr	r3, [r7, #32]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d105      	bne.n	800e68e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800e682:	2200      	movs	r2, #0
 800e684:	68b9      	ldr	r1, [r7, #8]
 800e686:	68f8      	ldr	r0, [r7, #12]
 800e688:	f000 fac1 	bl	800ec0e <xQueueGenericCreate>
 800e68c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800e68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e690:	2b00      	cmp	r3, #0
 800e692:	d00c      	beq.n	800e6ae <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d003      	beq.n	800e6a2 <osMessageQueueNew+0xf2>
        name = attr->name;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	61fb      	str	r3, [r7, #28]
 800e6a0:	e001      	b.n	800e6a6 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800e6a6:	69f9      	ldr	r1, [r7, #28]
 800e6a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e6aa:	f001 f8df 	bl	800f86c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800e6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	3728      	adds	r7, #40	; 0x28
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}
 800e6b8:	2000021c 	.word	0x2000021c

0800e6bc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b08a      	sub	sp, #40	; 0x28
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	60f8      	str	r0, [r7, #12]
 800e6c4:	60b9      	str	r1, [r7, #8]
 800e6c6:	603b      	str	r3, [r7, #0]
 800e6c8:	4613      	mov	r3, r2
 800e6ca:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e6d4:	f3ef 8305 	mrs	r3, IPSR
 800e6d8:	61fb      	str	r3, [r7, #28]
  return(result);
 800e6da:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d10f      	bne.n	800e700 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e6e0:	f3ef 8310 	mrs	r3, PRIMASK
 800e6e4:	61bb      	str	r3, [r7, #24]
  return(result);
 800e6e6:	69bb      	ldr	r3, [r7, #24]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d105      	bne.n	800e6f8 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e6ec:	f3ef 8311 	mrs	r3, BASEPRI
 800e6f0:	617b      	str	r3, [r7, #20]
  return(result);
 800e6f2:	697b      	ldr	r3, [r7, #20]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d02c      	beq.n	800e752 <osMessageQueuePut+0x96>
 800e6f8:	4b28      	ldr	r3, [pc, #160]	; (800e79c <osMessageQueuePut+0xe0>)
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	2b02      	cmp	r3, #2
 800e6fe:	d128      	bne.n	800e752 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e700:	6a3b      	ldr	r3, [r7, #32]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d005      	beq.n	800e712 <osMessageQueuePut+0x56>
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d002      	beq.n	800e712 <osMessageQueuePut+0x56>
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d003      	beq.n	800e71a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800e712:	f06f 0303 	mvn.w	r3, #3
 800e716:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e718:	e039      	b.n	800e78e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800e71a:	2300      	movs	r3, #0
 800e71c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e71e:	f107 0210 	add.w	r2, r7, #16
 800e722:	2300      	movs	r3, #0
 800e724:	68b9      	ldr	r1, [r7, #8]
 800e726:	6a38      	ldr	r0, [r7, #32]
 800e728:	f000 fc82 	bl	800f030 <xQueueGenericSendFromISR>
 800e72c:	4603      	mov	r3, r0
 800e72e:	2b01      	cmp	r3, #1
 800e730:	d003      	beq.n	800e73a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800e732:	f06f 0302 	mvn.w	r3, #2
 800e736:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e738:	e029      	b.n	800e78e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800e73a:	693b      	ldr	r3, [r7, #16]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d026      	beq.n	800e78e <osMessageQueuePut+0xd2>
 800e740:	4b17      	ldr	r3, [pc, #92]	; (800e7a0 <osMessageQueuePut+0xe4>)
 800e742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e746:	601a      	str	r2, [r3, #0]
 800e748:	f3bf 8f4f 	dsb	sy
 800e74c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e750:	e01d      	b.n	800e78e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e752:	6a3b      	ldr	r3, [r7, #32]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d002      	beq.n	800e75e <osMessageQueuePut+0xa2>
 800e758:	68bb      	ldr	r3, [r7, #8]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d103      	bne.n	800e766 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800e75e:	f06f 0303 	mvn.w	r3, #3
 800e762:	627b      	str	r3, [r7, #36]	; 0x24
 800e764:	e014      	b.n	800e790 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e766:	2300      	movs	r3, #0
 800e768:	683a      	ldr	r2, [r7, #0]
 800e76a:	68b9      	ldr	r1, [r7, #8]
 800e76c:	6a38      	ldr	r0, [r7, #32]
 800e76e:	f000 fb65 	bl	800ee3c <xQueueGenericSend>
 800e772:	4603      	mov	r3, r0
 800e774:	2b01      	cmp	r3, #1
 800e776:	d00b      	beq.n	800e790 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d003      	beq.n	800e786 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800e77e:	f06f 0301 	mvn.w	r3, #1
 800e782:	627b      	str	r3, [r7, #36]	; 0x24
 800e784:	e004      	b.n	800e790 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800e786:	f06f 0302 	mvn.w	r3, #2
 800e78a:	627b      	str	r3, [r7, #36]	; 0x24
 800e78c:	e000      	b.n	800e790 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e78e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800e790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e792:	4618      	mov	r0, r3
 800e794:	3728      	adds	r7, #40	; 0x28
 800e796:	46bd      	mov	sp, r7
 800e798:	bd80      	pop	{r7, pc}
 800e79a:	bf00      	nop
 800e79c:	2000021c 	.word	0x2000021c
 800e7a0:	e000ed04 	.word	0xe000ed04

0800e7a4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b08a      	sub	sp, #40	; 0x28
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	60f8      	str	r0, [r7, #12]
 800e7ac:	60b9      	str	r1, [r7, #8]
 800e7ae:	607a      	str	r2, [r7, #4]
 800e7b0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e7ba:	f3ef 8305 	mrs	r3, IPSR
 800e7be:	61fb      	str	r3, [r7, #28]
  return(result);
 800e7c0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d10f      	bne.n	800e7e6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e7c6:	f3ef 8310 	mrs	r3, PRIMASK
 800e7ca:	61bb      	str	r3, [r7, #24]
  return(result);
 800e7cc:	69bb      	ldr	r3, [r7, #24]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d105      	bne.n	800e7de <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e7d2:	f3ef 8311 	mrs	r3, BASEPRI
 800e7d6:	617b      	str	r3, [r7, #20]
  return(result);
 800e7d8:	697b      	ldr	r3, [r7, #20]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d02c      	beq.n	800e838 <osMessageQueueGet+0x94>
 800e7de:	4b28      	ldr	r3, [pc, #160]	; (800e880 <osMessageQueueGet+0xdc>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	2b02      	cmp	r3, #2
 800e7e4:	d128      	bne.n	800e838 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e7e6:	6a3b      	ldr	r3, [r7, #32]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d005      	beq.n	800e7f8 <osMessageQueueGet+0x54>
 800e7ec:	68bb      	ldr	r3, [r7, #8]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d002      	beq.n	800e7f8 <osMessageQueueGet+0x54>
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d003      	beq.n	800e800 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800e7f8:	f06f 0303 	mvn.w	r3, #3
 800e7fc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e7fe:	e038      	b.n	800e872 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800e800:	2300      	movs	r3, #0
 800e802:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e804:	f107 0310 	add.w	r3, r7, #16
 800e808:	461a      	mov	r2, r3
 800e80a:	68b9      	ldr	r1, [r7, #8]
 800e80c:	6a38      	ldr	r0, [r7, #32]
 800e80e:	f000 fe87 	bl	800f520 <xQueueReceiveFromISR>
 800e812:	4603      	mov	r3, r0
 800e814:	2b01      	cmp	r3, #1
 800e816:	d003      	beq.n	800e820 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800e818:	f06f 0302 	mvn.w	r3, #2
 800e81c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e81e:	e028      	b.n	800e872 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800e820:	693b      	ldr	r3, [r7, #16]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d025      	beq.n	800e872 <osMessageQueueGet+0xce>
 800e826:	4b17      	ldr	r3, [pc, #92]	; (800e884 <osMessageQueueGet+0xe0>)
 800e828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e82c:	601a      	str	r2, [r3, #0]
 800e82e:	f3bf 8f4f 	dsb	sy
 800e832:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e836:	e01c      	b.n	800e872 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e838:	6a3b      	ldr	r3, [r7, #32]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d002      	beq.n	800e844 <osMessageQueueGet+0xa0>
 800e83e:	68bb      	ldr	r3, [r7, #8]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d103      	bne.n	800e84c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800e844:	f06f 0303 	mvn.w	r3, #3
 800e848:	627b      	str	r3, [r7, #36]	; 0x24
 800e84a:	e013      	b.n	800e874 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e84c:	683a      	ldr	r2, [r7, #0]
 800e84e:	68b9      	ldr	r1, [r7, #8]
 800e850:	6a38      	ldr	r0, [r7, #32]
 800e852:	f000 fc81 	bl	800f158 <xQueueReceive>
 800e856:	4603      	mov	r3, r0
 800e858:	2b01      	cmp	r3, #1
 800e85a:	d00b      	beq.n	800e874 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d003      	beq.n	800e86a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800e862:	f06f 0301 	mvn.w	r3, #1
 800e866:	627b      	str	r3, [r7, #36]	; 0x24
 800e868:	e004      	b.n	800e874 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800e86a:	f06f 0302 	mvn.w	r3, #2
 800e86e:	627b      	str	r3, [r7, #36]	; 0x24
 800e870:	e000      	b.n	800e874 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e872:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800e874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e876:	4618      	mov	r0, r3
 800e878:	3728      	adds	r7, #40	; 0x28
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd80      	pop	{r7, pc}
 800e87e:	bf00      	nop
 800e880:	2000021c 	.word	0x2000021c
 800e884:	e000ed04 	.word	0xe000ed04

0800e888 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e888:	b480      	push	{r7}
 800e88a:	b085      	sub	sp, #20
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	60f8      	str	r0, [r7, #12]
 800e890:	60b9      	str	r1, [r7, #8]
 800e892:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	4a07      	ldr	r2, [pc, #28]	; (800e8b4 <vApplicationGetIdleTaskMemory+0x2c>)
 800e898:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e89a:	68bb      	ldr	r3, [r7, #8]
 800e89c:	4a06      	ldr	r2, [pc, #24]	; (800e8b8 <vApplicationGetIdleTaskMemory+0x30>)
 800e89e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2280      	movs	r2, #128	; 0x80
 800e8a4:	601a      	str	r2, [r3, #0]
}
 800e8a6:	bf00      	nop
 800e8a8:	3714      	adds	r7, #20
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b0:	4770      	bx	lr
 800e8b2:	bf00      	nop
 800e8b4:	20000220 	.word	0x20000220
 800e8b8:	2000027c 	.word	0x2000027c

0800e8bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e8bc:	b480      	push	{r7}
 800e8be:	b085      	sub	sp, #20
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	60f8      	str	r0, [r7, #12]
 800e8c4:	60b9      	str	r1, [r7, #8]
 800e8c6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	4a07      	ldr	r2, [pc, #28]	; (800e8e8 <vApplicationGetTimerTaskMemory+0x2c>)
 800e8cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	4a06      	ldr	r2, [pc, #24]	; (800e8ec <vApplicationGetTimerTaskMemory+0x30>)
 800e8d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e8da:	601a      	str	r2, [r3, #0]
}
 800e8dc:	bf00      	nop
 800e8de:	3714      	adds	r7, #20
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e6:	4770      	bx	lr
 800e8e8:	2000047c 	.word	0x2000047c
 800e8ec:	200004d8 	.word	0x200004d8

0800e8f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e8f0:	b480      	push	{r7}
 800e8f2:	b083      	sub	sp, #12
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f103 0208 	add.w	r2, r3, #8
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	f04f 32ff 	mov.w	r2, #4294967295
 800e908:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f103 0208 	add.w	r2, r3, #8
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	f103 0208 	add.w	r2, r3, #8
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2200      	movs	r2, #0
 800e922:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e924:	bf00      	nop
 800e926:	370c      	adds	r7, #12
 800e928:	46bd      	mov	sp, r7
 800e92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92e:	4770      	bx	lr

0800e930 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e930:	b480      	push	{r7}
 800e932:	b083      	sub	sp, #12
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2200      	movs	r2, #0
 800e93c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e93e:	bf00      	nop
 800e940:	370c      	adds	r7, #12
 800e942:	46bd      	mov	sp, r7
 800e944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e948:	4770      	bx	lr

0800e94a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e94a:	b480      	push	{r7}
 800e94c:	b085      	sub	sp, #20
 800e94e:	af00      	add	r7, sp, #0
 800e950:	6078      	str	r0, [r7, #4]
 800e952:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	685b      	ldr	r3, [r3, #4]
 800e958:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	68fa      	ldr	r2, [r7, #12]
 800e95e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	689a      	ldr	r2, [r3, #8]
 800e964:	683b      	ldr	r3, [r7, #0]
 800e966:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	689b      	ldr	r3, [r3, #8]
 800e96c:	683a      	ldr	r2, [r7, #0]
 800e96e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	683a      	ldr	r2, [r7, #0]
 800e974:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	687a      	ldr	r2, [r7, #4]
 800e97a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	1c5a      	adds	r2, r3, #1
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	601a      	str	r2, [r3, #0]
}
 800e986:	bf00      	nop
 800e988:	3714      	adds	r7, #20
 800e98a:	46bd      	mov	sp, r7
 800e98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e990:	4770      	bx	lr

0800e992 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e992:	b480      	push	{r7}
 800e994:	b085      	sub	sp, #20
 800e996:	af00      	add	r7, sp, #0
 800e998:	6078      	str	r0, [r7, #4]
 800e99a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9a8:	d103      	bne.n	800e9b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	691b      	ldr	r3, [r3, #16]
 800e9ae:	60fb      	str	r3, [r7, #12]
 800e9b0:	e00c      	b.n	800e9cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	3308      	adds	r3, #8
 800e9b6:	60fb      	str	r3, [r7, #12]
 800e9b8:	e002      	b.n	800e9c0 <vListInsert+0x2e>
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	685b      	ldr	r3, [r3, #4]
 800e9be:	60fb      	str	r3, [r7, #12]
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	685b      	ldr	r3, [r3, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	68ba      	ldr	r2, [r7, #8]
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d2f6      	bcs.n	800e9ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	685a      	ldr	r2, [r3, #4]
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	685b      	ldr	r3, [r3, #4]
 800e9d8:	683a      	ldr	r2, [r7, #0]
 800e9da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	68fa      	ldr	r2, [r7, #12]
 800e9e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	683a      	ldr	r2, [r7, #0]
 800e9e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	687a      	ldr	r2, [r7, #4]
 800e9ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	1c5a      	adds	r2, r3, #1
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	601a      	str	r2, [r3, #0]
}
 800e9f8:	bf00      	nop
 800e9fa:	3714      	adds	r7, #20
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea02:	4770      	bx	lr

0800ea04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ea04:	b480      	push	{r7}
 800ea06:	b085      	sub	sp, #20
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	691b      	ldr	r3, [r3, #16]
 800ea10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	685b      	ldr	r3, [r3, #4]
 800ea16:	687a      	ldr	r2, [r7, #4]
 800ea18:	6892      	ldr	r2, [r2, #8]
 800ea1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	689b      	ldr	r3, [r3, #8]
 800ea20:	687a      	ldr	r2, [r7, #4]
 800ea22:	6852      	ldr	r2, [r2, #4]
 800ea24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	685b      	ldr	r3, [r3, #4]
 800ea2a:	687a      	ldr	r2, [r7, #4]
 800ea2c:	429a      	cmp	r2, r3
 800ea2e:	d103      	bne.n	800ea38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	689a      	ldr	r2, [r3, #8]
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	1e5a      	subs	r2, r3, #1
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	681b      	ldr	r3, [r3, #0]
}
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	3714      	adds	r7, #20
 800ea50:	46bd      	mov	sp, r7
 800ea52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea56:	4770      	bx	lr

0800ea58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b084      	sub	sp, #16
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
 800ea60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d109      	bne.n	800ea80 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ea6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea70:	f383 8811 	msr	BASEPRI, r3
 800ea74:	f3bf 8f6f 	isb	sy
 800ea78:	f3bf 8f4f 	dsb	sy
 800ea7c:	60bb      	str	r3, [r7, #8]
 800ea7e:	e7fe      	b.n	800ea7e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800ea80:	f002 fbac 	bl	80111dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	681a      	ldr	r2, [r3, #0]
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea8c:	68f9      	ldr	r1, [r7, #12]
 800ea8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ea90:	fb01 f303 	mul.w	r3, r1, r3
 800ea94:	441a      	add	r2, r3
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	681a      	ldr	r2, [r3, #0]
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	681a      	ldr	r2, [r3, #0]
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eab0:	3b01      	subs	r3, #1
 800eab2:	68f9      	ldr	r1, [r7, #12]
 800eab4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800eab6:	fb01 f303 	mul.w	r3, r1, r3
 800eaba:	441a      	add	r2, r3
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	22ff      	movs	r2, #255	; 0xff
 800eac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	22ff      	movs	r2, #255	; 0xff
 800eacc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d114      	bne.n	800eb00 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	691b      	ldr	r3, [r3, #16]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d01a      	beq.n	800eb14 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	3310      	adds	r3, #16
 800eae2:	4618      	mov	r0, r3
 800eae4:	f001 fb70 	bl	80101c8 <xTaskRemoveFromEventList>
 800eae8:	4603      	mov	r3, r0
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d012      	beq.n	800eb14 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800eaee:	4b0d      	ldr	r3, [pc, #52]	; (800eb24 <xQueueGenericReset+0xcc>)
 800eaf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eaf4:	601a      	str	r2, [r3, #0]
 800eaf6:	f3bf 8f4f 	dsb	sy
 800eafa:	f3bf 8f6f 	isb	sy
 800eafe:	e009      	b.n	800eb14 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	3310      	adds	r3, #16
 800eb04:	4618      	mov	r0, r3
 800eb06:	f7ff fef3 	bl	800e8f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	3324      	adds	r3, #36	; 0x24
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f7ff feee 	bl	800e8f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800eb14:	f002 fb90 	bl	8011238 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800eb18:	2301      	movs	r3, #1
}
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	3710      	adds	r7, #16
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}
 800eb22:	bf00      	nop
 800eb24:	e000ed04 	.word	0xe000ed04

0800eb28 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b08e      	sub	sp, #56	; 0x38
 800eb2c:	af02      	add	r7, sp, #8
 800eb2e:	60f8      	str	r0, [r7, #12]
 800eb30:	60b9      	str	r1, [r7, #8]
 800eb32:	607a      	str	r2, [r7, #4]
 800eb34:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d109      	bne.n	800eb50 <xQueueGenericCreateStatic+0x28>
 800eb3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb40:	f383 8811 	msr	BASEPRI, r3
 800eb44:	f3bf 8f6f 	isb	sy
 800eb48:	f3bf 8f4f 	dsb	sy
 800eb4c:	62bb      	str	r3, [r7, #40]	; 0x28
 800eb4e:	e7fe      	b.n	800eb4e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d109      	bne.n	800eb6a <xQueueGenericCreateStatic+0x42>
 800eb56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb5a:	f383 8811 	msr	BASEPRI, r3
 800eb5e:	f3bf 8f6f 	isb	sy
 800eb62:	f3bf 8f4f 	dsb	sy
 800eb66:	627b      	str	r3, [r7, #36]	; 0x24
 800eb68:	e7fe      	b.n	800eb68 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d002      	beq.n	800eb76 <xQueueGenericCreateStatic+0x4e>
 800eb70:	68bb      	ldr	r3, [r7, #8]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d001      	beq.n	800eb7a <xQueueGenericCreateStatic+0x52>
 800eb76:	2301      	movs	r3, #1
 800eb78:	e000      	b.n	800eb7c <xQueueGenericCreateStatic+0x54>
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d109      	bne.n	800eb94 <xQueueGenericCreateStatic+0x6c>
 800eb80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb84:	f383 8811 	msr	BASEPRI, r3
 800eb88:	f3bf 8f6f 	isb	sy
 800eb8c:	f3bf 8f4f 	dsb	sy
 800eb90:	623b      	str	r3, [r7, #32]
 800eb92:	e7fe      	b.n	800eb92 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d102      	bne.n	800eba0 <xQueueGenericCreateStatic+0x78>
 800eb9a:	68bb      	ldr	r3, [r7, #8]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d101      	bne.n	800eba4 <xQueueGenericCreateStatic+0x7c>
 800eba0:	2301      	movs	r3, #1
 800eba2:	e000      	b.n	800eba6 <xQueueGenericCreateStatic+0x7e>
 800eba4:	2300      	movs	r3, #0
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d109      	bne.n	800ebbe <xQueueGenericCreateStatic+0x96>
 800ebaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebae:	f383 8811 	msr	BASEPRI, r3
 800ebb2:	f3bf 8f6f 	isb	sy
 800ebb6:	f3bf 8f4f 	dsb	sy
 800ebba:	61fb      	str	r3, [r7, #28]
 800ebbc:	e7fe      	b.n	800ebbc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ebbe:	2350      	movs	r3, #80	; 0x50
 800ebc0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ebc2:	697b      	ldr	r3, [r7, #20]
 800ebc4:	2b50      	cmp	r3, #80	; 0x50
 800ebc6:	d009      	beq.n	800ebdc <xQueueGenericCreateStatic+0xb4>
 800ebc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebcc:	f383 8811 	msr	BASEPRI, r3
 800ebd0:	f3bf 8f6f 	isb	sy
 800ebd4:	f3bf 8f4f 	dsb	sy
 800ebd8:	61bb      	str	r3, [r7, #24]
 800ebda:	e7fe      	b.n	800ebda <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ebdc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ebe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d00d      	beq.n	800ec04 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ebe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebea:	2201      	movs	r2, #1
 800ebec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ebf0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ebf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf6:	9300      	str	r3, [sp, #0]
 800ebf8:	4613      	mov	r3, r2
 800ebfa:	687a      	ldr	r2, [r7, #4]
 800ebfc:	68b9      	ldr	r1, [r7, #8]
 800ebfe:	68f8      	ldr	r0, [r7, #12]
 800ec00:	f000 f844 	bl	800ec8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ec04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ec06:	4618      	mov	r0, r3
 800ec08:	3730      	adds	r7, #48	; 0x30
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}

0800ec0e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ec0e:	b580      	push	{r7, lr}
 800ec10:	b08a      	sub	sp, #40	; 0x28
 800ec12:	af02      	add	r7, sp, #8
 800ec14:	60f8      	str	r0, [r7, #12]
 800ec16:	60b9      	str	r1, [r7, #8]
 800ec18:	4613      	mov	r3, r2
 800ec1a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d109      	bne.n	800ec36 <xQueueGenericCreate+0x28>
 800ec22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec26:	f383 8811 	msr	BASEPRI, r3
 800ec2a:	f3bf 8f6f 	isb	sy
 800ec2e:	f3bf 8f4f 	dsb	sy
 800ec32:	613b      	str	r3, [r7, #16]
 800ec34:	e7fe      	b.n	800ec34 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ec36:	68bb      	ldr	r3, [r7, #8]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d102      	bne.n	800ec42 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	61fb      	str	r3, [r7, #28]
 800ec40:	e004      	b.n	800ec4c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	68ba      	ldr	r2, [r7, #8]
 800ec46:	fb02 f303 	mul.w	r3, r2, r3
 800ec4a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ec4c:	69fb      	ldr	r3, [r7, #28]
 800ec4e:	3350      	adds	r3, #80	; 0x50
 800ec50:	4618      	mov	r0, r3
 800ec52:	f002 fbdd 	bl	8011410 <pvPortMalloc>
 800ec56:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ec58:	69bb      	ldr	r3, [r7, #24]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d011      	beq.n	800ec82 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ec5e:	69bb      	ldr	r3, [r7, #24]
 800ec60:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	3350      	adds	r3, #80	; 0x50
 800ec66:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ec68:	69bb      	ldr	r3, [r7, #24]
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ec70:	79fa      	ldrb	r2, [r7, #7]
 800ec72:	69bb      	ldr	r3, [r7, #24]
 800ec74:	9300      	str	r3, [sp, #0]
 800ec76:	4613      	mov	r3, r2
 800ec78:	697a      	ldr	r2, [r7, #20]
 800ec7a:	68b9      	ldr	r1, [r7, #8]
 800ec7c:	68f8      	ldr	r0, [r7, #12]
 800ec7e:	f000 f805 	bl	800ec8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ec82:	69bb      	ldr	r3, [r7, #24]
	}
 800ec84:	4618      	mov	r0, r3
 800ec86:	3720      	adds	r7, #32
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	bd80      	pop	{r7, pc}

0800ec8c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b084      	sub	sp, #16
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	60f8      	str	r0, [r7, #12]
 800ec94:	60b9      	str	r1, [r7, #8]
 800ec96:	607a      	str	r2, [r7, #4]
 800ec98:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ec9a:	68bb      	ldr	r3, [r7, #8]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d103      	bne.n	800eca8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800eca0:	69bb      	ldr	r3, [r7, #24]
 800eca2:	69ba      	ldr	r2, [r7, #24]
 800eca4:	601a      	str	r2, [r3, #0]
 800eca6:	e002      	b.n	800ecae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800eca8:	69bb      	ldr	r3, [r7, #24]
 800ecaa:	687a      	ldr	r2, [r7, #4]
 800ecac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ecae:	69bb      	ldr	r3, [r7, #24]
 800ecb0:	68fa      	ldr	r2, [r7, #12]
 800ecb2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ecb4:	69bb      	ldr	r3, [r7, #24]
 800ecb6:	68ba      	ldr	r2, [r7, #8]
 800ecb8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ecba:	2101      	movs	r1, #1
 800ecbc:	69b8      	ldr	r0, [r7, #24]
 800ecbe:	f7ff fecb 	bl	800ea58 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ecc2:	69bb      	ldr	r3, [r7, #24]
 800ecc4:	78fa      	ldrb	r2, [r7, #3]
 800ecc6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ecca:	bf00      	nop
 800eccc:	3710      	adds	r7, #16
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}

0800ecd2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ecd2:	b580      	push	{r7, lr}
 800ecd4:	b082      	sub	sp, #8
 800ecd6:	af00      	add	r7, sp, #0
 800ecd8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d00e      	beq.n	800ecfe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2200      	movs	r2, #0
 800ece4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2200      	movs	r2, #0
 800ecea:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	2200      	movs	r2, #0
 800ecf0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	2100      	movs	r1, #0
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f000 f89f 	bl	800ee3c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ecfe:	bf00      	nop
 800ed00:	3708      	adds	r7, #8
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}

0800ed06 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ed06:	b580      	push	{r7, lr}
 800ed08:	b086      	sub	sp, #24
 800ed0a:	af00      	add	r7, sp, #0
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ed10:	2301      	movs	r3, #1
 800ed12:	617b      	str	r3, [r7, #20]
 800ed14:	2300      	movs	r3, #0
 800ed16:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ed18:	79fb      	ldrb	r3, [r7, #7]
 800ed1a:	461a      	mov	r2, r3
 800ed1c:	6939      	ldr	r1, [r7, #16]
 800ed1e:	6978      	ldr	r0, [r7, #20]
 800ed20:	f7ff ff75 	bl	800ec0e <xQueueGenericCreate>
 800ed24:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ed26:	68f8      	ldr	r0, [r7, #12]
 800ed28:	f7ff ffd3 	bl	800ecd2 <prvInitialiseMutex>

		return xNewQueue;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
	}
 800ed2e:	4618      	mov	r0, r3
 800ed30:	3718      	adds	r7, #24
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}

0800ed36 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ed36:	b580      	push	{r7, lr}
 800ed38:	b088      	sub	sp, #32
 800ed3a:	af02      	add	r7, sp, #8
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	6039      	str	r1, [r7, #0]
 800ed40:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ed42:	2301      	movs	r3, #1
 800ed44:	617b      	str	r3, [r7, #20]
 800ed46:	2300      	movs	r3, #0
 800ed48:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ed4a:	79fb      	ldrb	r3, [r7, #7]
 800ed4c:	9300      	str	r3, [sp, #0]
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	2200      	movs	r2, #0
 800ed52:	6939      	ldr	r1, [r7, #16]
 800ed54:	6978      	ldr	r0, [r7, #20]
 800ed56:	f7ff fee7 	bl	800eb28 <xQueueGenericCreateStatic>
 800ed5a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ed5c:	68f8      	ldr	r0, [r7, #12]
 800ed5e:	f7ff ffb8 	bl	800ecd2 <prvInitialiseMutex>

		return xNewQueue;
 800ed62:	68fb      	ldr	r3, [r7, #12]
	}
 800ed64:	4618      	mov	r0, r3
 800ed66:	3718      	adds	r7, #24
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	bd80      	pop	{r7, pc}

0800ed6c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800ed6c:	b590      	push	{r4, r7, lr}
 800ed6e:	b087      	sub	sp, #28
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800ed78:	693b      	ldr	r3, [r7, #16]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d109      	bne.n	800ed92 <xQueueGiveMutexRecursive+0x26>
 800ed7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed82:	f383 8811 	msr	BASEPRI, r3
 800ed86:	f3bf 8f6f 	isb	sy
 800ed8a:	f3bf 8f4f 	dsb	sy
 800ed8e:	60fb      	str	r3, [r7, #12]
 800ed90:	e7fe      	b.n	800ed90 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ed92:	693b      	ldr	r3, [r7, #16]
 800ed94:	689c      	ldr	r4, [r3, #8]
 800ed96:	f001 fbcd 	bl	8010534 <xTaskGetCurrentTaskHandle>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	429c      	cmp	r4, r3
 800ed9e:	d111      	bne.n	800edc4 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800eda0:	693b      	ldr	r3, [r7, #16]
 800eda2:	68db      	ldr	r3, [r3, #12]
 800eda4:	1e5a      	subs	r2, r3, #1
 800eda6:	693b      	ldr	r3, [r7, #16]
 800eda8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800edaa:	693b      	ldr	r3, [r7, #16]
 800edac:	68db      	ldr	r3, [r3, #12]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d105      	bne.n	800edbe <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800edb2:	2300      	movs	r3, #0
 800edb4:	2200      	movs	r2, #0
 800edb6:	2100      	movs	r1, #0
 800edb8:	6938      	ldr	r0, [r7, #16]
 800edba:	f000 f83f 	bl	800ee3c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800edbe:	2301      	movs	r3, #1
 800edc0:	617b      	str	r3, [r7, #20]
 800edc2:	e001      	b.n	800edc8 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800edc4:	2300      	movs	r3, #0
 800edc6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800edc8:	697b      	ldr	r3, [r7, #20]
	}
 800edca:	4618      	mov	r0, r3
 800edcc:	371c      	adds	r7, #28
 800edce:	46bd      	mov	sp, r7
 800edd0:	bd90      	pop	{r4, r7, pc}

0800edd2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800edd2:	b590      	push	{r4, r7, lr}
 800edd4:	b087      	sub	sp, #28
 800edd6:	af00      	add	r7, sp, #0
 800edd8:	6078      	str	r0, [r7, #4]
 800edda:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800ede0:	693b      	ldr	r3, [r7, #16]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d109      	bne.n	800edfa <xQueueTakeMutexRecursive+0x28>
 800ede6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edea:	f383 8811 	msr	BASEPRI, r3
 800edee:	f3bf 8f6f 	isb	sy
 800edf2:	f3bf 8f4f 	dsb	sy
 800edf6:	60fb      	str	r3, [r7, #12]
 800edf8:	e7fe      	b.n	800edf8 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800edfa:	693b      	ldr	r3, [r7, #16]
 800edfc:	689c      	ldr	r4, [r3, #8]
 800edfe:	f001 fb99 	bl	8010534 <xTaskGetCurrentTaskHandle>
 800ee02:	4603      	mov	r3, r0
 800ee04:	429c      	cmp	r4, r3
 800ee06:	d107      	bne.n	800ee18 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ee08:	693b      	ldr	r3, [r7, #16]
 800ee0a:	68db      	ldr	r3, [r3, #12]
 800ee0c:	1c5a      	adds	r2, r3, #1
 800ee0e:	693b      	ldr	r3, [r7, #16]
 800ee10:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800ee12:	2301      	movs	r3, #1
 800ee14:	617b      	str	r3, [r7, #20]
 800ee16:	e00c      	b.n	800ee32 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800ee18:	6839      	ldr	r1, [r7, #0]
 800ee1a:	6938      	ldr	r0, [r7, #16]
 800ee1c:	f000 fa78 	bl	800f310 <xQueueSemaphoreTake>
 800ee20:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800ee22:	697b      	ldr	r3, [r7, #20]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d004      	beq.n	800ee32 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ee28:	693b      	ldr	r3, [r7, #16]
 800ee2a:	68db      	ldr	r3, [r3, #12]
 800ee2c:	1c5a      	adds	r2, r3, #1
 800ee2e:	693b      	ldr	r3, [r7, #16]
 800ee30:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800ee32:	697b      	ldr	r3, [r7, #20]
	}
 800ee34:	4618      	mov	r0, r3
 800ee36:	371c      	adds	r7, #28
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	bd90      	pop	{r4, r7, pc}

0800ee3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b08e      	sub	sp, #56	; 0x38
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	60f8      	str	r0, [r7, #12]
 800ee44:	60b9      	str	r1, [r7, #8]
 800ee46:	607a      	str	r2, [r7, #4]
 800ee48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ee52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d109      	bne.n	800ee6c <xQueueGenericSend+0x30>
 800ee58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee5c:	f383 8811 	msr	BASEPRI, r3
 800ee60:	f3bf 8f6f 	isb	sy
 800ee64:	f3bf 8f4f 	dsb	sy
 800ee68:	62bb      	str	r3, [r7, #40]	; 0x28
 800ee6a:	e7fe      	b.n	800ee6a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d103      	bne.n	800ee7a <xQueueGenericSend+0x3e>
 800ee72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d101      	bne.n	800ee7e <xQueueGenericSend+0x42>
 800ee7a:	2301      	movs	r3, #1
 800ee7c:	e000      	b.n	800ee80 <xQueueGenericSend+0x44>
 800ee7e:	2300      	movs	r3, #0
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d109      	bne.n	800ee98 <xQueueGenericSend+0x5c>
 800ee84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee88:	f383 8811 	msr	BASEPRI, r3
 800ee8c:	f3bf 8f6f 	isb	sy
 800ee90:	f3bf 8f4f 	dsb	sy
 800ee94:	627b      	str	r3, [r7, #36]	; 0x24
 800ee96:	e7fe      	b.n	800ee96 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	2b02      	cmp	r3, #2
 800ee9c:	d103      	bne.n	800eea6 <xQueueGenericSend+0x6a>
 800ee9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eea2:	2b01      	cmp	r3, #1
 800eea4:	d101      	bne.n	800eeaa <xQueueGenericSend+0x6e>
 800eea6:	2301      	movs	r3, #1
 800eea8:	e000      	b.n	800eeac <xQueueGenericSend+0x70>
 800eeaa:	2300      	movs	r3, #0
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d109      	bne.n	800eec4 <xQueueGenericSend+0x88>
 800eeb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeb4:	f383 8811 	msr	BASEPRI, r3
 800eeb8:	f3bf 8f6f 	isb	sy
 800eebc:	f3bf 8f4f 	dsb	sy
 800eec0:	623b      	str	r3, [r7, #32]
 800eec2:	e7fe      	b.n	800eec2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eec4:	f001 fb46 	bl	8010554 <xTaskGetSchedulerState>
 800eec8:	4603      	mov	r3, r0
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d102      	bne.n	800eed4 <xQueueGenericSend+0x98>
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d101      	bne.n	800eed8 <xQueueGenericSend+0x9c>
 800eed4:	2301      	movs	r3, #1
 800eed6:	e000      	b.n	800eeda <xQueueGenericSend+0x9e>
 800eed8:	2300      	movs	r3, #0
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d109      	bne.n	800eef2 <xQueueGenericSend+0xb6>
 800eede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eee2:	f383 8811 	msr	BASEPRI, r3
 800eee6:	f3bf 8f6f 	isb	sy
 800eeea:	f3bf 8f4f 	dsb	sy
 800eeee:	61fb      	str	r3, [r7, #28]
 800eef0:	e7fe      	b.n	800eef0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eef2:	f002 f973 	bl	80111dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eefc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eefe:	429a      	cmp	r2, r3
 800ef00:	d302      	bcc.n	800ef08 <xQueueGenericSend+0xcc>
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	2b02      	cmp	r3, #2
 800ef06:	d129      	bne.n	800ef5c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ef08:	683a      	ldr	r2, [r7, #0]
 800ef0a:	68b9      	ldr	r1, [r7, #8]
 800ef0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef0e:	f000 fb9c 	bl	800f64a <prvCopyDataToQueue>
 800ef12:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ef14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d010      	beq.n	800ef3e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ef1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef1e:	3324      	adds	r3, #36	; 0x24
 800ef20:	4618      	mov	r0, r3
 800ef22:	f001 f951 	bl	80101c8 <xTaskRemoveFromEventList>
 800ef26:	4603      	mov	r3, r0
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d013      	beq.n	800ef54 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ef2c:	4b3f      	ldr	r3, [pc, #252]	; (800f02c <xQueueGenericSend+0x1f0>)
 800ef2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef32:	601a      	str	r2, [r3, #0]
 800ef34:	f3bf 8f4f 	dsb	sy
 800ef38:	f3bf 8f6f 	isb	sy
 800ef3c:	e00a      	b.n	800ef54 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ef3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d007      	beq.n	800ef54 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ef44:	4b39      	ldr	r3, [pc, #228]	; (800f02c <xQueueGenericSend+0x1f0>)
 800ef46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef4a:	601a      	str	r2, [r3, #0]
 800ef4c:	f3bf 8f4f 	dsb	sy
 800ef50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ef54:	f002 f970 	bl	8011238 <vPortExitCritical>
				return pdPASS;
 800ef58:	2301      	movs	r3, #1
 800ef5a:	e063      	b.n	800f024 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d103      	bne.n	800ef6a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ef62:	f002 f969 	bl	8011238 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ef66:	2300      	movs	r3, #0
 800ef68:	e05c      	b.n	800f024 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ef6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d106      	bne.n	800ef7e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ef70:	f107 0314 	add.w	r3, r7, #20
 800ef74:	4618      	mov	r0, r3
 800ef76:	f001 f989 	bl	801028c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ef7a:	2301      	movs	r3, #1
 800ef7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ef7e:	f002 f95b 	bl	8011238 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ef82:	f000 ff05 	bl	800fd90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ef86:	f002 f929 	bl	80111dc <vPortEnterCritical>
 800ef8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ef90:	b25b      	sxtb	r3, r3
 800ef92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef96:	d103      	bne.n	800efa0 <xQueueGenericSend+0x164>
 800ef98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800efa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efa2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800efa6:	b25b      	sxtb	r3, r3
 800efa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efac:	d103      	bne.n	800efb6 <xQueueGenericSend+0x17a>
 800efae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb0:	2200      	movs	r2, #0
 800efb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800efb6:	f002 f93f 	bl	8011238 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800efba:	1d3a      	adds	r2, r7, #4
 800efbc:	f107 0314 	add.w	r3, r7, #20
 800efc0:	4611      	mov	r1, r2
 800efc2:	4618      	mov	r0, r3
 800efc4:	f001 f978 	bl	80102b8 <xTaskCheckForTimeOut>
 800efc8:	4603      	mov	r3, r0
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d124      	bne.n	800f018 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800efce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800efd0:	f000 fc33 	bl	800f83a <prvIsQueueFull>
 800efd4:	4603      	mov	r3, r0
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d018      	beq.n	800f00c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800efda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efdc:	3310      	adds	r3, #16
 800efde:	687a      	ldr	r2, [r7, #4]
 800efe0:	4611      	mov	r1, r2
 800efe2:	4618      	mov	r0, r3
 800efe4:	f001 f8a2 	bl	801012c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800efe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800efea:	f000 fbbe 	bl	800f76a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800efee:	f000 fedd 	bl	800fdac <xTaskResumeAll>
 800eff2:	4603      	mov	r3, r0
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	f47f af7c 	bne.w	800eef2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800effa:	4b0c      	ldr	r3, [pc, #48]	; (800f02c <xQueueGenericSend+0x1f0>)
 800effc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f000:	601a      	str	r2, [r3, #0]
 800f002:	f3bf 8f4f 	dsb	sy
 800f006:	f3bf 8f6f 	isb	sy
 800f00a:	e772      	b.n	800eef2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f00c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f00e:	f000 fbac 	bl	800f76a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f012:	f000 fecb 	bl	800fdac <xTaskResumeAll>
 800f016:	e76c      	b.n	800eef2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f018:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f01a:	f000 fba6 	bl	800f76a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f01e:	f000 fec5 	bl	800fdac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f022:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f024:	4618      	mov	r0, r3
 800f026:	3738      	adds	r7, #56	; 0x38
 800f028:	46bd      	mov	sp, r7
 800f02a:	bd80      	pop	{r7, pc}
 800f02c:	e000ed04 	.word	0xe000ed04

0800f030 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b08e      	sub	sp, #56	; 0x38
 800f034:	af00      	add	r7, sp, #0
 800f036:	60f8      	str	r0, [r7, #12]
 800f038:	60b9      	str	r1, [r7, #8]
 800f03a:	607a      	str	r2, [r7, #4]
 800f03c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f044:	2b00      	cmp	r3, #0
 800f046:	d109      	bne.n	800f05c <xQueueGenericSendFromISR+0x2c>
 800f048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f04c:	f383 8811 	msr	BASEPRI, r3
 800f050:	f3bf 8f6f 	isb	sy
 800f054:	f3bf 8f4f 	dsb	sy
 800f058:	627b      	str	r3, [r7, #36]	; 0x24
 800f05a:	e7fe      	b.n	800f05a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d103      	bne.n	800f06a <xQueueGenericSendFromISR+0x3a>
 800f062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f066:	2b00      	cmp	r3, #0
 800f068:	d101      	bne.n	800f06e <xQueueGenericSendFromISR+0x3e>
 800f06a:	2301      	movs	r3, #1
 800f06c:	e000      	b.n	800f070 <xQueueGenericSendFromISR+0x40>
 800f06e:	2300      	movs	r3, #0
 800f070:	2b00      	cmp	r3, #0
 800f072:	d109      	bne.n	800f088 <xQueueGenericSendFromISR+0x58>
 800f074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f078:	f383 8811 	msr	BASEPRI, r3
 800f07c:	f3bf 8f6f 	isb	sy
 800f080:	f3bf 8f4f 	dsb	sy
 800f084:	623b      	str	r3, [r7, #32]
 800f086:	e7fe      	b.n	800f086 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	2b02      	cmp	r3, #2
 800f08c:	d103      	bne.n	800f096 <xQueueGenericSendFromISR+0x66>
 800f08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f092:	2b01      	cmp	r3, #1
 800f094:	d101      	bne.n	800f09a <xQueueGenericSendFromISR+0x6a>
 800f096:	2301      	movs	r3, #1
 800f098:	e000      	b.n	800f09c <xQueueGenericSendFromISR+0x6c>
 800f09a:	2300      	movs	r3, #0
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d109      	bne.n	800f0b4 <xQueueGenericSendFromISR+0x84>
 800f0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0a4:	f383 8811 	msr	BASEPRI, r3
 800f0a8:	f3bf 8f6f 	isb	sy
 800f0ac:	f3bf 8f4f 	dsb	sy
 800f0b0:	61fb      	str	r3, [r7, #28]
 800f0b2:	e7fe      	b.n	800f0b2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f0b4:	f002 f96e 	bl	8011394 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f0b8:	f3ef 8211 	mrs	r2, BASEPRI
 800f0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0c0:	f383 8811 	msr	BASEPRI, r3
 800f0c4:	f3bf 8f6f 	isb	sy
 800f0c8:	f3bf 8f4f 	dsb	sy
 800f0cc:	61ba      	str	r2, [r7, #24]
 800f0ce:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f0d0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f0d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0dc:	429a      	cmp	r2, r3
 800f0de:	d302      	bcc.n	800f0e6 <xQueueGenericSendFromISR+0xb6>
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	2b02      	cmp	r3, #2
 800f0e4:	d12c      	bne.n	800f140 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f0ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f0f0:	683a      	ldr	r2, [r7, #0]
 800f0f2:	68b9      	ldr	r1, [r7, #8]
 800f0f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0f6:	f000 faa8 	bl	800f64a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f0fa:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800f0fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f102:	d112      	bne.n	800f12a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d016      	beq.n	800f13a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f10e:	3324      	adds	r3, #36	; 0x24
 800f110:	4618      	mov	r0, r3
 800f112:	f001 f859 	bl	80101c8 <xTaskRemoveFromEventList>
 800f116:	4603      	mov	r3, r0
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d00e      	beq.n	800f13a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d00b      	beq.n	800f13a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	2201      	movs	r2, #1
 800f126:	601a      	str	r2, [r3, #0]
 800f128:	e007      	b.n	800f13a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f12a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f12e:	3301      	adds	r3, #1
 800f130:	b2db      	uxtb	r3, r3
 800f132:	b25a      	sxtb	r2, r3
 800f134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f136:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f13a:	2301      	movs	r3, #1
 800f13c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800f13e:	e001      	b.n	800f144 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f140:	2300      	movs	r3, #0
 800f142:	637b      	str	r3, [r7, #52]	; 0x34
 800f144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f146:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f148:	693b      	ldr	r3, [r7, #16]
 800f14a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f14e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f150:	4618      	mov	r0, r3
 800f152:	3738      	adds	r7, #56	; 0x38
 800f154:	46bd      	mov	sp, r7
 800f156:	bd80      	pop	{r7, pc}

0800f158 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b08c      	sub	sp, #48	; 0x30
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	60f8      	str	r0, [r7, #12]
 800f160:	60b9      	str	r1, [r7, #8]
 800f162:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f164:	2300      	movs	r3, #0
 800f166:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d109      	bne.n	800f186 <xQueueReceive+0x2e>
	__asm volatile
 800f172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f176:	f383 8811 	msr	BASEPRI, r3
 800f17a:	f3bf 8f6f 	isb	sy
 800f17e:	f3bf 8f4f 	dsb	sy
 800f182:	623b      	str	r3, [r7, #32]
 800f184:	e7fe      	b.n	800f184 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d103      	bne.n	800f194 <xQueueReceive+0x3c>
 800f18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f18e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f190:	2b00      	cmp	r3, #0
 800f192:	d101      	bne.n	800f198 <xQueueReceive+0x40>
 800f194:	2301      	movs	r3, #1
 800f196:	e000      	b.n	800f19a <xQueueReceive+0x42>
 800f198:	2300      	movs	r3, #0
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d109      	bne.n	800f1b2 <xQueueReceive+0x5a>
 800f19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1a2:	f383 8811 	msr	BASEPRI, r3
 800f1a6:	f3bf 8f6f 	isb	sy
 800f1aa:	f3bf 8f4f 	dsb	sy
 800f1ae:	61fb      	str	r3, [r7, #28]
 800f1b0:	e7fe      	b.n	800f1b0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f1b2:	f001 f9cf 	bl	8010554 <xTaskGetSchedulerState>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d102      	bne.n	800f1c2 <xQueueReceive+0x6a>
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d101      	bne.n	800f1c6 <xQueueReceive+0x6e>
 800f1c2:	2301      	movs	r3, #1
 800f1c4:	e000      	b.n	800f1c8 <xQueueReceive+0x70>
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d109      	bne.n	800f1e0 <xQueueReceive+0x88>
 800f1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1d0:	f383 8811 	msr	BASEPRI, r3
 800f1d4:	f3bf 8f6f 	isb	sy
 800f1d8:	f3bf 8f4f 	dsb	sy
 800f1dc:	61bb      	str	r3, [r7, #24]
 800f1de:	e7fe      	b.n	800f1de <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f1e0:	f001 fffc 	bl	80111dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1e8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d01f      	beq.n	800f230 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f1f0:	68b9      	ldr	r1, [r7, #8]
 800f1f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1f4:	f000 fa93 	bl	800f71e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1fa:	1e5a      	subs	r2, r3, #1
 800f1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1fe:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f202:	691b      	ldr	r3, [r3, #16]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d00f      	beq.n	800f228 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f20a:	3310      	adds	r3, #16
 800f20c:	4618      	mov	r0, r3
 800f20e:	f000 ffdb 	bl	80101c8 <xTaskRemoveFromEventList>
 800f212:	4603      	mov	r3, r0
 800f214:	2b00      	cmp	r3, #0
 800f216:	d007      	beq.n	800f228 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f218:	4b3c      	ldr	r3, [pc, #240]	; (800f30c <xQueueReceive+0x1b4>)
 800f21a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f21e:	601a      	str	r2, [r3, #0]
 800f220:	f3bf 8f4f 	dsb	sy
 800f224:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f228:	f002 f806 	bl	8011238 <vPortExitCritical>
				return pdPASS;
 800f22c:	2301      	movs	r3, #1
 800f22e:	e069      	b.n	800f304 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d103      	bne.n	800f23e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f236:	f001 ffff 	bl	8011238 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f23a:	2300      	movs	r3, #0
 800f23c:	e062      	b.n	800f304 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f240:	2b00      	cmp	r3, #0
 800f242:	d106      	bne.n	800f252 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f244:	f107 0310 	add.w	r3, r7, #16
 800f248:	4618      	mov	r0, r3
 800f24a:	f001 f81f 	bl	801028c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f24e:	2301      	movs	r3, #1
 800f250:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f252:	f001 fff1 	bl	8011238 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f256:	f000 fd9b 	bl	800fd90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f25a:	f001 ffbf 	bl	80111dc <vPortEnterCritical>
 800f25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f260:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f264:	b25b      	sxtb	r3, r3
 800f266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f26a:	d103      	bne.n	800f274 <xQueueReceive+0x11c>
 800f26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f26e:	2200      	movs	r2, #0
 800f270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f276:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f27a:	b25b      	sxtb	r3, r3
 800f27c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f280:	d103      	bne.n	800f28a <xQueueReceive+0x132>
 800f282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f284:	2200      	movs	r2, #0
 800f286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f28a:	f001 ffd5 	bl	8011238 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f28e:	1d3a      	adds	r2, r7, #4
 800f290:	f107 0310 	add.w	r3, r7, #16
 800f294:	4611      	mov	r1, r2
 800f296:	4618      	mov	r0, r3
 800f298:	f001 f80e 	bl	80102b8 <xTaskCheckForTimeOut>
 800f29c:	4603      	mov	r3, r0
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d123      	bne.n	800f2ea <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f2a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2a4:	f000 fab3 	bl	800f80e <prvIsQueueEmpty>
 800f2a8:	4603      	mov	r3, r0
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d017      	beq.n	800f2de <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2b0:	3324      	adds	r3, #36	; 0x24
 800f2b2:	687a      	ldr	r2, [r7, #4]
 800f2b4:	4611      	mov	r1, r2
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	f000 ff38 	bl	801012c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f2bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2be:	f000 fa54 	bl	800f76a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f2c2:	f000 fd73 	bl	800fdac <xTaskResumeAll>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d189      	bne.n	800f1e0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800f2cc:	4b0f      	ldr	r3, [pc, #60]	; (800f30c <xQueueReceive+0x1b4>)
 800f2ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2d2:	601a      	str	r2, [r3, #0]
 800f2d4:	f3bf 8f4f 	dsb	sy
 800f2d8:	f3bf 8f6f 	isb	sy
 800f2dc:	e780      	b.n	800f1e0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f2de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2e0:	f000 fa43 	bl	800f76a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f2e4:	f000 fd62 	bl	800fdac <xTaskResumeAll>
 800f2e8:	e77a      	b.n	800f1e0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f2ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2ec:	f000 fa3d 	bl	800f76a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f2f0:	f000 fd5c 	bl	800fdac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f2f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2f6:	f000 fa8a 	bl	800f80e <prvIsQueueEmpty>
 800f2fa:	4603      	mov	r3, r0
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	f43f af6f 	beq.w	800f1e0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f302:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f304:	4618      	mov	r0, r3
 800f306:	3730      	adds	r7, #48	; 0x30
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd80      	pop	{r7, pc}
 800f30c:	e000ed04 	.word	0xe000ed04

0800f310 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b08e      	sub	sp, #56	; 0x38
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
 800f318:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f31a:	2300      	movs	r3, #0
 800f31c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f322:	2300      	movs	r3, #0
 800f324:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d109      	bne.n	800f340 <xQueueSemaphoreTake+0x30>
 800f32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f330:	f383 8811 	msr	BASEPRI, r3
 800f334:	f3bf 8f6f 	isb	sy
 800f338:	f3bf 8f4f 	dsb	sy
 800f33c:	623b      	str	r3, [r7, #32]
 800f33e:	e7fe      	b.n	800f33e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f344:	2b00      	cmp	r3, #0
 800f346:	d009      	beq.n	800f35c <xQueueSemaphoreTake+0x4c>
 800f348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f34c:	f383 8811 	msr	BASEPRI, r3
 800f350:	f3bf 8f6f 	isb	sy
 800f354:	f3bf 8f4f 	dsb	sy
 800f358:	61fb      	str	r3, [r7, #28]
 800f35a:	e7fe      	b.n	800f35a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f35c:	f001 f8fa 	bl	8010554 <xTaskGetSchedulerState>
 800f360:	4603      	mov	r3, r0
 800f362:	2b00      	cmp	r3, #0
 800f364:	d102      	bne.n	800f36c <xQueueSemaphoreTake+0x5c>
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d101      	bne.n	800f370 <xQueueSemaphoreTake+0x60>
 800f36c:	2301      	movs	r3, #1
 800f36e:	e000      	b.n	800f372 <xQueueSemaphoreTake+0x62>
 800f370:	2300      	movs	r3, #0
 800f372:	2b00      	cmp	r3, #0
 800f374:	d109      	bne.n	800f38a <xQueueSemaphoreTake+0x7a>
 800f376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f37a:	f383 8811 	msr	BASEPRI, r3
 800f37e:	f3bf 8f6f 	isb	sy
 800f382:	f3bf 8f4f 	dsb	sy
 800f386:	61bb      	str	r3, [r7, #24]
 800f388:	e7fe      	b.n	800f388 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f38a:	f001 ff27 	bl	80111dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f392:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f396:	2b00      	cmp	r3, #0
 800f398:	d024      	beq.n	800f3e4 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f39c:	1e5a      	subs	r2, r3, #1
 800f39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3a0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d104      	bne.n	800f3b4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f3aa:	f001 fa45 	bl	8010838 <pvTaskIncrementMutexHeldCount>
 800f3ae:	4602      	mov	r2, r0
 800f3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b6:	691b      	ldr	r3, [r3, #16]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d00f      	beq.n	800f3dc <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3be:	3310      	adds	r3, #16
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	f000 ff01 	bl	80101c8 <xTaskRemoveFromEventList>
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d007      	beq.n	800f3dc <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f3cc:	4b53      	ldr	r3, [pc, #332]	; (800f51c <xQueueSemaphoreTake+0x20c>)
 800f3ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3d2:	601a      	str	r2, [r3, #0]
 800f3d4:	f3bf 8f4f 	dsb	sy
 800f3d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f3dc:	f001 ff2c 	bl	8011238 <vPortExitCritical>
				return pdPASS;
 800f3e0:	2301      	movs	r3, #1
 800f3e2:	e096      	b.n	800f512 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d110      	bne.n	800f40c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d009      	beq.n	800f404 <xQueueSemaphoreTake+0xf4>
 800f3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3f4:	f383 8811 	msr	BASEPRI, r3
 800f3f8:	f3bf 8f6f 	isb	sy
 800f3fc:	f3bf 8f4f 	dsb	sy
 800f400:	617b      	str	r3, [r7, #20]
 800f402:	e7fe      	b.n	800f402 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f404:	f001 ff18 	bl	8011238 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f408:	2300      	movs	r3, #0
 800f40a:	e082      	b.n	800f512 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f40c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d106      	bne.n	800f420 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f412:	f107 030c 	add.w	r3, r7, #12
 800f416:	4618      	mov	r0, r3
 800f418:	f000 ff38 	bl	801028c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f41c:	2301      	movs	r3, #1
 800f41e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f420:	f001 ff0a 	bl	8011238 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f424:	f000 fcb4 	bl	800fd90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f428:	f001 fed8 	bl	80111dc <vPortEnterCritical>
 800f42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f42e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f432:	b25b      	sxtb	r3, r3
 800f434:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f438:	d103      	bne.n	800f442 <xQueueSemaphoreTake+0x132>
 800f43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f43c:	2200      	movs	r2, #0
 800f43e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f444:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f448:	b25b      	sxtb	r3, r3
 800f44a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f44e:	d103      	bne.n	800f458 <xQueueSemaphoreTake+0x148>
 800f450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f452:	2200      	movs	r2, #0
 800f454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f458:	f001 feee 	bl	8011238 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f45c:	463a      	mov	r2, r7
 800f45e:	f107 030c 	add.w	r3, r7, #12
 800f462:	4611      	mov	r1, r2
 800f464:	4618      	mov	r0, r3
 800f466:	f000 ff27 	bl	80102b8 <xTaskCheckForTimeOut>
 800f46a:	4603      	mov	r3, r0
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d132      	bne.n	800f4d6 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f470:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f472:	f000 f9cc 	bl	800f80e <prvIsQueueEmpty>
 800f476:	4603      	mov	r3, r0
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d026      	beq.n	800f4ca <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d109      	bne.n	800f498 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800f484:	f001 feaa 	bl	80111dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f48a:	689b      	ldr	r3, [r3, #8]
 800f48c:	4618      	mov	r0, r3
 800f48e:	f001 f87f 	bl	8010590 <xTaskPriorityInherit>
 800f492:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f494:	f001 fed0 	bl	8011238 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f49a:	3324      	adds	r3, #36	; 0x24
 800f49c:	683a      	ldr	r2, [r7, #0]
 800f49e:	4611      	mov	r1, r2
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	f000 fe43 	bl	801012c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f4a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f4a8:	f000 f95f 	bl	800f76a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f4ac:	f000 fc7e 	bl	800fdac <xTaskResumeAll>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	f47f af69 	bne.w	800f38a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800f4b8:	4b18      	ldr	r3, [pc, #96]	; (800f51c <xQueueSemaphoreTake+0x20c>)
 800f4ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f4be:	601a      	str	r2, [r3, #0]
 800f4c0:	f3bf 8f4f 	dsb	sy
 800f4c4:	f3bf 8f6f 	isb	sy
 800f4c8:	e75f      	b.n	800f38a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f4ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f4cc:	f000 f94d 	bl	800f76a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f4d0:	f000 fc6c 	bl	800fdac <xTaskResumeAll>
 800f4d4:	e759      	b.n	800f38a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f4d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f4d8:	f000 f947 	bl	800f76a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f4dc:	f000 fc66 	bl	800fdac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f4e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f4e2:	f000 f994 	bl	800f80e <prvIsQueueEmpty>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	f43f af4e 	beq.w	800f38a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d00d      	beq.n	800f510 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800f4f4:	f001 fe72 	bl	80111dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f4f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f4fa:	f000 f88e 	bl	800f61a <prvGetDisinheritPriorityAfterTimeout>
 800f4fe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f502:	689b      	ldr	r3, [r3, #8]
 800f504:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f506:	4618      	mov	r0, r3
 800f508:	f001 f916 	bl	8010738 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f50c:	f001 fe94 	bl	8011238 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f510:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f512:	4618      	mov	r0, r3
 800f514:	3738      	adds	r7, #56	; 0x38
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}
 800f51a:	bf00      	nop
 800f51c:	e000ed04 	.word	0xe000ed04

0800f520 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b08e      	sub	sp, #56	; 0x38
 800f524:	af00      	add	r7, sp, #0
 800f526:	60f8      	str	r0, [r7, #12]
 800f528:	60b9      	str	r1, [r7, #8]
 800f52a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f532:	2b00      	cmp	r3, #0
 800f534:	d109      	bne.n	800f54a <xQueueReceiveFromISR+0x2a>
 800f536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f53a:	f383 8811 	msr	BASEPRI, r3
 800f53e:	f3bf 8f6f 	isb	sy
 800f542:	f3bf 8f4f 	dsb	sy
 800f546:	623b      	str	r3, [r7, #32]
 800f548:	e7fe      	b.n	800f548 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d103      	bne.n	800f558 <xQueueReceiveFromISR+0x38>
 800f550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f554:	2b00      	cmp	r3, #0
 800f556:	d101      	bne.n	800f55c <xQueueReceiveFromISR+0x3c>
 800f558:	2301      	movs	r3, #1
 800f55a:	e000      	b.n	800f55e <xQueueReceiveFromISR+0x3e>
 800f55c:	2300      	movs	r3, #0
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d109      	bne.n	800f576 <xQueueReceiveFromISR+0x56>
 800f562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f566:	f383 8811 	msr	BASEPRI, r3
 800f56a:	f3bf 8f6f 	isb	sy
 800f56e:	f3bf 8f4f 	dsb	sy
 800f572:	61fb      	str	r3, [r7, #28]
 800f574:	e7fe      	b.n	800f574 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f576:	f001 ff0d 	bl	8011394 <vPortValidateInterruptPriority>
	__asm volatile
 800f57a:	f3ef 8211 	mrs	r2, BASEPRI
 800f57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f582:	f383 8811 	msr	BASEPRI, r3
 800f586:	f3bf 8f6f 	isb	sy
 800f58a:	f3bf 8f4f 	dsb	sy
 800f58e:	61ba      	str	r2, [r7, #24]
 800f590:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f592:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f594:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f59a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d02f      	beq.n	800f602 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f5a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f5ac:	68b9      	ldr	r1, [r7, #8]
 800f5ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f5b0:	f000 f8b5 	bl	800f71e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5b6:	1e5a      	subs	r2, r3, #1
 800f5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f5bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f5c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5c4:	d112      	bne.n	800f5ec <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5c8:	691b      	ldr	r3, [r3, #16]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d016      	beq.n	800f5fc <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5d0:	3310      	adds	r3, #16
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	f000 fdf8 	bl	80101c8 <xTaskRemoveFromEventList>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d00e      	beq.n	800f5fc <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d00b      	beq.n	800f5fc <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2201      	movs	r2, #1
 800f5e8:	601a      	str	r2, [r3, #0]
 800f5ea:	e007      	b.n	800f5fc <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f5ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f5f0:	3301      	adds	r3, #1
 800f5f2:	b2db      	uxtb	r3, r3
 800f5f4:	b25a      	sxtb	r2, r3
 800f5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f5fc:	2301      	movs	r3, #1
 800f5fe:	637b      	str	r3, [r7, #52]	; 0x34
 800f600:	e001      	b.n	800f606 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800f602:	2300      	movs	r3, #0
 800f604:	637b      	str	r3, [r7, #52]	; 0x34
 800f606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f608:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f60a:	693b      	ldr	r3, [r7, #16]
 800f60c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f612:	4618      	mov	r0, r3
 800f614:	3738      	adds	r7, #56	; 0x38
 800f616:	46bd      	mov	sp, r7
 800f618:	bd80      	pop	{r7, pc}

0800f61a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f61a:	b480      	push	{r7}
 800f61c:	b085      	sub	sp, #20
 800f61e:	af00      	add	r7, sp, #0
 800f620:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f626:	2b00      	cmp	r3, #0
 800f628:	d006      	beq.n	800f638 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800f634:	60fb      	str	r3, [r7, #12]
 800f636:	e001      	b.n	800f63c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f638:	2300      	movs	r3, #0
 800f63a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f63c:	68fb      	ldr	r3, [r7, #12]
	}
 800f63e:	4618      	mov	r0, r3
 800f640:	3714      	adds	r7, #20
 800f642:	46bd      	mov	sp, r7
 800f644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f648:	4770      	bx	lr

0800f64a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f64a:	b580      	push	{r7, lr}
 800f64c:	b086      	sub	sp, #24
 800f64e:	af00      	add	r7, sp, #0
 800f650:	60f8      	str	r0, [r7, #12]
 800f652:	60b9      	str	r1, [r7, #8]
 800f654:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f656:	2300      	movs	r3, #0
 800f658:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f65e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f664:	2b00      	cmp	r3, #0
 800f666:	d10d      	bne.n	800f684 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d14d      	bne.n	800f70c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	689b      	ldr	r3, [r3, #8]
 800f674:	4618      	mov	r0, r3
 800f676:	f000 fff3 	bl	8010660 <xTaskPriorityDisinherit>
 800f67a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	2200      	movs	r2, #0
 800f680:	609a      	str	r2, [r3, #8]
 800f682:	e043      	b.n	800f70c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d119      	bne.n	800f6be <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	6858      	ldr	r0, [r3, #4]
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f692:	461a      	mov	r2, r3
 800f694:	68b9      	ldr	r1, [r7, #8]
 800f696:	f002 fbe7 	bl	8011e68 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	685a      	ldr	r2, [r3, #4]
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6a2:	441a      	add	r2, r3
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	685a      	ldr	r2, [r3, #4]
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	689b      	ldr	r3, [r3, #8]
 800f6b0:	429a      	cmp	r2, r3
 800f6b2:	d32b      	bcc.n	800f70c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	681a      	ldr	r2, [r3, #0]
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	605a      	str	r2, [r3, #4]
 800f6bc:	e026      	b.n	800f70c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	68d8      	ldr	r0, [r3, #12]
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6c6:	461a      	mov	r2, r3
 800f6c8:	68b9      	ldr	r1, [r7, #8]
 800f6ca:	f002 fbcd 	bl	8011e68 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	68da      	ldr	r2, [r3, #12]
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6d6:	425b      	negs	r3, r3
 800f6d8:	441a      	add	r2, r3
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	68da      	ldr	r2, [r3, #12]
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	429a      	cmp	r2, r3
 800f6e8:	d207      	bcs.n	800f6fa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	689a      	ldr	r2, [r3, #8]
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6f2:	425b      	negs	r3, r3
 800f6f4:	441a      	add	r2, r3
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	2b02      	cmp	r3, #2
 800f6fe:	d105      	bne.n	800f70c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f700:	693b      	ldr	r3, [r7, #16]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d002      	beq.n	800f70c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f706:	693b      	ldr	r3, [r7, #16]
 800f708:	3b01      	subs	r3, #1
 800f70a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f70c:	693b      	ldr	r3, [r7, #16]
 800f70e:	1c5a      	adds	r2, r3, #1
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f714:	697b      	ldr	r3, [r7, #20]
}
 800f716:	4618      	mov	r0, r3
 800f718:	3718      	adds	r7, #24
 800f71a:	46bd      	mov	sp, r7
 800f71c:	bd80      	pop	{r7, pc}

0800f71e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f71e:	b580      	push	{r7, lr}
 800f720:	b082      	sub	sp, #8
 800f722:	af00      	add	r7, sp, #0
 800f724:	6078      	str	r0, [r7, #4]
 800f726:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d018      	beq.n	800f762 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	68da      	ldr	r2, [r3, #12]
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f738:	441a      	add	r2, r3
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	68da      	ldr	r2, [r3, #12]
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	689b      	ldr	r3, [r3, #8]
 800f746:	429a      	cmp	r2, r3
 800f748:	d303      	bcc.n	800f752 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681a      	ldr	r2, [r3, #0]
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	68d9      	ldr	r1, [r3, #12]
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f75a:	461a      	mov	r2, r3
 800f75c:	6838      	ldr	r0, [r7, #0]
 800f75e:	f002 fb83 	bl	8011e68 <memcpy>
	}
}
 800f762:	bf00      	nop
 800f764:	3708      	adds	r7, #8
 800f766:	46bd      	mov	sp, r7
 800f768:	bd80      	pop	{r7, pc}

0800f76a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f76a:	b580      	push	{r7, lr}
 800f76c:	b084      	sub	sp, #16
 800f76e:	af00      	add	r7, sp, #0
 800f770:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f772:	f001 fd33 	bl	80111dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f77c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f77e:	e011      	b.n	800f7a4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f784:	2b00      	cmp	r3, #0
 800f786:	d012      	beq.n	800f7ae <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	3324      	adds	r3, #36	; 0x24
 800f78c:	4618      	mov	r0, r3
 800f78e:	f000 fd1b 	bl	80101c8 <xTaskRemoveFromEventList>
 800f792:	4603      	mov	r3, r0
 800f794:	2b00      	cmp	r3, #0
 800f796:	d001      	beq.n	800f79c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f798:	f000 fdee 	bl	8010378 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f79c:	7bfb      	ldrb	r3, [r7, #15]
 800f79e:	3b01      	subs	r3, #1
 800f7a0:	b2db      	uxtb	r3, r3
 800f7a2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f7a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	dce9      	bgt.n	800f780 <prvUnlockQueue+0x16>
 800f7ac:	e000      	b.n	800f7b0 <prvUnlockQueue+0x46>
					break;
 800f7ae:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	22ff      	movs	r2, #255	; 0xff
 800f7b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f7b8:	f001 fd3e 	bl	8011238 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f7bc:	f001 fd0e 	bl	80111dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f7c6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f7c8:	e011      	b.n	800f7ee <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	691b      	ldr	r3, [r3, #16]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d012      	beq.n	800f7f8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	3310      	adds	r3, #16
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f000 fcf6 	bl	80101c8 <xTaskRemoveFromEventList>
 800f7dc:	4603      	mov	r3, r0
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d001      	beq.n	800f7e6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f7e2:	f000 fdc9 	bl	8010378 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f7e6:	7bbb      	ldrb	r3, [r7, #14]
 800f7e8:	3b01      	subs	r3, #1
 800f7ea:	b2db      	uxtb	r3, r3
 800f7ec:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f7ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	dce9      	bgt.n	800f7ca <prvUnlockQueue+0x60>
 800f7f6:	e000      	b.n	800f7fa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f7f8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	22ff      	movs	r2, #255	; 0xff
 800f7fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f802:	f001 fd19 	bl	8011238 <vPortExitCritical>
}
 800f806:	bf00      	nop
 800f808:	3710      	adds	r7, #16
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}

0800f80e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f80e:	b580      	push	{r7, lr}
 800f810:	b084      	sub	sp, #16
 800f812:	af00      	add	r7, sp, #0
 800f814:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f816:	f001 fce1 	bl	80111dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d102      	bne.n	800f828 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f822:	2301      	movs	r3, #1
 800f824:	60fb      	str	r3, [r7, #12]
 800f826:	e001      	b.n	800f82c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f828:	2300      	movs	r3, #0
 800f82a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f82c:	f001 fd04 	bl	8011238 <vPortExitCritical>

	return xReturn;
 800f830:	68fb      	ldr	r3, [r7, #12]
}
 800f832:	4618      	mov	r0, r3
 800f834:	3710      	adds	r7, #16
 800f836:	46bd      	mov	sp, r7
 800f838:	bd80      	pop	{r7, pc}

0800f83a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f83a:	b580      	push	{r7, lr}
 800f83c:	b084      	sub	sp, #16
 800f83e:	af00      	add	r7, sp, #0
 800f840:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f842:	f001 fccb 	bl	80111dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f84e:	429a      	cmp	r2, r3
 800f850:	d102      	bne.n	800f858 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f852:	2301      	movs	r3, #1
 800f854:	60fb      	str	r3, [r7, #12]
 800f856:	e001      	b.n	800f85c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f858:	2300      	movs	r3, #0
 800f85a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f85c:	f001 fcec 	bl	8011238 <vPortExitCritical>

	return xReturn;
 800f860:	68fb      	ldr	r3, [r7, #12]
}
 800f862:	4618      	mov	r0, r3
 800f864:	3710      	adds	r7, #16
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}
	...

0800f86c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f86c:	b480      	push	{r7}
 800f86e:	b085      	sub	sp, #20
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
 800f874:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f876:	2300      	movs	r3, #0
 800f878:	60fb      	str	r3, [r7, #12]
 800f87a:	e014      	b.n	800f8a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f87c:	4a0e      	ldr	r2, [pc, #56]	; (800f8b8 <vQueueAddToRegistry+0x4c>)
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d10b      	bne.n	800f8a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f888:	490b      	ldr	r1, [pc, #44]	; (800f8b8 <vQueueAddToRegistry+0x4c>)
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	683a      	ldr	r2, [r7, #0]
 800f88e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f892:	4a09      	ldr	r2, [pc, #36]	; (800f8b8 <vQueueAddToRegistry+0x4c>)
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	00db      	lsls	r3, r3, #3
 800f898:	4413      	add	r3, r2
 800f89a:	687a      	ldr	r2, [r7, #4]
 800f89c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f89e:	e005      	b.n	800f8ac <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	3301      	adds	r3, #1
 800f8a4:	60fb      	str	r3, [r7, #12]
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	2b07      	cmp	r3, #7
 800f8aa:	d9e7      	bls.n	800f87c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f8ac:	bf00      	nop
 800f8ae:	3714      	adds	r7, #20
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b6:	4770      	bx	lr
 800f8b8:	20004fa8 	.word	0x20004fa8

0800f8bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b086      	sub	sp, #24
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	60f8      	str	r0, [r7, #12]
 800f8c4:	60b9      	str	r1, [r7, #8]
 800f8c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f8cc:	f001 fc86 	bl	80111dc <vPortEnterCritical>
 800f8d0:	697b      	ldr	r3, [r7, #20]
 800f8d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f8d6:	b25b      	sxtb	r3, r3
 800f8d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8dc:	d103      	bne.n	800f8e6 <vQueueWaitForMessageRestricted+0x2a>
 800f8de:	697b      	ldr	r3, [r7, #20]
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f8e6:	697b      	ldr	r3, [r7, #20]
 800f8e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f8ec:	b25b      	sxtb	r3, r3
 800f8ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8f2:	d103      	bne.n	800f8fc <vQueueWaitForMessageRestricted+0x40>
 800f8f4:	697b      	ldr	r3, [r7, #20]
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f8fc:	f001 fc9c 	bl	8011238 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f900:	697b      	ldr	r3, [r7, #20]
 800f902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f904:	2b00      	cmp	r3, #0
 800f906:	d106      	bne.n	800f916 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f908:	697b      	ldr	r3, [r7, #20]
 800f90a:	3324      	adds	r3, #36	; 0x24
 800f90c:	687a      	ldr	r2, [r7, #4]
 800f90e:	68b9      	ldr	r1, [r7, #8]
 800f910:	4618      	mov	r0, r3
 800f912:	f000 fc2f 	bl	8010174 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f916:	6978      	ldr	r0, [r7, #20]
 800f918:	f7ff ff27 	bl	800f76a <prvUnlockQueue>
	}
 800f91c:	bf00      	nop
 800f91e:	3718      	adds	r7, #24
 800f920:	46bd      	mov	sp, r7
 800f922:	bd80      	pop	{r7, pc}

0800f924 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f924:	b580      	push	{r7, lr}
 800f926:	b08e      	sub	sp, #56	; 0x38
 800f928:	af04      	add	r7, sp, #16
 800f92a:	60f8      	str	r0, [r7, #12]
 800f92c:	60b9      	str	r1, [r7, #8]
 800f92e:	607a      	str	r2, [r7, #4]
 800f930:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f934:	2b00      	cmp	r3, #0
 800f936:	d109      	bne.n	800f94c <xTaskCreateStatic+0x28>
	__asm volatile
 800f938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f93c:	f383 8811 	msr	BASEPRI, r3
 800f940:	f3bf 8f6f 	isb	sy
 800f944:	f3bf 8f4f 	dsb	sy
 800f948:	623b      	str	r3, [r7, #32]
 800f94a:	e7fe      	b.n	800f94a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800f94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d109      	bne.n	800f966 <xTaskCreateStatic+0x42>
 800f952:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f956:	f383 8811 	msr	BASEPRI, r3
 800f95a:	f3bf 8f6f 	isb	sy
 800f95e:	f3bf 8f4f 	dsb	sy
 800f962:	61fb      	str	r3, [r7, #28]
 800f964:	e7fe      	b.n	800f964 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f966:	235c      	movs	r3, #92	; 0x5c
 800f968:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f96a:	693b      	ldr	r3, [r7, #16]
 800f96c:	2b5c      	cmp	r3, #92	; 0x5c
 800f96e:	d009      	beq.n	800f984 <xTaskCreateStatic+0x60>
 800f970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f974:	f383 8811 	msr	BASEPRI, r3
 800f978:	f3bf 8f6f 	isb	sy
 800f97c:	f3bf 8f4f 	dsb	sy
 800f980:	61bb      	str	r3, [r7, #24]
 800f982:	e7fe      	b.n	800f982 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f984:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d01e      	beq.n	800f9ca <xTaskCreateStatic+0xa6>
 800f98c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d01b      	beq.n	800f9ca <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f994:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f998:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f99a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f99e:	2202      	movs	r2, #2
 800f9a0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	9303      	str	r3, [sp, #12]
 800f9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9aa:	9302      	str	r3, [sp, #8]
 800f9ac:	f107 0314 	add.w	r3, r7, #20
 800f9b0:	9301      	str	r3, [sp, #4]
 800f9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9b4:	9300      	str	r3, [sp, #0]
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	687a      	ldr	r2, [r7, #4]
 800f9ba:	68b9      	ldr	r1, [r7, #8]
 800f9bc:	68f8      	ldr	r0, [r7, #12]
 800f9be:	f000 f850 	bl	800fa62 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f9c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f9c4:	f000 f8dc 	bl	800fb80 <prvAddNewTaskToReadyList>
 800f9c8:	e001      	b.n	800f9ce <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f9ce:	697b      	ldr	r3, [r7, #20]
	}
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	3728      	adds	r7, #40	; 0x28
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd80      	pop	{r7, pc}

0800f9d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b08c      	sub	sp, #48	; 0x30
 800f9dc:	af04      	add	r7, sp, #16
 800f9de:	60f8      	str	r0, [r7, #12]
 800f9e0:	60b9      	str	r1, [r7, #8]
 800f9e2:	603b      	str	r3, [r7, #0]
 800f9e4:	4613      	mov	r3, r2
 800f9e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f9e8:	88fb      	ldrh	r3, [r7, #6]
 800f9ea:	009b      	lsls	r3, r3, #2
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	f001 fd0f 	bl	8011410 <pvPortMalloc>
 800f9f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f9f4:	697b      	ldr	r3, [r7, #20]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d00e      	beq.n	800fa18 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f9fa:	205c      	movs	r0, #92	; 0x5c
 800f9fc:	f001 fd08 	bl	8011410 <pvPortMalloc>
 800fa00:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fa02:	69fb      	ldr	r3, [r7, #28]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d003      	beq.n	800fa10 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fa08:	69fb      	ldr	r3, [r7, #28]
 800fa0a:	697a      	ldr	r2, [r7, #20]
 800fa0c:	631a      	str	r2, [r3, #48]	; 0x30
 800fa0e:	e005      	b.n	800fa1c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fa10:	6978      	ldr	r0, [r7, #20]
 800fa12:	f001 fdbf 	bl	8011594 <vPortFree>
 800fa16:	e001      	b.n	800fa1c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fa18:	2300      	movs	r3, #0
 800fa1a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fa1c:	69fb      	ldr	r3, [r7, #28]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d017      	beq.n	800fa52 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fa22:	69fb      	ldr	r3, [r7, #28]
 800fa24:	2200      	movs	r2, #0
 800fa26:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fa2a:	88fa      	ldrh	r2, [r7, #6]
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	9303      	str	r3, [sp, #12]
 800fa30:	69fb      	ldr	r3, [r7, #28]
 800fa32:	9302      	str	r3, [sp, #8]
 800fa34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa36:	9301      	str	r3, [sp, #4]
 800fa38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa3a:	9300      	str	r3, [sp, #0]
 800fa3c:	683b      	ldr	r3, [r7, #0]
 800fa3e:	68b9      	ldr	r1, [r7, #8]
 800fa40:	68f8      	ldr	r0, [r7, #12]
 800fa42:	f000 f80e 	bl	800fa62 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fa46:	69f8      	ldr	r0, [r7, #28]
 800fa48:	f000 f89a 	bl	800fb80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fa4c:	2301      	movs	r3, #1
 800fa4e:	61bb      	str	r3, [r7, #24]
 800fa50:	e002      	b.n	800fa58 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fa52:	f04f 33ff 	mov.w	r3, #4294967295
 800fa56:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fa58:	69bb      	ldr	r3, [r7, #24]
	}
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	3720      	adds	r7, #32
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	bd80      	pop	{r7, pc}

0800fa62 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fa62:	b580      	push	{r7, lr}
 800fa64:	b088      	sub	sp, #32
 800fa66:	af00      	add	r7, sp, #0
 800fa68:	60f8      	str	r0, [r7, #12]
 800fa6a:	60b9      	str	r1, [r7, #8]
 800fa6c:	607a      	str	r2, [r7, #4]
 800fa6e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fa70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa72:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	009b      	lsls	r3, r3, #2
 800fa78:	461a      	mov	r2, r3
 800fa7a:	21a5      	movs	r1, #165	; 0xa5
 800fa7c:	f002 f9ff 	bl	8011e7e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fa80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fa8a:	3b01      	subs	r3, #1
 800fa8c:	009b      	lsls	r3, r3, #2
 800fa8e:	4413      	add	r3, r2
 800fa90:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fa92:	69bb      	ldr	r3, [r7, #24]
 800fa94:	f023 0307 	bic.w	r3, r3, #7
 800fa98:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fa9a:	69bb      	ldr	r3, [r7, #24]
 800fa9c:	f003 0307 	and.w	r3, r3, #7
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d009      	beq.n	800fab8 <prvInitialiseNewTask+0x56>
 800faa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faa8:	f383 8811 	msr	BASEPRI, r3
 800faac:	f3bf 8f6f 	isb	sy
 800fab0:	f3bf 8f4f 	dsb	sy
 800fab4:	617b      	str	r3, [r7, #20]
 800fab6:	e7fe      	b.n	800fab6 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fab8:	68bb      	ldr	r3, [r7, #8]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d01f      	beq.n	800fafe <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fabe:	2300      	movs	r3, #0
 800fac0:	61fb      	str	r3, [r7, #28]
 800fac2:	e012      	b.n	800faea <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fac4:	68ba      	ldr	r2, [r7, #8]
 800fac6:	69fb      	ldr	r3, [r7, #28]
 800fac8:	4413      	add	r3, r2
 800faca:	7819      	ldrb	r1, [r3, #0]
 800facc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800face:	69fb      	ldr	r3, [r7, #28]
 800fad0:	4413      	add	r3, r2
 800fad2:	3334      	adds	r3, #52	; 0x34
 800fad4:	460a      	mov	r2, r1
 800fad6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fad8:	68ba      	ldr	r2, [r7, #8]
 800fada:	69fb      	ldr	r3, [r7, #28]
 800fadc:	4413      	add	r3, r2
 800fade:	781b      	ldrb	r3, [r3, #0]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d006      	beq.n	800faf2 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fae4:	69fb      	ldr	r3, [r7, #28]
 800fae6:	3301      	adds	r3, #1
 800fae8:	61fb      	str	r3, [r7, #28]
 800faea:	69fb      	ldr	r3, [r7, #28]
 800faec:	2b0f      	cmp	r3, #15
 800faee:	d9e9      	bls.n	800fac4 <prvInitialiseNewTask+0x62>
 800faf0:	e000      	b.n	800faf4 <prvInitialiseNewTask+0x92>
			{
				break;
 800faf2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800faf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faf6:	2200      	movs	r2, #0
 800faf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fafc:	e003      	b.n	800fb06 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb00:	2200      	movs	r2, #0
 800fb02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fb06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb08:	2b37      	cmp	r3, #55	; 0x37
 800fb0a:	d901      	bls.n	800fb10 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fb0c:	2337      	movs	r3, #55	; 0x37
 800fb0e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fb10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb14:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fb16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb1a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800fb1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb1e:	2200      	movs	r2, #0
 800fb20:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb24:	3304      	adds	r3, #4
 800fb26:	4618      	mov	r0, r3
 800fb28:	f7fe ff02 	bl	800e930 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fb2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb2e:	3318      	adds	r3, #24
 800fb30:	4618      	mov	r0, r3
 800fb32:	f7fe fefd 	bl	800e930 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fb36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb3a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb3e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fb42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb44:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb4a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fb4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb4e:	2200      	movs	r2, #0
 800fb50:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb54:	2200      	movs	r2, #0
 800fb56:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fb5a:	683a      	ldr	r2, [r7, #0]
 800fb5c:	68f9      	ldr	r1, [r7, #12]
 800fb5e:	69b8      	ldr	r0, [r7, #24]
 800fb60:	f001 fa18 	bl	8010f94 <pxPortInitialiseStack>
 800fb64:	4602      	mov	r2, r0
 800fb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb68:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fb6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d002      	beq.n	800fb76 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fb76:	bf00      	nop
 800fb78:	3720      	adds	r7, #32
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	bd80      	pop	{r7, pc}
	...

0800fb80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b082      	sub	sp, #8
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fb88:	f001 fb28 	bl	80111dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fb8c:	4b2d      	ldr	r3, [pc, #180]	; (800fc44 <prvAddNewTaskToReadyList+0xc4>)
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	3301      	adds	r3, #1
 800fb92:	4a2c      	ldr	r2, [pc, #176]	; (800fc44 <prvAddNewTaskToReadyList+0xc4>)
 800fb94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fb96:	4b2c      	ldr	r3, [pc, #176]	; (800fc48 <prvAddNewTaskToReadyList+0xc8>)
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d109      	bne.n	800fbb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fb9e:	4a2a      	ldr	r2, [pc, #168]	; (800fc48 <prvAddNewTaskToReadyList+0xc8>)
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fba4:	4b27      	ldr	r3, [pc, #156]	; (800fc44 <prvAddNewTaskToReadyList+0xc4>)
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	2b01      	cmp	r3, #1
 800fbaa:	d110      	bne.n	800fbce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fbac:	f000 fc08 	bl	80103c0 <prvInitialiseTaskLists>
 800fbb0:	e00d      	b.n	800fbce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fbb2:	4b26      	ldr	r3, [pc, #152]	; (800fc4c <prvAddNewTaskToReadyList+0xcc>)
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d109      	bne.n	800fbce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fbba:	4b23      	ldr	r3, [pc, #140]	; (800fc48 <prvAddNewTaskToReadyList+0xc8>)
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbc4:	429a      	cmp	r2, r3
 800fbc6:	d802      	bhi.n	800fbce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fbc8:	4a1f      	ldr	r2, [pc, #124]	; (800fc48 <prvAddNewTaskToReadyList+0xc8>)
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fbce:	4b20      	ldr	r3, [pc, #128]	; (800fc50 <prvAddNewTaskToReadyList+0xd0>)
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	3301      	adds	r3, #1
 800fbd4:	4a1e      	ldr	r2, [pc, #120]	; (800fc50 <prvAddNewTaskToReadyList+0xd0>)
 800fbd6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fbd8:	4b1d      	ldr	r3, [pc, #116]	; (800fc50 <prvAddNewTaskToReadyList+0xd0>)
 800fbda:	681a      	ldr	r2, [r3, #0]
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbe4:	4b1b      	ldr	r3, [pc, #108]	; (800fc54 <prvAddNewTaskToReadyList+0xd4>)
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	429a      	cmp	r2, r3
 800fbea:	d903      	bls.n	800fbf4 <prvAddNewTaskToReadyList+0x74>
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbf0:	4a18      	ldr	r2, [pc, #96]	; (800fc54 <prvAddNewTaskToReadyList+0xd4>)
 800fbf2:	6013      	str	r3, [r2, #0]
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbf8:	4613      	mov	r3, r2
 800fbfa:	009b      	lsls	r3, r3, #2
 800fbfc:	4413      	add	r3, r2
 800fbfe:	009b      	lsls	r3, r3, #2
 800fc00:	4a15      	ldr	r2, [pc, #84]	; (800fc58 <prvAddNewTaskToReadyList+0xd8>)
 800fc02:	441a      	add	r2, r3
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	3304      	adds	r3, #4
 800fc08:	4619      	mov	r1, r3
 800fc0a:	4610      	mov	r0, r2
 800fc0c:	f7fe fe9d 	bl	800e94a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fc10:	f001 fb12 	bl	8011238 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fc14:	4b0d      	ldr	r3, [pc, #52]	; (800fc4c <prvAddNewTaskToReadyList+0xcc>)
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d00e      	beq.n	800fc3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fc1c:	4b0a      	ldr	r3, [pc, #40]	; (800fc48 <prvAddNewTaskToReadyList+0xc8>)
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc26:	429a      	cmp	r2, r3
 800fc28:	d207      	bcs.n	800fc3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fc2a:	4b0c      	ldr	r3, [pc, #48]	; (800fc5c <prvAddNewTaskToReadyList+0xdc>)
 800fc2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc30:	601a      	str	r2, [r3, #0]
 800fc32:	f3bf 8f4f 	dsb	sy
 800fc36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fc3a:	bf00      	nop
 800fc3c:	3708      	adds	r7, #8
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}
 800fc42:	bf00      	nop
 800fc44:	20000dac 	.word	0x20000dac
 800fc48:	200008d8 	.word	0x200008d8
 800fc4c:	20000db8 	.word	0x20000db8
 800fc50:	20000dc8 	.word	0x20000dc8
 800fc54:	20000db4 	.word	0x20000db4
 800fc58:	200008dc 	.word	0x200008dc
 800fc5c:	e000ed04 	.word	0xe000ed04

0800fc60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b084      	sub	sp, #16
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fc68:	2300      	movs	r3, #0
 800fc6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d016      	beq.n	800fca0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fc72:	4b13      	ldr	r3, [pc, #76]	; (800fcc0 <vTaskDelay+0x60>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d009      	beq.n	800fc8e <vTaskDelay+0x2e>
 800fc7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc7e:	f383 8811 	msr	BASEPRI, r3
 800fc82:	f3bf 8f6f 	isb	sy
 800fc86:	f3bf 8f4f 	dsb	sy
 800fc8a:	60bb      	str	r3, [r7, #8]
 800fc8c:	e7fe      	b.n	800fc8c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800fc8e:	f000 f87f 	bl	800fd90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fc92:	2100      	movs	r1, #0
 800fc94:	6878      	ldr	r0, [r7, #4]
 800fc96:	f000 fde3 	bl	8010860 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fc9a:	f000 f887 	bl	800fdac <xTaskResumeAll>
 800fc9e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d107      	bne.n	800fcb6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800fca6:	4b07      	ldr	r3, [pc, #28]	; (800fcc4 <vTaskDelay+0x64>)
 800fca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcac:	601a      	str	r2, [r3, #0]
 800fcae:	f3bf 8f4f 	dsb	sy
 800fcb2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fcb6:	bf00      	nop
 800fcb8:	3710      	adds	r7, #16
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	bd80      	pop	{r7, pc}
 800fcbe:	bf00      	nop
 800fcc0:	20000dd4 	.word	0x20000dd4
 800fcc4:	e000ed04 	.word	0xe000ed04

0800fcc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b08a      	sub	sp, #40	; 0x28
 800fccc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fcce:	2300      	movs	r3, #0
 800fcd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fcd6:	463a      	mov	r2, r7
 800fcd8:	1d39      	adds	r1, r7, #4
 800fcda:	f107 0308 	add.w	r3, r7, #8
 800fcde:	4618      	mov	r0, r3
 800fce0:	f7fe fdd2 	bl	800e888 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fce4:	6839      	ldr	r1, [r7, #0]
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	68ba      	ldr	r2, [r7, #8]
 800fcea:	9202      	str	r2, [sp, #8]
 800fcec:	9301      	str	r3, [sp, #4]
 800fcee:	2300      	movs	r3, #0
 800fcf0:	9300      	str	r3, [sp, #0]
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	460a      	mov	r2, r1
 800fcf6:	4920      	ldr	r1, [pc, #128]	; (800fd78 <vTaskStartScheduler+0xb0>)
 800fcf8:	4820      	ldr	r0, [pc, #128]	; (800fd7c <vTaskStartScheduler+0xb4>)
 800fcfa:	f7ff fe13 	bl	800f924 <xTaskCreateStatic>
 800fcfe:	4602      	mov	r2, r0
 800fd00:	4b1f      	ldr	r3, [pc, #124]	; (800fd80 <vTaskStartScheduler+0xb8>)
 800fd02:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fd04:	4b1e      	ldr	r3, [pc, #120]	; (800fd80 <vTaskStartScheduler+0xb8>)
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d002      	beq.n	800fd12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fd0c:	2301      	movs	r3, #1
 800fd0e:	617b      	str	r3, [r7, #20]
 800fd10:	e001      	b.n	800fd16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fd12:	2300      	movs	r3, #0
 800fd14:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fd16:	697b      	ldr	r3, [r7, #20]
 800fd18:	2b01      	cmp	r3, #1
 800fd1a:	d102      	bne.n	800fd22 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fd1c:	f000 fdf4 	bl	8010908 <xTimerCreateTimerTask>
 800fd20:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fd22:	697b      	ldr	r3, [r7, #20]
 800fd24:	2b01      	cmp	r3, #1
 800fd26:	d115      	bne.n	800fd54 <vTaskStartScheduler+0x8c>
 800fd28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd2c:	f383 8811 	msr	BASEPRI, r3
 800fd30:	f3bf 8f6f 	isb	sy
 800fd34:	f3bf 8f4f 	dsb	sy
 800fd38:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fd3a:	4b12      	ldr	r3, [pc, #72]	; (800fd84 <vTaskStartScheduler+0xbc>)
 800fd3c:	f04f 32ff 	mov.w	r2, #4294967295
 800fd40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fd42:	4b11      	ldr	r3, [pc, #68]	; (800fd88 <vTaskStartScheduler+0xc0>)
 800fd44:	2201      	movs	r2, #1
 800fd46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fd48:	4b10      	ldr	r3, [pc, #64]	; (800fd8c <vTaskStartScheduler+0xc4>)
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fd4e:	f001 f9a7 	bl	80110a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fd52:	e00d      	b.n	800fd70 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fd54:	697b      	ldr	r3, [r7, #20]
 800fd56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd5a:	d109      	bne.n	800fd70 <vTaskStartScheduler+0xa8>
 800fd5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd60:	f383 8811 	msr	BASEPRI, r3
 800fd64:	f3bf 8f6f 	isb	sy
 800fd68:	f3bf 8f4f 	dsb	sy
 800fd6c:	60fb      	str	r3, [r7, #12]
 800fd6e:	e7fe      	b.n	800fd6e <vTaskStartScheduler+0xa6>
}
 800fd70:	bf00      	nop
 800fd72:	3718      	adds	r7, #24
 800fd74:	46bd      	mov	sp, r7
 800fd76:	bd80      	pop	{r7, pc}
 800fd78:	0801210c 	.word	0x0801210c
 800fd7c:	08010391 	.word	0x08010391
 800fd80:	20000dd0 	.word	0x20000dd0
 800fd84:	20000dcc 	.word	0x20000dcc
 800fd88:	20000db8 	.word	0x20000db8
 800fd8c:	20000db0 	.word	0x20000db0

0800fd90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fd90:	b480      	push	{r7}
 800fd92:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800fd94:	4b04      	ldr	r3, [pc, #16]	; (800fda8 <vTaskSuspendAll+0x18>)
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	3301      	adds	r3, #1
 800fd9a:	4a03      	ldr	r2, [pc, #12]	; (800fda8 <vTaskSuspendAll+0x18>)
 800fd9c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800fd9e:	bf00      	nop
 800fda0:	46bd      	mov	sp, r7
 800fda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda6:	4770      	bx	lr
 800fda8:	20000dd4 	.word	0x20000dd4

0800fdac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b084      	sub	sp, #16
 800fdb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fdba:	4b41      	ldr	r3, [pc, #260]	; (800fec0 <xTaskResumeAll+0x114>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d109      	bne.n	800fdd6 <xTaskResumeAll+0x2a>
 800fdc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdc6:	f383 8811 	msr	BASEPRI, r3
 800fdca:	f3bf 8f6f 	isb	sy
 800fdce:	f3bf 8f4f 	dsb	sy
 800fdd2:	603b      	str	r3, [r7, #0]
 800fdd4:	e7fe      	b.n	800fdd4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fdd6:	f001 fa01 	bl	80111dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fdda:	4b39      	ldr	r3, [pc, #228]	; (800fec0 <xTaskResumeAll+0x114>)
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	3b01      	subs	r3, #1
 800fde0:	4a37      	ldr	r2, [pc, #220]	; (800fec0 <xTaskResumeAll+0x114>)
 800fde2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fde4:	4b36      	ldr	r3, [pc, #216]	; (800fec0 <xTaskResumeAll+0x114>)
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d162      	bne.n	800feb2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fdec:	4b35      	ldr	r3, [pc, #212]	; (800fec4 <xTaskResumeAll+0x118>)
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d05e      	beq.n	800feb2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fdf4:	e02f      	b.n	800fe56 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fdf6:	4b34      	ldr	r3, [pc, #208]	; (800fec8 <xTaskResumeAll+0x11c>)
 800fdf8:	68db      	ldr	r3, [r3, #12]
 800fdfa:	68db      	ldr	r3, [r3, #12]
 800fdfc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	3318      	adds	r3, #24
 800fe02:	4618      	mov	r0, r3
 800fe04:	f7fe fdfe 	bl	800ea04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	3304      	adds	r3, #4
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	f7fe fdf9 	bl	800ea04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe16:	4b2d      	ldr	r3, [pc, #180]	; (800fecc <xTaskResumeAll+0x120>)
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	429a      	cmp	r2, r3
 800fe1c:	d903      	bls.n	800fe26 <xTaskResumeAll+0x7a>
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe22:	4a2a      	ldr	r2, [pc, #168]	; (800fecc <xTaskResumeAll+0x120>)
 800fe24:	6013      	str	r3, [r2, #0]
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe2a:	4613      	mov	r3, r2
 800fe2c:	009b      	lsls	r3, r3, #2
 800fe2e:	4413      	add	r3, r2
 800fe30:	009b      	lsls	r3, r3, #2
 800fe32:	4a27      	ldr	r2, [pc, #156]	; (800fed0 <xTaskResumeAll+0x124>)
 800fe34:	441a      	add	r2, r3
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	3304      	adds	r3, #4
 800fe3a:	4619      	mov	r1, r3
 800fe3c:	4610      	mov	r0, r2
 800fe3e:	f7fe fd84 	bl	800e94a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe46:	4b23      	ldr	r3, [pc, #140]	; (800fed4 <xTaskResumeAll+0x128>)
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe4c:	429a      	cmp	r2, r3
 800fe4e:	d302      	bcc.n	800fe56 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800fe50:	4b21      	ldr	r3, [pc, #132]	; (800fed8 <xTaskResumeAll+0x12c>)
 800fe52:	2201      	movs	r2, #1
 800fe54:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fe56:	4b1c      	ldr	r3, [pc, #112]	; (800fec8 <xTaskResumeAll+0x11c>)
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d1cb      	bne.n	800fdf6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d001      	beq.n	800fe68 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fe64:	f000 fb46 	bl	80104f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800fe68:	4b1c      	ldr	r3, [pc, #112]	; (800fedc <xTaskResumeAll+0x130>)
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d010      	beq.n	800fe96 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fe74:	f000 f846 	bl	800ff04 <xTaskIncrementTick>
 800fe78:	4603      	mov	r3, r0
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d002      	beq.n	800fe84 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800fe7e:	4b16      	ldr	r3, [pc, #88]	; (800fed8 <xTaskResumeAll+0x12c>)
 800fe80:	2201      	movs	r2, #1
 800fe82:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	3b01      	subs	r3, #1
 800fe88:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d1f1      	bne.n	800fe74 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800fe90:	4b12      	ldr	r3, [pc, #72]	; (800fedc <xTaskResumeAll+0x130>)
 800fe92:	2200      	movs	r2, #0
 800fe94:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fe96:	4b10      	ldr	r3, [pc, #64]	; (800fed8 <xTaskResumeAll+0x12c>)
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d009      	beq.n	800feb2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fe9e:	2301      	movs	r3, #1
 800fea0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fea2:	4b0f      	ldr	r3, [pc, #60]	; (800fee0 <xTaskResumeAll+0x134>)
 800fea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fea8:	601a      	str	r2, [r3, #0]
 800feaa:	f3bf 8f4f 	dsb	sy
 800feae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800feb2:	f001 f9c1 	bl	8011238 <vPortExitCritical>

	return xAlreadyYielded;
 800feb6:	68bb      	ldr	r3, [r7, #8]
}
 800feb8:	4618      	mov	r0, r3
 800feba:	3710      	adds	r7, #16
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}
 800fec0:	20000dd4 	.word	0x20000dd4
 800fec4:	20000dac 	.word	0x20000dac
 800fec8:	20000d6c 	.word	0x20000d6c
 800fecc:	20000db4 	.word	0x20000db4
 800fed0:	200008dc 	.word	0x200008dc
 800fed4:	200008d8 	.word	0x200008d8
 800fed8:	20000dc0 	.word	0x20000dc0
 800fedc:	20000dbc 	.word	0x20000dbc
 800fee0:	e000ed04 	.word	0xe000ed04

0800fee4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fee4:	b480      	push	{r7}
 800fee6:	b083      	sub	sp, #12
 800fee8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800feea:	4b05      	ldr	r3, [pc, #20]	; (800ff00 <xTaskGetTickCount+0x1c>)
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fef0:	687b      	ldr	r3, [r7, #4]
}
 800fef2:	4618      	mov	r0, r3
 800fef4:	370c      	adds	r7, #12
 800fef6:	46bd      	mov	sp, r7
 800fef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefc:	4770      	bx	lr
 800fefe:	bf00      	nop
 800ff00:	20000db0 	.word	0x20000db0

0800ff04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b086      	sub	sp, #24
 800ff08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff0e:	4b4e      	ldr	r3, [pc, #312]	; (8010048 <xTaskIncrementTick+0x144>)
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	f040 8088 	bne.w	8010028 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ff18:	4b4c      	ldr	r3, [pc, #304]	; (801004c <xTaskIncrementTick+0x148>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	3301      	adds	r3, #1
 800ff1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ff20:	4a4a      	ldr	r2, [pc, #296]	; (801004c <xTaskIncrementTick+0x148>)
 800ff22:	693b      	ldr	r3, [r7, #16]
 800ff24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ff26:	693b      	ldr	r3, [r7, #16]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d11f      	bne.n	800ff6c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800ff2c:	4b48      	ldr	r3, [pc, #288]	; (8010050 <xTaskIncrementTick+0x14c>)
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d009      	beq.n	800ff4a <xTaskIncrementTick+0x46>
 800ff36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff3a:	f383 8811 	msr	BASEPRI, r3
 800ff3e:	f3bf 8f6f 	isb	sy
 800ff42:	f3bf 8f4f 	dsb	sy
 800ff46:	603b      	str	r3, [r7, #0]
 800ff48:	e7fe      	b.n	800ff48 <xTaskIncrementTick+0x44>
 800ff4a:	4b41      	ldr	r3, [pc, #260]	; (8010050 <xTaskIncrementTick+0x14c>)
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	60fb      	str	r3, [r7, #12]
 800ff50:	4b40      	ldr	r3, [pc, #256]	; (8010054 <xTaskIncrementTick+0x150>)
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	4a3e      	ldr	r2, [pc, #248]	; (8010050 <xTaskIncrementTick+0x14c>)
 800ff56:	6013      	str	r3, [r2, #0]
 800ff58:	4a3e      	ldr	r2, [pc, #248]	; (8010054 <xTaskIncrementTick+0x150>)
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	6013      	str	r3, [r2, #0]
 800ff5e:	4b3e      	ldr	r3, [pc, #248]	; (8010058 <xTaskIncrementTick+0x154>)
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	3301      	adds	r3, #1
 800ff64:	4a3c      	ldr	r2, [pc, #240]	; (8010058 <xTaskIncrementTick+0x154>)
 800ff66:	6013      	str	r3, [r2, #0]
 800ff68:	f000 fac4 	bl	80104f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ff6c:	4b3b      	ldr	r3, [pc, #236]	; (801005c <xTaskIncrementTick+0x158>)
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	693a      	ldr	r2, [r7, #16]
 800ff72:	429a      	cmp	r2, r3
 800ff74:	d349      	bcc.n	801000a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ff76:	4b36      	ldr	r3, [pc, #216]	; (8010050 <xTaskIncrementTick+0x14c>)
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d104      	bne.n	800ff8a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff80:	4b36      	ldr	r3, [pc, #216]	; (801005c <xTaskIncrementTick+0x158>)
 800ff82:	f04f 32ff 	mov.w	r2, #4294967295
 800ff86:	601a      	str	r2, [r3, #0]
					break;
 800ff88:	e03f      	b.n	801000a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff8a:	4b31      	ldr	r3, [pc, #196]	; (8010050 <xTaskIncrementTick+0x14c>)
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	68db      	ldr	r3, [r3, #12]
 800ff90:	68db      	ldr	r3, [r3, #12]
 800ff92:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ff94:	68bb      	ldr	r3, [r7, #8]
 800ff96:	685b      	ldr	r3, [r3, #4]
 800ff98:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ff9a:	693a      	ldr	r2, [r7, #16]
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	429a      	cmp	r2, r3
 800ffa0:	d203      	bcs.n	800ffaa <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ffa2:	4a2e      	ldr	r2, [pc, #184]	; (801005c <xTaskIncrementTick+0x158>)
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ffa8:	e02f      	b.n	801000a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ffaa:	68bb      	ldr	r3, [r7, #8]
 800ffac:	3304      	adds	r3, #4
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7fe fd28 	bl	800ea04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ffb4:	68bb      	ldr	r3, [r7, #8]
 800ffb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d004      	beq.n	800ffc6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	3318      	adds	r3, #24
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	f7fe fd1f 	bl	800ea04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ffc6:	68bb      	ldr	r3, [r7, #8]
 800ffc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffca:	4b25      	ldr	r3, [pc, #148]	; (8010060 <xTaskIncrementTick+0x15c>)
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	429a      	cmp	r2, r3
 800ffd0:	d903      	bls.n	800ffda <xTaskIncrementTick+0xd6>
 800ffd2:	68bb      	ldr	r3, [r7, #8]
 800ffd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffd6:	4a22      	ldr	r2, [pc, #136]	; (8010060 <xTaskIncrementTick+0x15c>)
 800ffd8:	6013      	str	r3, [r2, #0]
 800ffda:	68bb      	ldr	r3, [r7, #8]
 800ffdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffde:	4613      	mov	r3, r2
 800ffe0:	009b      	lsls	r3, r3, #2
 800ffe2:	4413      	add	r3, r2
 800ffe4:	009b      	lsls	r3, r3, #2
 800ffe6:	4a1f      	ldr	r2, [pc, #124]	; (8010064 <xTaskIncrementTick+0x160>)
 800ffe8:	441a      	add	r2, r3
 800ffea:	68bb      	ldr	r3, [r7, #8]
 800ffec:	3304      	adds	r3, #4
 800ffee:	4619      	mov	r1, r3
 800fff0:	4610      	mov	r0, r2
 800fff2:	f7fe fcaa 	bl	800e94a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fff6:	68bb      	ldr	r3, [r7, #8]
 800fff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fffa:	4b1b      	ldr	r3, [pc, #108]	; (8010068 <xTaskIncrementTick+0x164>)
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010000:	429a      	cmp	r2, r3
 8010002:	d3b8      	bcc.n	800ff76 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8010004:	2301      	movs	r3, #1
 8010006:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010008:	e7b5      	b.n	800ff76 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801000a:	4b17      	ldr	r3, [pc, #92]	; (8010068 <xTaskIncrementTick+0x164>)
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010010:	4914      	ldr	r1, [pc, #80]	; (8010064 <xTaskIncrementTick+0x160>)
 8010012:	4613      	mov	r3, r2
 8010014:	009b      	lsls	r3, r3, #2
 8010016:	4413      	add	r3, r2
 8010018:	009b      	lsls	r3, r3, #2
 801001a:	440b      	add	r3, r1
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	2b01      	cmp	r3, #1
 8010020:	d907      	bls.n	8010032 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8010022:	2301      	movs	r3, #1
 8010024:	617b      	str	r3, [r7, #20]
 8010026:	e004      	b.n	8010032 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8010028:	4b10      	ldr	r3, [pc, #64]	; (801006c <xTaskIncrementTick+0x168>)
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	3301      	adds	r3, #1
 801002e:	4a0f      	ldr	r2, [pc, #60]	; (801006c <xTaskIncrementTick+0x168>)
 8010030:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010032:	4b0f      	ldr	r3, [pc, #60]	; (8010070 <xTaskIncrementTick+0x16c>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d001      	beq.n	801003e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 801003a:	2301      	movs	r3, #1
 801003c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801003e:	697b      	ldr	r3, [r7, #20]
}
 8010040:	4618      	mov	r0, r3
 8010042:	3718      	adds	r7, #24
 8010044:	46bd      	mov	sp, r7
 8010046:	bd80      	pop	{r7, pc}
 8010048:	20000dd4 	.word	0x20000dd4
 801004c:	20000db0 	.word	0x20000db0
 8010050:	20000d64 	.word	0x20000d64
 8010054:	20000d68 	.word	0x20000d68
 8010058:	20000dc4 	.word	0x20000dc4
 801005c:	20000dcc 	.word	0x20000dcc
 8010060:	20000db4 	.word	0x20000db4
 8010064:	200008dc 	.word	0x200008dc
 8010068:	200008d8 	.word	0x200008d8
 801006c:	20000dbc 	.word	0x20000dbc
 8010070:	20000dc0 	.word	0x20000dc0

08010074 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010074:	b480      	push	{r7}
 8010076:	b085      	sub	sp, #20
 8010078:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801007a:	4b27      	ldr	r3, [pc, #156]	; (8010118 <vTaskSwitchContext+0xa4>)
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d003      	beq.n	801008a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010082:	4b26      	ldr	r3, [pc, #152]	; (801011c <vTaskSwitchContext+0xa8>)
 8010084:	2201      	movs	r2, #1
 8010086:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010088:	e040      	b.n	801010c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 801008a:	4b24      	ldr	r3, [pc, #144]	; (801011c <vTaskSwitchContext+0xa8>)
 801008c:	2200      	movs	r2, #0
 801008e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010090:	4b23      	ldr	r3, [pc, #140]	; (8010120 <vTaskSwitchContext+0xac>)
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	60fb      	str	r3, [r7, #12]
 8010096:	e00f      	b.n	80100b8 <vTaskSwitchContext+0x44>
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d109      	bne.n	80100b2 <vTaskSwitchContext+0x3e>
 801009e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100a2:	f383 8811 	msr	BASEPRI, r3
 80100a6:	f3bf 8f6f 	isb	sy
 80100aa:	f3bf 8f4f 	dsb	sy
 80100ae:	607b      	str	r3, [r7, #4]
 80100b0:	e7fe      	b.n	80100b0 <vTaskSwitchContext+0x3c>
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	3b01      	subs	r3, #1
 80100b6:	60fb      	str	r3, [r7, #12]
 80100b8:	491a      	ldr	r1, [pc, #104]	; (8010124 <vTaskSwitchContext+0xb0>)
 80100ba:	68fa      	ldr	r2, [r7, #12]
 80100bc:	4613      	mov	r3, r2
 80100be:	009b      	lsls	r3, r3, #2
 80100c0:	4413      	add	r3, r2
 80100c2:	009b      	lsls	r3, r3, #2
 80100c4:	440b      	add	r3, r1
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d0e5      	beq.n	8010098 <vTaskSwitchContext+0x24>
 80100cc:	68fa      	ldr	r2, [r7, #12]
 80100ce:	4613      	mov	r3, r2
 80100d0:	009b      	lsls	r3, r3, #2
 80100d2:	4413      	add	r3, r2
 80100d4:	009b      	lsls	r3, r3, #2
 80100d6:	4a13      	ldr	r2, [pc, #76]	; (8010124 <vTaskSwitchContext+0xb0>)
 80100d8:	4413      	add	r3, r2
 80100da:	60bb      	str	r3, [r7, #8]
 80100dc:	68bb      	ldr	r3, [r7, #8]
 80100de:	685b      	ldr	r3, [r3, #4]
 80100e0:	685a      	ldr	r2, [r3, #4]
 80100e2:	68bb      	ldr	r3, [r7, #8]
 80100e4:	605a      	str	r2, [r3, #4]
 80100e6:	68bb      	ldr	r3, [r7, #8]
 80100e8:	685a      	ldr	r2, [r3, #4]
 80100ea:	68bb      	ldr	r3, [r7, #8]
 80100ec:	3308      	adds	r3, #8
 80100ee:	429a      	cmp	r2, r3
 80100f0:	d104      	bne.n	80100fc <vTaskSwitchContext+0x88>
 80100f2:	68bb      	ldr	r3, [r7, #8]
 80100f4:	685b      	ldr	r3, [r3, #4]
 80100f6:	685a      	ldr	r2, [r3, #4]
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	605a      	str	r2, [r3, #4]
 80100fc:	68bb      	ldr	r3, [r7, #8]
 80100fe:	685b      	ldr	r3, [r3, #4]
 8010100:	68db      	ldr	r3, [r3, #12]
 8010102:	4a09      	ldr	r2, [pc, #36]	; (8010128 <vTaskSwitchContext+0xb4>)
 8010104:	6013      	str	r3, [r2, #0]
 8010106:	4a06      	ldr	r2, [pc, #24]	; (8010120 <vTaskSwitchContext+0xac>)
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	6013      	str	r3, [r2, #0]
}
 801010c:	bf00      	nop
 801010e:	3714      	adds	r7, #20
 8010110:	46bd      	mov	sp, r7
 8010112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010116:	4770      	bx	lr
 8010118:	20000dd4 	.word	0x20000dd4
 801011c:	20000dc0 	.word	0x20000dc0
 8010120:	20000db4 	.word	0x20000db4
 8010124:	200008dc 	.word	0x200008dc
 8010128:	200008d8 	.word	0x200008d8

0801012c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801012c:	b580      	push	{r7, lr}
 801012e:	b084      	sub	sp, #16
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
 8010134:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d109      	bne.n	8010150 <vTaskPlaceOnEventList+0x24>
 801013c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010140:	f383 8811 	msr	BASEPRI, r3
 8010144:	f3bf 8f6f 	isb	sy
 8010148:	f3bf 8f4f 	dsb	sy
 801014c:	60fb      	str	r3, [r7, #12]
 801014e:	e7fe      	b.n	801014e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010150:	4b07      	ldr	r3, [pc, #28]	; (8010170 <vTaskPlaceOnEventList+0x44>)
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	3318      	adds	r3, #24
 8010156:	4619      	mov	r1, r3
 8010158:	6878      	ldr	r0, [r7, #4]
 801015a:	f7fe fc1a 	bl	800e992 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801015e:	2101      	movs	r1, #1
 8010160:	6838      	ldr	r0, [r7, #0]
 8010162:	f000 fb7d 	bl	8010860 <prvAddCurrentTaskToDelayedList>
}
 8010166:	bf00      	nop
 8010168:	3710      	adds	r7, #16
 801016a:	46bd      	mov	sp, r7
 801016c:	bd80      	pop	{r7, pc}
 801016e:	bf00      	nop
 8010170:	200008d8 	.word	0x200008d8

08010174 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010174:	b580      	push	{r7, lr}
 8010176:	b086      	sub	sp, #24
 8010178:	af00      	add	r7, sp, #0
 801017a:	60f8      	str	r0, [r7, #12]
 801017c:	60b9      	str	r1, [r7, #8]
 801017e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d109      	bne.n	801019a <vTaskPlaceOnEventListRestricted+0x26>
 8010186:	f04f 0350 	mov.w	r3, #80	; 0x50
 801018a:	f383 8811 	msr	BASEPRI, r3
 801018e:	f3bf 8f6f 	isb	sy
 8010192:	f3bf 8f4f 	dsb	sy
 8010196:	617b      	str	r3, [r7, #20]
 8010198:	e7fe      	b.n	8010198 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801019a:	4b0a      	ldr	r3, [pc, #40]	; (80101c4 <vTaskPlaceOnEventListRestricted+0x50>)
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	3318      	adds	r3, #24
 80101a0:	4619      	mov	r1, r3
 80101a2:	68f8      	ldr	r0, [r7, #12]
 80101a4:	f7fe fbd1 	bl	800e94a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d002      	beq.n	80101b4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80101ae:	f04f 33ff 	mov.w	r3, #4294967295
 80101b2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80101b4:	6879      	ldr	r1, [r7, #4]
 80101b6:	68b8      	ldr	r0, [r7, #8]
 80101b8:	f000 fb52 	bl	8010860 <prvAddCurrentTaskToDelayedList>
	}
 80101bc:	bf00      	nop
 80101be:	3718      	adds	r7, #24
 80101c0:	46bd      	mov	sp, r7
 80101c2:	bd80      	pop	{r7, pc}
 80101c4:	200008d8 	.word	0x200008d8

080101c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b086      	sub	sp, #24
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	68db      	ldr	r3, [r3, #12]
 80101d4:	68db      	ldr	r3, [r3, #12]
 80101d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80101d8:	693b      	ldr	r3, [r7, #16]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d109      	bne.n	80101f2 <xTaskRemoveFromEventList+0x2a>
 80101de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101e2:	f383 8811 	msr	BASEPRI, r3
 80101e6:	f3bf 8f6f 	isb	sy
 80101ea:	f3bf 8f4f 	dsb	sy
 80101ee:	60fb      	str	r3, [r7, #12]
 80101f0:	e7fe      	b.n	80101f0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80101f2:	693b      	ldr	r3, [r7, #16]
 80101f4:	3318      	adds	r3, #24
 80101f6:	4618      	mov	r0, r3
 80101f8:	f7fe fc04 	bl	800ea04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80101fc:	4b1d      	ldr	r3, [pc, #116]	; (8010274 <xTaskRemoveFromEventList+0xac>)
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d11d      	bne.n	8010240 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010204:	693b      	ldr	r3, [r7, #16]
 8010206:	3304      	adds	r3, #4
 8010208:	4618      	mov	r0, r3
 801020a:	f7fe fbfb 	bl	800ea04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801020e:	693b      	ldr	r3, [r7, #16]
 8010210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010212:	4b19      	ldr	r3, [pc, #100]	; (8010278 <xTaskRemoveFromEventList+0xb0>)
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	429a      	cmp	r2, r3
 8010218:	d903      	bls.n	8010222 <xTaskRemoveFromEventList+0x5a>
 801021a:	693b      	ldr	r3, [r7, #16]
 801021c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801021e:	4a16      	ldr	r2, [pc, #88]	; (8010278 <xTaskRemoveFromEventList+0xb0>)
 8010220:	6013      	str	r3, [r2, #0]
 8010222:	693b      	ldr	r3, [r7, #16]
 8010224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010226:	4613      	mov	r3, r2
 8010228:	009b      	lsls	r3, r3, #2
 801022a:	4413      	add	r3, r2
 801022c:	009b      	lsls	r3, r3, #2
 801022e:	4a13      	ldr	r2, [pc, #76]	; (801027c <xTaskRemoveFromEventList+0xb4>)
 8010230:	441a      	add	r2, r3
 8010232:	693b      	ldr	r3, [r7, #16]
 8010234:	3304      	adds	r3, #4
 8010236:	4619      	mov	r1, r3
 8010238:	4610      	mov	r0, r2
 801023a:	f7fe fb86 	bl	800e94a <vListInsertEnd>
 801023e:	e005      	b.n	801024c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010240:	693b      	ldr	r3, [r7, #16]
 8010242:	3318      	adds	r3, #24
 8010244:	4619      	mov	r1, r3
 8010246:	480e      	ldr	r0, [pc, #56]	; (8010280 <xTaskRemoveFromEventList+0xb8>)
 8010248:	f7fe fb7f 	bl	800e94a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801024c:	693b      	ldr	r3, [r7, #16]
 801024e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010250:	4b0c      	ldr	r3, [pc, #48]	; (8010284 <xTaskRemoveFromEventList+0xbc>)
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010256:	429a      	cmp	r2, r3
 8010258:	d905      	bls.n	8010266 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801025a:	2301      	movs	r3, #1
 801025c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801025e:	4b0a      	ldr	r3, [pc, #40]	; (8010288 <xTaskRemoveFromEventList+0xc0>)
 8010260:	2201      	movs	r2, #1
 8010262:	601a      	str	r2, [r3, #0]
 8010264:	e001      	b.n	801026a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8010266:	2300      	movs	r3, #0
 8010268:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801026a:	697b      	ldr	r3, [r7, #20]
}
 801026c:	4618      	mov	r0, r3
 801026e:	3718      	adds	r7, #24
 8010270:	46bd      	mov	sp, r7
 8010272:	bd80      	pop	{r7, pc}
 8010274:	20000dd4 	.word	0x20000dd4
 8010278:	20000db4 	.word	0x20000db4
 801027c:	200008dc 	.word	0x200008dc
 8010280:	20000d6c 	.word	0x20000d6c
 8010284:	200008d8 	.word	0x200008d8
 8010288:	20000dc0 	.word	0x20000dc0

0801028c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801028c:	b480      	push	{r7}
 801028e:	b083      	sub	sp, #12
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010294:	4b06      	ldr	r3, [pc, #24]	; (80102b0 <vTaskInternalSetTimeOutState+0x24>)
 8010296:	681a      	ldr	r2, [r3, #0]
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801029c:	4b05      	ldr	r3, [pc, #20]	; (80102b4 <vTaskInternalSetTimeOutState+0x28>)
 801029e:	681a      	ldr	r2, [r3, #0]
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	605a      	str	r2, [r3, #4]
}
 80102a4:	bf00      	nop
 80102a6:	370c      	adds	r7, #12
 80102a8:	46bd      	mov	sp, r7
 80102aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ae:	4770      	bx	lr
 80102b0:	20000dc4 	.word	0x20000dc4
 80102b4:	20000db0 	.word	0x20000db0

080102b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b088      	sub	sp, #32
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
 80102c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d109      	bne.n	80102dc <xTaskCheckForTimeOut+0x24>
 80102c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102cc:	f383 8811 	msr	BASEPRI, r3
 80102d0:	f3bf 8f6f 	isb	sy
 80102d4:	f3bf 8f4f 	dsb	sy
 80102d8:	613b      	str	r3, [r7, #16]
 80102da:	e7fe      	b.n	80102da <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80102dc:	683b      	ldr	r3, [r7, #0]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d109      	bne.n	80102f6 <xTaskCheckForTimeOut+0x3e>
 80102e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102e6:	f383 8811 	msr	BASEPRI, r3
 80102ea:	f3bf 8f6f 	isb	sy
 80102ee:	f3bf 8f4f 	dsb	sy
 80102f2:	60fb      	str	r3, [r7, #12]
 80102f4:	e7fe      	b.n	80102f4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80102f6:	f000 ff71 	bl	80111dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80102fa:	4b1d      	ldr	r3, [pc, #116]	; (8010370 <xTaskCheckForTimeOut+0xb8>)
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	685b      	ldr	r3, [r3, #4]
 8010304:	69ba      	ldr	r2, [r7, #24]
 8010306:	1ad3      	subs	r3, r2, r3
 8010308:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801030a:	683b      	ldr	r3, [r7, #0]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010312:	d102      	bne.n	801031a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010314:	2300      	movs	r3, #0
 8010316:	61fb      	str	r3, [r7, #28]
 8010318:	e023      	b.n	8010362 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	681a      	ldr	r2, [r3, #0]
 801031e:	4b15      	ldr	r3, [pc, #84]	; (8010374 <xTaskCheckForTimeOut+0xbc>)
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	429a      	cmp	r2, r3
 8010324:	d007      	beq.n	8010336 <xTaskCheckForTimeOut+0x7e>
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	685b      	ldr	r3, [r3, #4]
 801032a:	69ba      	ldr	r2, [r7, #24]
 801032c:	429a      	cmp	r2, r3
 801032e:	d302      	bcc.n	8010336 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010330:	2301      	movs	r3, #1
 8010332:	61fb      	str	r3, [r7, #28]
 8010334:	e015      	b.n	8010362 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010336:	683b      	ldr	r3, [r7, #0]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	697a      	ldr	r2, [r7, #20]
 801033c:	429a      	cmp	r2, r3
 801033e:	d20b      	bcs.n	8010358 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010340:	683b      	ldr	r3, [r7, #0]
 8010342:	681a      	ldr	r2, [r3, #0]
 8010344:	697b      	ldr	r3, [r7, #20]
 8010346:	1ad2      	subs	r2, r2, r3
 8010348:	683b      	ldr	r3, [r7, #0]
 801034a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801034c:	6878      	ldr	r0, [r7, #4]
 801034e:	f7ff ff9d 	bl	801028c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010352:	2300      	movs	r3, #0
 8010354:	61fb      	str	r3, [r7, #28]
 8010356:	e004      	b.n	8010362 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8010358:	683b      	ldr	r3, [r7, #0]
 801035a:	2200      	movs	r2, #0
 801035c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801035e:	2301      	movs	r3, #1
 8010360:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010362:	f000 ff69 	bl	8011238 <vPortExitCritical>

	return xReturn;
 8010366:	69fb      	ldr	r3, [r7, #28]
}
 8010368:	4618      	mov	r0, r3
 801036a:	3720      	adds	r7, #32
 801036c:	46bd      	mov	sp, r7
 801036e:	bd80      	pop	{r7, pc}
 8010370:	20000db0 	.word	0x20000db0
 8010374:	20000dc4 	.word	0x20000dc4

08010378 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010378:	b480      	push	{r7}
 801037a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801037c:	4b03      	ldr	r3, [pc, #12]	; (801038c <vTaskMissedYield+0x14>)
 801037e:	2201      	movs	r2, #1
 8010380:	601a      	str	r2, [r3, #0]
}
 8010382:	bf00      	nop
 8010384:	46bd      	mov	sp, r7
 8010386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801038a:	4770      	bx	lr
 801038c:	20000dc0 	.word	0x20000dc0

08010390 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b082      	sub	sp, #8
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010398:	f000 f852 	bl	8010440 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801039c:	4b06      	ldr	r3, [pc, #24]	; (80103b8 <prvIdleTask+0x28>)
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	2b01      	cmp	r3, #1
 80103a2:	d9f9      	bls.n	8010398 <prvIdleTask+0x8>
			{
				taskYIELD();
 80103a4:	4b05      	ldr	r3, [pc, #20]	; (80103bc <prvIdleTask+0x2c>)
 80103a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103aa:	601a      	str	r2, [r3, #0]
 80103ac:	f3bf 8f4f 	dsb	sy
 80103b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80103b4:	e7f0      	b.n	8010398 <prvIdleTask+0x8>
 80103b6:	bf00      	nop
 80103b8:	200008dc 	.word	0x200008dc
 80103bc:	e000ed04 	.word	0xe000ed04

080103c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b082      	sub	sp, #8
 80103c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80103c6:	2300      	movs	r3, #0
 80103c8:	607b      	str	r3, [r7, #4]
 80103ca:	e00c      	b.n	80103e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80103cc:	687a      	ldr	r2, [r7, #4]
 80103ce:	4613      	mov	r3, r2
 80103d0:	009b      	lsls	r3, r3, #2
 80103d2:	4413      	add	r3, r2
 80103d4:	009b      	lsls	r3, r3, #2
 80103d6:	4a12      	ldr	r2, [pc, #72]	; (8010420 <prvInitialiseTaskLists+0x60>)
 80103d8:	4413      	add	r3, r2
 80103da:	4618      	mov	r0, r3
 80103dc:	f7fe fa88 	bl	800e8f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	3301      	adds	r3, #1
 80103e4:	607b      	str	r3, [r7, #4]
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	2b37      	cmp	r3, #55	; 0x37
 80103ea:	d9ef      	bls.n	80103cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80103ec:	480d      	ldr	r0, [pc, #52]	; (8010424 <prvInitialiseTaskLists+0x64>)
 80103ee:	f7fe fa7f 	bl	800e8f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80103f2:	480d      	ldr	r0, [pc, #52]	; (8010428 <prvInitialiseTaskLists+0x68>)
 80103f4:	f7fe fa7c 	bl	800e8f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80103f8:	480c      	ldr	r0, [pc, #48]	; (801042c <prvInitialiseTaskLists+0x6c>)
 80103fa:	f7fe fa79 	bl	800e8f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80103fe:	480c      	ldr	r0, [pc, #48]	; (8010430 <prvInitialiseTaskLists+0x70>)
 8010400:	f7fe fa76 	bl	800e8f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010404:	480b      	ldr	r0, [pc, #44]	; (8010434 <prvInitialiseTaskLists+0x74>)
 8010406:	f7fe fa73 	bl	800e8f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801040a:	4b0b      	ldr	r3, [pc, #44]	; (8010438 <prvInitialiseTaskLists+0x78>)
 801040c:	4a05      	ldr	r2, [pc, #20]	; (8010424 <prvInitialiseTaskLists+0x64>)
 801040e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010410:	4b0a      	ldr	r3, [pc, #40]	; (801043c <prvInitialiseTaskLists+0x7c>)
 8010412:	4a05      	ldr	r2, [pc, #20]	; (8010428 <prvInitialiseTaskLists+0x68>)
 8010414:	601a      	str	r2, [r3, #0]
}
 8010416:	bf00      	nop
 8010418:	3708      	adds	r7, #8
 801041a:	46bd      	mov	sp, r7
 801041c:	bd80      	pop	{r7, pc}
 801041e:	bf00      	nop
 8010420:	200008dc 	.word	0x200008dc
 8010424:	20000d3c 	.word	0x20000d3c
 8010428:	20000d50 	.word	0x20000d50
 801042c:	20000d6c 	.word	0x20000d6c
 8010430:	20000d80 	.word	0x20000d80
 8010434:	20000d98 	.word	0x20000d98
 8010438:	20000d64 	.word	0x20000d64
 801043c:	20000d68 	.word	0x20000d68

08010440 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b082      	sub	sp, #8
 8010444:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010446:	e019      	b.n	801047c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010448:	f000 fec8 	bl	80111dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801044c:	4b0f      	ldr	r3, [pc, #60]	; (801048c <prvCheckTasksWaitingTermination+0x4c>)
 801044e:	68db      	ldr	r3, [r3, #12]
 8010450:	68db      	ldr	r3, [r3, #12]
 8010452:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	3304      	adds	r3, #4
 8010458:	4618      	mov	r0, r3
 801045a:	f7fe fad3 	bl	800ea04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801045e:	4b0c      	ldr	r3, [pc, #48]	; (8010490 <prvCheckTasksWaitingTermination+0x50>)
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	3b01      	subs	r3, #1
 8010464:	4a0a      	ldr	r2, [pc, #40]	; (8010490 <prvCheckTasksWaitingTermination+0x50>)
 8010466:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010468:	4b0a      	ldr	r3, [pc, #40]	; (8010494 <prvCheckTasksWaitingTermination+0x54>)
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	3b01      	subs	r3, #1
 801046e:	4a09      	ldr	r2, [pc, #36]	; (8010494 <prvCheckTasksWaitingTermination+0x54>)
 8010470:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010472:	f000 fee1 	bl	8011238 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010476:	6878      	ldr	r0, [r7, #4]
 8010478:	f000 f80e 	bl	8010498 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801047c:	4b05      	ldr	r3, [pc, #20]	; (8010494 <prvCheckTasksWaitingTermination+0x54>)
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d1e1      	bne.n	8010448 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010484:	bf00      	nop
 8010486:	3708      	adds	r7, #8
 8010488:	46bd      	mov	sp, r7
 801048a:	bd80      	pop	{r7, pc}
 801048c:	20000d80 	.word	0x20000d80
 8010490:	20000dac 	.word	0x20000dac
 8010494:	20000d94 	.word	0x20000d94

08010498 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010498:	b580      	push	{r7, lr}
 801049a:	b084      	sub	sp, #16
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d108      	bne.n	80104bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104ae:	4618      	mov	r0, r3
 80104b0:	f001 f870 	bl	8011594 <vPortFree>
				vPortFree( pxTCB );
 80104b4:	6878      	ldr	r0, [r7, #4]
 80104b6:	f001 f86d 	bl	8011594 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80104ba:	e017      	b.n	80104ec <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80104c2:	2b01      	cmp	r3, #1
 80104c4:	d103      	bne.n	80104ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80104c6:	6878      	ldr	r0, [r7, #4]
 80104c8:	f001 f864 	bl	8011594 <vPortFree>
	}
 80104cc:	e00e      	b.n	80104ec <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80104d4:	2b02      	cmp	r3, #2
 80104d6:	d009      	beq.n	80104ec <prvDeleteTCB+0x54>
 80104d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104dc:	f383 8811 	msr	BASEPRI, r3
 80104e0:	f3bf 8f6f 	isb	sy
 80104e4:	f3bf 8f4f 	dsb	sy
 80104e8:	60fb      	str	r3, [r7, #12]
 80104ea:	e7fe      	b.n	80104ea <prvDeleteTCB+0x52>
	}
 80104ec:	bf00      	nop
 80104ee:	3710      	adds	r7, #16
 80104f0:	46bd      	mov	sp, r7
 80104f2:	bd80      	pop	{r7, pc}

080104f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80104f4:	b480      	push	{r7}
 80104f6:	b083      	sub	sp, #12
 80104f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80104fa:	4b0c      	ldr	r3, [pc, #48]	; (801052c <prvResetNextTaskUnblockTime+0x38>)
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d104      	bne.n	801050e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010504:	4b0a      	ldr	r3, [pc, #40]	; (8010530 <prvResetNextTaskUnblockTime+0x3c>)
 8010506:	f04f 32ff 	mov.w	r2, #4294967295
 801050a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801050c:	e008      	b.n	8010520 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801050e:	4b07      	ldr	r3, [pc, #28]	; (801052c <prvResetNextTaskUnblockTime+0x38>)
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	68db      	ldr	r3, [r3, #12]
 8010514:	68db      	ldr	r3, [r3, #12]
 8010516:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	685b      	ldr	r3, [r3, #4]
 801051c:	4a04      	ldr	r2, [pc, #16]	; (8010530 <prvResetNextTaskUnblockTime+0x3c>)
 801051e:	6013      	str	r3, [r2, #0]
}
 8010520:	bf00      	nop
 8010522:	370c      	adds	r7, #12
 8010524:	46bd      	mov	sp, r7
 8010526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052a:	4770      	bx	lr
 801052c:	20000d64 	.word	0x20000d64
 8010530:	20000dcc 	.word	0x20000dcc

08010534 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8010534:	b480      	push	{r7}
 8010536:	b083      	sub	sp, #12
 8010538:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801053a:	4b05      	ldr	r3, [pc, #20]	; (8010550 <xTaskGetCurrentTaskHandle+0x1c>)
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8010540:	687b      	ldr	r3, [r7, #4]
	}
 8010542:	4618      	mov	r0, r3
 8010544:	370c      	adds	r7, #12
 8010546:	46bd      	mov	sp, r7
 8010548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054c:	4770      	bx	lr
 801054e:	bf00      	nop
 8010550:	200008d8 	.word	0x200008d8

08010554 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010554:	b480      	push	{r7}
 8010556:	b083      	sub	sp, #12
 8010558:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801055a:	4b0b      	ldr	r3, [pc, #44]	; (8010588 <xTaskGetSchedulerState+0x34>)
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d102      	bne.n	8010568 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010562:	2301      	movs	r3, #1
 8010564:	607b      	str	r3, [r7, #4]
 8010566:	e008      	b.n	801057a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010568:	4b08      	ldr	r3, [pc, #32]	; (801058c <xTaskGetSchedulerState+0x38>)
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d102      	bne.n	8010576 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010570:	2302      	movs	r3, #2
 8010572:	607b      	str	r3, [r7, #4]
 8010574:	e001      	b.n	801057a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010576:	2300      	movs	r3, #0
 8010578:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801057a:	687b      	ldr	r3, [r7, #4]
	}
 801057c:	4618      	mov	r0, r3
 801057e:	370c      	adds	r7, #12
 8010580:	46bd      	mov	sp, r7
 8010582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010586:	4770      	bx	lr
 8010588:	20000db8 	.word	0x20000db8
 801058c:	20000dd4 	.word	0x20000dd4

08010590 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010590:	b580      	push	{r7, lr}
 8010592:	b084      	sub	sp, #16
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801059c:	2300      	movs	r3, #0
 801059e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d051      	beq.n	801064a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80105a6:	68bb      	ldr	r3, [r7, #8]
 80105a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105aa:	4b2a      	ldr	r3, [pc, #168]	; (8010654 <xTaskPriorityInherit+0xc4>)
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105b0:	429a      	cmp	r2, r3
 80105b2:	d241      	bcs.n	8010638 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80105b4:	68bb      	ldr	r3, [r7, #8]
 80105b6:	699b      	ldr	r3, [r3, #24]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	db06      	blt.n	80105ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80105bc:	4b25      	ldr	r3, [pc, #148]	; (8010654 <xTaskPriorityInherit+0xc4>)
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80105c6:	68bb      	ldr	r3, [r7, #8]
 80105c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80105ca:	68bb      	ldr	r3, [r7, #8]
 80105cc:	6959      	ldr	r1, [r3, #20]
 80105ce:	68bb      	ldr	r3, [r7, #8]
 80105d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105d2:	4613      	mov	r3, r2
 80105d4:	009b      	lsls	r3, r3, #2
 80105d6:	4413      	add	r3, r2
 80105d8:	009b      	lsls	r3, r3, #2
 80105da:	4a1f      	ldr	r2, [pc, #124]	; (8010658 <xTaskPriorityInherit+0xc8>)
 80105dc:	4413      	add	r3, r2
 80105de:	4299      	cmp	r1, r3
 80105e0:	d122      	bne.n	8010628 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80105e2:	68bb      	ldr	r3, [r7, #8]
 80105e4:	3304      	adds	r3, #4
 80105e6:	4618      	mov	r0, r3
 80105e8:	f7fe fa0c 	bl	800ea04 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80105ec:	4b19      	ldr	r3, [pc, #100]	; (8010654 <xTaskPriorityInherit+0xc4>)
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105f2:	68bb      	ldr	r3, [r7, #8]
 80105f4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80105f6:	68bb      	ldr	r3, [r7, #8]
 80105f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105fa:	4b18      	ldr	r3, [pc, #96]	; (801065c <xTaskPriorityInherit+0xcc>)
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	429a      	cmp	r2, r3
 8010600:	d903      	bls.n	801060a <xTaskPriorityInherit+0x7a>
 8010602:	68bb      	ldr	r3, [r7, #8]
 8010604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010606:	4a15      	ldr	r2, [pc, #84]	; (801065c <xTaskPriorityInherit+0xcc>)
 8010608:	6013      	str	r3, [r2, #0]
 801060a:	68bb      	ldr	r3, [r7, #8]
 801060c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801060e:	4613      	mov	r3, r2
 8010610:	009b      	lsls	r3, r3, #2
 8010612:	4413      	add	r3, r2
 8010614:	009b      	lsls	r3, r3, #2
 8010616:	4a10      	ldr	r2, [pc, #64]	; (8010658 <xTaskPriorityInherit+0xc8>)
 8010618:	441a      	add	r2, r3
 801061a:	68bb      	ldr	r3, [r7, #8]
 801061c:	3304      	adds	r3, #4
 801061e:	4619      	mov	r1, r3
 8010620:	4610      	mov	r0, r2
 8010622:	f7fe f992 	bl	800e94a <vListInsertEnd>
 8010626:	e004      	b.n	8010632 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010628:	4b0a      	ldr	r3, [pc, #40]	; (8010654 <xTaskPriorityInherit+0xc4>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801062e:	68bb      	ldr	r3, [r7, #8]
 8010630:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010632:	2301      	movs	r3, #1
 8010634:	60fb      	str	r3, [r7, #12]
 8010636:	e008      	b.n	801064a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010638:	68bb      	ldr	r3, [r7, #8]
 801063a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801063c:	4b05      	ldr	r3, [pc, #20]	; (8010654 <xTaskPriorityInherit+0xc4>)
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010642:	429a      	cmp	r2, r3
 8010644:	d201      	bcs.n	801064a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010646:	2301      	movs	r3, #1
 8010648:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801064a:	68fb      	ldr	r3, [r7, #12]
	}
 801064c:	4618      	mov	r0, r3
 801064e:	3710      	adds	r7, #16
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}
 8010654:	200008d8 	.word	0x200008d8
 8010658:	200008dc 	.word	0x200008dc
 801065c:	20000db4 	.word	0x20000db4

08010660 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010660:	b580      	push	{r7, lr}
 8010662:	b086      	sub	sp, #24
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801066c:	2300      	movs	r3, #0
 801066e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d054      	beq.n	8010720 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010676:	4b2d      	ldr	r3, [pc, #180]	; (801072c <xTaskPriorityDisinherit+0xcc>)
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	693a      	ldr	r2, [r7, #16]
 801067c:	429a      	cmp	r2, r3
 801067e:	d009      	beq.n	8010694 <xTaskPriorityDisinherit+0x34>
 8010680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010684:	f383 8811 	msr	BASEPRI, r3
 8010688:	f3bf 8f6f 	isb	sy
 801068c:	f3bf 8f4f 	dsb	sy
 8010690:	60fb      	str	r3, [r7, #12]
 8010692:	e7fe      	b.n	8010692 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8010694:	693b      	ldr	r3, [r7, #16]
 8010696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010698:	2b00      	cmp	r3, #0
 801069a:	d109      	bne.n	80106b0 <xTaskPriorityDisinherit+0x50>
 801069c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106a0:	f383 8811 	msr	BASEPRI, r3
 80106a4:	f3bf 8f6f 	isb	sy
 80106a8:	f3bf 8f4f 	dsb	sy
 80106ac:	60bb      	str	r3, [r7, #8]
 80106ae:	e7fe      	b.n	80106ae <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80106b0:	693b      	ldr	r3, [r7, #16]
 80106b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80106b4:	1e5a      	subs	r2, r3, #1
 80106b6:	693b      	ldr	r3, [r7, #16]
 80106b8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80106ba:	693b      	ldr	r3, [r7, #16]
 80106bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106be:	693b      	ldr	r3, [r7, #16]
 80106c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80106c2:	429a      	cmp	r2, r3
 80106c4:	d02c      	beq.n	8010720 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80106c6:	693b      	ldr	r3, [r7, #16]
 80106c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d128      	bne.n	8010720 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80106ce:	693b      	ldr	r3, [r7, #16]
 80106d0:	3304      	adds	r3, #4
 80106d2:	4618      	mov	r0, r3
 80106d4:	f7fe f996 	bl	800ea04 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80106d8:	693b      	ldr	r3, [r7, #16]
 80106da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80106dc:	693b      	ldr	r3, [r7, #16]
 80106de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80106e0:	693b      	ldr	r3, [r7, #16]
 80106e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106e4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80106e8:	693b      	ldr	r3, [r7, #16]
 80106ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80106ec:	693b      	ldr	r3, [r7, #16]
 80106ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106f0:	4b0f      	ldr	r3, [pc, #60]	; (8010730 <xTaskPriorityDisinherit+0xd0>)
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	429a      	cmp	r2, r3
 80106f6:	d903      	bls.n	8010700 <xTaskPriorityDisinherit+0xa0>
 80106f8:	693b      	ldr	r3, [r7, #16]
 80106fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106fc:	4a0c      	ldr	r2, [pc, #48]	; (8010730 <xTaskPriorityDisinherit+0xd0>)
 80106fe:	6013      	str	r3, [r2, #0]
 8010700:	693b      	ldr	r3, [r7, #16]
 8010702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010704:	4613      	mov	r3, r2
 8010706:	009b      	lsls	r3, r3, #2
 8010708:	4413      	add	r3, r2
 801070a:	009b      	lsls	r3, r3, #2
 801070c:	4a09      	ldr	r2, [pc, #36]	; (8010734 <xTaskPriorityDisinherit+0xd4>)
 801070e:	441a      	add	r2, r3
 8010710:	693b      	ldr	r3, [r7, #16]
 8010712:	3304      	adds	r3, #4
 8010714:	4619      	mov	r1, r3
 8010716:	4610      	mov	r0, r2
 8010718:	f7fe f917 	bl	800e94a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801071c:	2301      	movs	r3, #1
 801071e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010720:	697b      	ldr	r3, [r7, #20]
	}
 8010722:	4618      	mov	r0, r3
 8010724:	3718      	adds	r7, #24
 8010726:	46bd      	mov	sp, r7
 8010728:	bd80      	pop	{r7, pc}
 801072a:	bf00      	nop
 801072c:	200008d8 	.word	0x200008d8
 8010730:	20000db4 	.word	0x20000db4
 8010734:	200008dc 	.word	0x200008dc

08010738 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010738:	b580      	push	{r7, lr}
 801073a:	b088      	sub	sp, #32
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
 8010740:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010746:	2301      	movs	r3, #1
 8010748:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d068      	beq.n	8010822 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010750:	69bb      	ldr	r3, [r7, #24]
 8010752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010754:	2b00      	cmp	r3, #0
 8010756:	d109      	bne.n	801076c <vTaskPriorityDisinheritAfterTimeout+0x34>
 8010758:	f04f 0350 	mov.w	r3, #80	; 0x50
 801075c:	f383 8811 	msr	BASEPRI, r3
 8010760:	f3bf 8f6f 	isb	sy
 8010764:	f3bf 8f4f 	dsb	sy
 8010768:	60fb      	str	r3, [r7, #12]
 801076a:	e7fe      	b.n	801076a <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801076c:	69bb      	ldr	r3, [r7, #24]
 801076e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010770:	683a      	ldr	r2, [r7, #0]
 8010772:	429a      	cmp	r2, r3
 8010774:	d902      	bls.n	801077c <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010776:	683b      	ldr	r3, [r7, #0]
 8010778:	61fb      	str	r3, [r7, #28]
 801077a:	e002      	b.n	8010782 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801077c:	69bb      	ldr	r3, [r7, #24]
 801077e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010780:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010782:	69bb      	ldr	r3, [r7, #24]
 8010784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010786:	69fa      	ldr	r2, [r7, #28]
 8010788:	429a      	cmp	r2, r3
 801078a:	d04a      	beq.n	8010822 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801078c:	69bb      	ldr	r3, [r7, #24]
 801078e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010790:	697a      	ldr	r2, [r7, #20]
 8010792:	429a      	cmp	r2, r3
 8010794:	d145      	bne.n	8010822 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010796:	4b25      	ldr	r3, [pc, #148]	; (801082c <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	69ba      	ldr	r2, [r7, #24]
 801079c:	429a      	cmp	r2, r3
 801079e:	d109      	bne.n	80107b4 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80107a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107a4:	f383 8811 	msr	BASEPRI, r3
 80107a8:	f3bf 8f6f 	isb	sy
 80107ac:	f3bf 8f4f 	dsb	sy
 80107b0:	60bb      	str	r3, [r7, #8]
 80107b2:	e7fe      	b.n	80107b2 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80107b4:	69bb      	ldr	r3, [r7, #24]
 80107b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107b8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80107ba:	69bb      	ldr	r3, [r7, #24]
 80107bc:	69fa      	ldr	r2, [r7, #28]
 80107be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80107c0:	69bb      	ldr	r3, [r7, #24]
 80107c2:	699b      	ldr	r3, [r3, #24]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	db04      	blt.n	80107d2 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80107c8:	69fb      	ldr	r3, [r7, #28]
 80107ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80107ce:	69bb      	ldr	r3, [r7, #24]
 80107d0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80107d2:	69bb      	ldr	r3, [r7, #24]
 80107d4:	6959      	ldr	r1, [r3, #20]
 80107d6:	693a      	ldr	r2, [r7, #16]
 80107d8:	4613      	mov	r3, r2
 80107da:	009b      	lsls	r3, r3, #2
 80107dc:	4413      	add	r3, r2
 80107de:	009b      	lsls	r3, r3, #2
 80107e0:	4a13      	ldr	r2, [pc, #76]	; (8010830 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80107e2:	4413      	add	r3, r2
 80107e4:	4299      	cmp	r1, r3
 80107e6:	d11c      	bne.n	8010822 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80107e8:	69bb      	ldr	r3, [r7, #24]
 80107ea:	3304      	adds	r3, #4
 80107ec:	4618      	mov	r0, r3
 80107ee:	f7fe f909 	bl	800ea04 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80107f2:	69bb      	ldr	r3, [r7, #24]
 80107f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107f6:	4b0f      	ldr	r3, [pc, #60]	; (8010834 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	429a      	cmp	r2, r3
 80107fc:	d903      	bls.n	8010806 <vTaskPriorityDisinheritAfterTimeout+0xce>
 80107fe:	69bb      	ldr	r3, [r7, #24]
 8010800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010802:	4a0c      	ldr	r2, [pc, #48]	; (8010834 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010804:	6013      	str	r3, [r2, #0]
 8010806:	69bb      	ldr	r3, [r7, #24]
 8010808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801080a:	4613      	mov	r3, r2
 801080c:	009b      	lsls	r3, r3, #2
 801080e:	4413      	add	r3, r2
 8010810:	009b      	lsls	r3, r3, #2
 8010812:	4a07      	ldr	r2, [pc, #28]	; (8010830 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8010814:	441a      	add	r2, r3
 8010816:	69bb      	ldr	r3, [r7, #24]
 8010818:	3304      	adds	r3, #4
 801081a:	4619      	mov	r1, r3
 801081c:	4610      	mov	r0, r2
 801081e:	f7fe f894 	bl	800e94a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010822:	bf00      	nop
 8010824:	3720      	adds	r7, #32
 8010826:	46bd      	mov	sp, r7
 8010828:	bd80      	pop	{r7, pc}
 801082a:	bf00      	nop
 801082c:	200008d8 	.word	0x200008d8
 8010830:	200008dc 	.word	0x200008dc
 8010834:	20000db4 	.word	0x20000db4

08010838 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010838:	b480      	push	{r7}
 801083a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801083c:	4b07      	ldr	r3, [pc, #28]	; (801085c <pvTaskIncrementMutexHeldCount+0x24>)
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d004      	beq.n	801084e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010844:	4b05      	ldr	r3, [pc, #20]	; (801085c <pvTaskIncrementMutexHeldCount+0x24>)
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801084a:	3201      	adds	r2, #1
 801084c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801084e:	4b03      	ldr	r3, [pc, #12]	; (801085c <pvTaskIncrementMutexHeldCount+0x24>)
 8010850:	681b      	ldr	r3, [r3, #0]
	}
 8010852:	4618      	mov	r0, r3
 8010854:	46bd      	mov	sp, r7
 8010856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085a:	4770      	bx	lr
 801085c:	200008d8 	.word	0x200008d8

08010860 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b084      	sub	sp, #16
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
 8010868:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801086a:	4b21      	ldr	r3, [pc, #132]	; (80108f0 <prvAddCurrentTaskToDelayedList+0x90>)
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010870:	4b20      	ldr	r3, [pc, #128]	; (80108f4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	3304      	adds	r3, #4
 8010876:	4618      	mov	r0, r3
 8010878:	f7fe f8c4 	bl	800ea04 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010882:	d10a      	bne.n	801089a <prvAddCurrentTaskToDelayedList+0x3a>
 8010884:	683b      	ldr	r3, [r7, #0]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d007      	beq.n	801089a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801088a:	4b1a      	ldr	r3, [pc, #104]	; (80108f4 <prvAddCurrentTaskToDelayedList+0x94>)
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	3304      	adds	r3, #4
 8010890:	4619      	mov	r1, r3
 8010892:	4819      	ldr	r0, [pc, #100]	; (80108f8 <prvAddCurrentTaskToDelayedList+0x98>)
 8010894:	f7fe f859 	bl	800e94a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010898:	e026      	b.n	80108e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801089a:	68fa      	ldr	r2, [r7, #12]
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	4413      	add	r3, r2
 80108a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80108a2:	4b14      	ldr	r3, [pc, #80]	; (80108f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	68ba      	ldr	r2, [r7, #8]
 80108a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80108aa:	68ba      	ldr	r2, [r7, #8]
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	429a      	cmp	r2, r3
 80108b0:	d209      	bcs.n	80108c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80108b2:	4b12      	ldr	r3, [pc, #72]	; (80108fc <prvAddCurrentTaskToDelayedList+0x9c>)
 80108b4:	681a      	ldr	r2, [r3, #0]
 80108b6:	4b0f      	ldr	r3, [pc, #60]	; (80108f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	3304      	adds	r3, #4
 80108bc:	4619      	mov	r1, r3
 80108be:	4610      	mov	r0, r2
 80108c0:	f7fe f867 	bl	800e992 <vListInsert>
}
 80108c4:	e010      	b.n	80108e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80108c6:	4b0e      	ldr	r3, [pc, #56]	; (8010900 <prvAddCurrentTaskToDelayedList+0xa0>)
 80108c8:	681a      	ldr	r2, [r3, #0]
 80108ca:	4b0a      	ldr	r3, [pc, #40]	; (80108f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	3304      	adds	r3, #4
 80108d0:	4619      	mov	r1, r3
 80108d2:	4610      	mov	r0, r2
 80108d4:	f7fe f85d 	bl	800e992 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80108d8:	4b0a      	ldr	r3, [pc, #40]	; (8010904 <prvAddCurrentTaskToDelayedList+0xa4>)
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	68ba      	ldr	r2, [r7, #8]
 80108de:	429a      	cmp	r2, r3
 80108e0:	d202      	bcs.n	80108e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80108e2:	4a08      	ldr	r2, [pc, #32]	; (8010904 <prvAddCurrentTaskToDelayedList+0xa4>)
 80108e4:	68bb      	ldr	r3, [r7, #8]
 80108e6:	6013      	str	r3, [r2, #0]
}
 80108e8:	bf00      	nop
 80108ea:	3710      	adds	r7, #16
 80108ec:	46bd      	mov	sp, r7
 80108ee:	bd80      	pop	{r7, pc}
 80108f0:	20000db0 	.word	0x20000db0
 80108f4:	200008d8 	.word	0x200008d8
 80108f8:	20000d98 	.word	0x20000d98
 80108fc:	20000d68 	.word	0x20000d68
 8010900:	20000d64 	.word	0x20000d64
 8010904:	20000dcc 	.word	0x20000dcc

08010908 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b08a      	sub	sp, #40	; 0x28
 801090c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801090e:	2300      	movs	r3, #0
 8010910:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010912:	f000 faff 	bl	8010f14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010916:	4b1c      	ldr	r3, [pc, #112]	; (8010988 <xTimerCreateTimerTask+0x80>)
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d021      	beq.n	8010962 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801091e:	2300      	movs	r3, #0
 8010920:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010922:	2300      	movs	r3, #0
 8010924:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010926:	1d3a      	adds	r2, r7, #4
 8010928:	f107 0108 	add.w	r1, r7, #8
 801092c:	f107 030c 	add.w	r3, r7, #12
 8010930:	4618      	mov	r0, r3
 8010932:	f7fd ffc3 	bl	800e8bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010936:	6879      	ldr	r1, [r7, #4]
 8010938:	68bb      	ldr	r3, [r7, #8]
 801093a:	68fa      	ldr	r2, [r7, #12]
 801093c:	9202      	str	r2, [sp, #8]
 801093e:	9301      	str	r3, [sp, #4]
 8010940:	2302      	movs	r3, #2
 8010942:	9300      	str	r3, [sp, #0]
 8010944:	2300      	movs	r3, #0
 8010946:	460a      	mov	r2, r1
 8010948:	4910      	ldr	r1, [pc, #64]	; (801098c <xTimerCreateTimerTask+0x84>)
 801094a:	4811      	ldr	r0, [pc, #68]	; (8010990 <xTimerCreateTimerTask+0x88>)
 801094c:	f7fe ffea 	bl	800f924 <xTaskCreateStatic>
 8010950:	4602      	mov	r2, r0
 8010952:	4b10      	ldr	r3, [pc, #64]	; (8010994 <xTimerCreateTimerTask+0x8c>)
 8010954:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010956:	4b0f      	ldr	r3, [pc, #60]	; (8010994 <xTimerCreateTimerTask+0x8c>)
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d001      	beq.n	8010962 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801095e:	2301      	movs	r3, #1
 8010960:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010962:	697b      	ldr	r3, [r7, #20]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d109      	bne.n	801097c <xTimerCreateTimerTask+0x74>
 8010968:	f04f 0350 	mov.w	r3, #80	; 0x50
 801096c:	f383 8811 	msr	BASEPRI, r3
 8010970:	f3bf 8f6f 	isb	sy
 8010974:	f3bf 8f4f 	dsb	sy
 8010978:	613b      	str	r3, [r7, #16]
 801097a:	e7fe      	b.n	801097a <xTimerCreateTimerTask+0x72>
	return xReturn;
 801097c:	697b      	ldr	r3, [r7, #20]
}
 801097e:	4618      	mov	r0, r3
 8010980:	3718      	adds	r7, #24
 8010982:	46bd      	mov	sp, r7
 8010984:	bd80      	pop	{r7, pc}
 8010986:	bf00      	nop
 8010988:	20000e08 	.word	0x20000e08
 801098c:	08012114 	.word	0x08012114
 8010990:	08010ac9 	.word	0x08010ac9
 8010994:	20000e0c 	.word	0x20000e0c

08010998 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010998:	b580      	push	{r7, lr}
 801099a:	b08a      	sub	sp, #40	; 0x28
 801099c:	af00      	add	r7, sp, #0
 801099e:	60f8      	str	r0, [r7, #12]
 80109a0:	60b9      	str	r1, [r7, #8]
 80109a2:	607a      	str	r2, [r7, #4]
 80109a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80109a6:	2300      	movs	r3, #0
 80109a8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d109      	bne.n	80109c4 <xTimerGenericCommand+0x2c>
 80109b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109b4:	f383 8811 	msr	BASEPRI, r3
 80109b8:	f3bf 8f6f 	isb	sy
 80109bc:	f3bf 8f4f 	dsb	sy
 80109c0:	623b      	str	r3, [r7, #32]
 80109c2:	e7fe      	b.n	80109c2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80109c4:	4b19      	ldr	r3, [pc, #100]	; (8010a2c <xTimerGenericCommand+0x94>)
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d02a      	beq.n	8010a22 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80109cc:	68bb      	ldr	r3, [r7, #8]
 80109ce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80109d8:	68bb      	ldr	r3, [r7, #8]
 80109da:	2b05      	cmp	r3, #5
 80109dc:	dc18      	bgt.n	8010a10 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80109de:	f7ff fdb9 	bl	8010554 <xTaskGetSchedulerState>
 80109e2:	4603      	mov	r3, r0
 80109e4:	2b02      	cmp	r3, #2
 80109e6:	d109      	bne.n	80109fc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80109e8:	4b10      	ldr	r3, [pc, #64]	; (8010a2c <xTimerGenericCommand+0x94>)
 80109ea:	6818      	ldr	r0, [r3, #0]
 80109ec:	f107 0110 	add.w	r1, r7, #16
 80109f0:	2300      	movs	r3, #0
 80109f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80109f4:	f7fe fa22 	bl	800ee3c <xQueueGenericSend>
 80109f8:	6278      	str	r0, [r7, #36]	; 0x24
 80109fa:	e012      	b.n	8010a22 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80109fc:	4b0b      	ldr	r3, [pc, #44]	; (8010a2c <xTimerGenericCommand+0x94>)
 80109fe:	6818      	ldr	r0, [r3, #0]
 8010a00:	f107 0110 	add.w	r1, r7, #16
 8010a04:	2300      	movs	r3, #0
 8010a06:	2200      	movs	r2, #0
 8010a08:	f7fe fa18 	bl	800ee3c <xQueueGenericSend>
 8010a0c:	6278      	str	r0, [r7, #36]	; 0x24
 8010a0e:	e008      	b.n	8010a22 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010a10:	4b06      	ldr	r3, [pc, #24]	; (8010a2c <xTimerGenericCommand+0x94>)
 8010a12:	6818      	ldr	r0, [r3, #0]
 8010a14:	f107 0110 	add.w	r1, r7, #16
 8010a18:	2300      	movs	r3, #0
 8010a1a:	683a      	ldr	r2, [r7, #0]
 8010a1c:	f7fe fb08 	bl	800f030 <xQueueGenericSendFromISR>
 8010a20:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010a24:	4618      	mov	r0, r3
 8010a26:	3728      	adds	r7, #40	; 0x28
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	bd80      	pop	{r7, pc}
 8010a2c:	20000e08 	.word	0x20000e08

08010a30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b088      	sub	sp, #32
 8010a34:	af02      	add	r7, sp, #8
 8010a36:	6078      	str	r0, [r7, #4]
 8010a38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a3a:	4b22      	ldr	r3, [pc, #136]	; (8010ac4 <prvProcessExpiredTimer+0x94>)
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	68db      	ldr	r3, [r3, #12]
 8010a40:	68db      	ldr	r3, [r3, #12]
 8010a42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010a44:	697b      	ldr	r3, [r7, #20]
 8010a46:	3304      	adds	r3, #4
 8010a48:	4618      	mov	r0, r3
 8010a4a:	f7fd ffdb 	bl	800ea04 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010a4e:	697b      	ldr	r3, [r7, #20]
 8010a50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010a54:	f003 0304 	and.w	r3, r3, #4
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d021      	beq.n	8010aa0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010a5c:	697b      	ldr	r3, [r7, #20]
 8010a5e:	699a      	ldr	r2, [r3, #24]
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	18d1      	adds	r1, r2, r3
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	683a      	ldr	r2, [r7, #0]
 8010a68:	6978      	ldr	r0, [r7, #20]
 8010a6a:	f000 f8d1 	bl	8010c10 <prvInsertTimerInActiveList>
 8010a6e:	4603      	mov	r3, r0
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d01e      	beq.n	8010ab2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010a74:	2300      	movs	r3, #0
 8010a76:	9300      	str	r3, [sp, #0]
 8010a78:	2300      	movs	r3, #0
 8010a7a:	687a      	ldr	r2, [r7, #4]
 8010a7c:	2100      	movs	r1, #0
 8010a7e:	6978      	ldr	r0, [r7, #20]
 8010a80:	f7ff ff8a 	bl	8010998 <xTimerGenericCommand>
 8010a84:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010a86:	693b      	ldr	r3, [r7, #16]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d112      	bne.n	8010ab2 <prvProcessExpiredTimer+0x82>
 8010a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a90:	f383 8811 	msr	BASEPRI, r3
 8010a94:	f3bf 8f6f 	isb	sy
 8010a98:	f3bf 8f4f 	dsb	sy
 8010a9c:	60fb      	str	r3, [r7, #12]
 8010a9e:	e7fe      	b.n	8010a9e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010aa0:	697b      	ldr	r3, [r7, #20]
 8010aa2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010aa6:	f023 0301 	bic.w	r3, r3, #1
 8010aaa:	b2da      	uxtb	r2, r3
 8010aac:	697b      	ldr	r3, [r7, #20]
 8010aae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010ab2:	697b      	ldr	r3, [r7, #20]
 8010ab4:	6a1b      	ldr	r3, [r3, #32]
 8010ab6:	6978      	ldr	r0, [r7, #20]
 8010ab8:	4798      	blx	r3
}
 8010aba:	bf00      	nop
 8010abc:	3718      	adds	r7, #24
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	bd80      	pop	{r7, pc}
 8010ac2:	bf00      	nop
 8010ac4:	20000e00 	.word	0x20000e00

08010ac8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b084      	sub	sp, #16
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010ad0:	f107 0308 	add.w	r3, r7, #8
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	f000 f857 	bl	8010b88 <prvGetNextExpireTime>
 8010ada:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010adc:	68bb      	ldr	r3, [r7, #8]
 8010ade:	4619      	mov	r1, r3
 8010ae0:	68f8      	ldr	r0, [r7, #12]
 8010ae2:	f000 f803 	bl	8010aec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010ae6:	f000 f8d5 	bl	8010c94 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010aea:	e7f1      	b.n	8010ad0 <prvTimerTask+0x8>

08010aec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b084      	sub	sp, #16
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
 8010af4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010af6:	f7ff f94b 	bl	800fd90 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010afa:	f107 0308 	add.w	r3, r7, #8
 8010afe:	4618      	mov	r0, r3
 8010b00:	f000 f866 	bl	8010bd0 <prvSampleTimeNow>
 8010b04:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010b06:	68bb      	ldr	r3, [r7, #8]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d130      	bne.n	8010b6e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010b0c:	683b      	ldr	r3, [r7, #0]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d10a      	bne.n	8010b28 <prvProcessTimerOrBlockTask+0x3c>
 8010b12:	687a      	ldr	r2, [r7, #4]
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	429a      	cmp	r2, r3
 8010b18:	d806      	bhi.n	8010b28 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010b1a:	f7ff f947 	bl	800fdac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010b1e:	68f9      	ldr	r1, [r7, #12]
 8010b20:	6878      	ldr	r0, [r7, #4]
 8010b22:	f7ff ff85 	bl	8010a30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010b26:	e024      	b.n	8010b72 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010b28:	683b      	ldr	r3, [r7, #0]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d008      	beq.n	8010b40 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010b2e:	4b13      	ldr	r3, [pc, #76]	; (8010b7c <prvProcessTimerOrBlockTask+0x90>)
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d101      	bne.n	8010b3c <prvProcessTimerOrBlockTask+0x50>
 8010b38:	2301      	movs	r3, #1
 8010b3a:	e000      	b.n	8010b3e <prvProcessTimerOrBlockTask+0x52>
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010b40:	4b0f      	ldr	r3, [pc, #60]	; (8010b80 <prvProcessTimerOrBlockTask+0x94>)
 8010b42:	6818      	ldr	r0, [r3, #0]
 8010b44:	687a      	ldr	r2, [r7, #4]
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	1ad3      	subs	r3, r2, r3
 8010b4a:	683a      	ldr	r2, [r7, #0]
 8010b4c:	4619      	mov	r1, r3
 8010b4e:	f7fe feb5 	bl	800f8bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010b52:	f7ff f92b 	bl	800fdac <xTaskResumeAll>
 8010b56:	4603      	mov	r3, r0
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d10a      	bne.n	8010b72 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010b5c:	4b09      	ldr	r3, [pc, #36]	; (8010b84 <prvProcessTimerOrBlockTask+0x98>)
 8010b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b62:	601a      	str	r2, [r3, #0]
 8010b64:	f3bf 8f4f 	dsb	sy
 8010b68:	f3bf 8f6f 	isb	sy
}
 8010b6c:	e001      	b.n	8010b72 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010b6e:	f7ff f91d 	bl	800fdac <xTaskResumeAll>
}
 8010b72:	bf00      	nop
 8010b74:	3710      	adds	r7, #16
 8010b76:	46bd      	mov	sp, r7
 8010b78:	bd80      	pop	{r7, pc}
 8010b7a:	bf00      	nop
 8010b7c:	20000e04 	.word	0x20000e04
 8010b80:	20000e08 	.word	0x20000e08
 8010b84:	e000ed04 	.word	0xe000ed04

08010b88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010b88:	b480      	push	{r7}
 8010b8a:	b085      	sub	sp, #20
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010b90:	4b0e      	ldr	r3, [pc, #56]	; (8010bcc <prvGetNextExpireTime+0x44>)
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d101      	bne.n	8010b9e <prvGetNextExpireTime+0x16>
 8010b9a:	2201      	movs	r2, #1
 8010b9c:	e000      	b.n	8010ba0 <prvGetNextExpireTime+0x18>
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d105      	bne.n	8010bb8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010bac:	4b07      	ldr	r3, [pc, #28]	; (8010bcc <prvGetNextExpireTime+0x44>)
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	68db      	ldr	r3, [r3, #12]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	60fb      	str	r3, [r7, #12]
 8010bb6:	e001      	b.n	8010bbc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010bb8:	2300      	movs	r3, #0
 8010bba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010bbc:	68fb      	ldr	r3, [r7, #12]
}
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	3714      	adds	r7, #20
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc8:	4770      	bx	lr
 8010bca:	bf00      	nop
 8010bcc:	20000e00 	.word	0x20000e00

08010bd0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b084      	sub	sp, #16
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010bd8:	f7ff f984 	bl	800fee4 <xTaskGetTickCount>
 8010bdc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010bde:	4b0b      	ldr	r3, [pc, #44]	; (8010c0c <prvSampleTimeNow+0x3c>)
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	68fa      	ldr	r2, [r7, #12]
 8010be4:	429a      	cmp	r2, r3
 8010be6:	d205      	bcs.n	8010bf4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010be8:	f000 f930 	bl	8010e4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	2201      	movs	r2, #1
 8010bf0:	601a      	str	r2, [r3, #0]
 8010bf2:	e002      	b.n	8010bfa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010bfa:	4a04      	ldr	r2, [pc, #16]	; (8010c0c <prvSampleTimeNow+0x3c>)
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010c00:	68fb      	ldr	r3, [r7, #12]
}
 8010c02:	4618      	mov	r0, r3
 8010c04:	3710      	adds	r7, #16
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bd80      	pop	{r7, pc}
 8010c0a:	bf00      	nop
 8010c0c:	20000e10 	.word	0x20000e10

08010c10 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b086      	sub	sp, #24
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	60f8      	str	r0, [r7, #12]
 8010c18:	60b9      	str	r1, [r7, #8]
 8010c1a:	607a      	str	r2, [r7, #4]
 8010c1c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010c1e:	2300      	movs	r3, #0
 8010c20:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	68ba      	ldr	r2, [r7, #8]
 8010c26:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	68fa      	ldr	r2, [r7, #12]
 8010c2c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010c2e:	68ba      	ldr	r2, [r7, #8]
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	429a      	cmp	r2, r3
 8010c34:	d812      	bhi.n	8010c5c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c36:	687a      	ldr	r2, [r7, #4]
 8010c38:	683b      	ldr	r3, [r7, #0]
 8010c3a:	1ad2      	subs	r2, r2, r3
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	699b      	ldr	r3, [r3, #24]
 8010c40:	429a      	cmp	r2, r3
 8010c42:	d302      	bcc.n	8010c4a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010c44:	2301      	movs	r3, #1
 8010c46:	617b      	str	r3, [r7, #20]
 8010c48:	e01b      	b.n	8010c82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010c4a:	4b10      	ldr	r3, [pc, #64]	; (8010c8c <prvInsertTimerInActiveList+0x7c>)
 8010c4c:	681a      	ldr	r2, [r3, #0]
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	3304      	adds	r3, #4
 8010c52:	4619      	mov	r1, r3
 8010c54:	4610      	mov	r0, r2
 8010c56:	f7fd fe9c 	bl	800e992 <vListInsert>
 8010c5a:	e012      	b.n	8010c82 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010c5c:	687a      	ldr	r2, [r7, #4]
 8010c5e:	683b      	ldr	r3, [r7, #0]
 8010c60:	429a      	cmp	r2, r3
 8010c62:	d206      	bcs.n	8010c72 <prvInsertTimerInActiveList+0x62>
 8010c64:	68ba      	ldr	r2, [r7, #8]
 8010c66:	683b      	ldr	r3, [r7, #0]
 8010c68:	429a      	cmp	r2, r3
 8010c6a:	d302      	bcc.n	8010c72 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010c6c:	2301      	movs	r3, #1
 8010c6e:	617b      	str	r3, [r7, #20]
 8010c70:	e007      	b.n	8010c82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010c72:	4b07      	ldr	r3, [pc, #28]	; (8010c90 <prvInsertTimerInActiveList+0x80>)
 8010c74:	681a      	ldr	r2, [r3, #0]
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	3304      	adds	r3, #4
 8010c7a:	4619      	mov	r1, r3
 8010c7c:	4610      	mov	r0, r2
 8010c7e:	f7fd fe88 	bl	800e992 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010c82:	697b      	ldr	r3, [r7, #20]
}
 8010c84:	4618      	mov	r0, r3
 8010c86:	3718      	adds	r7, #24
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	bd80      	pop	{r7, pc}
 8010c8c:	20000e04 	.word	0x20000e04
 8010c90:	20000e00 	.word	0x20000e00

08010c94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b08e      	sub	sp, #56	; 0x38
 8010c98:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010c9a:	e0c6      	b.n	8010e2a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	da17      	bge.n	8010cd2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010ca2:	1d3b      	adds	r3, r7, #4
 8010ca4:	3304      	adds	r3, #4
 8010ca6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d109      	bne.n	8010cc2 <prvProcessReceivedCommands+0x2e>
 8010cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cb2:	f383 8811 	msr	BASEPRI, r3
 8010cb6:	f3bf 8f6f 	isb	sy
 8010cba:	f3bf 8f4f 	dsb	sy
 8010cbe:	61fb      	str	r3, [r7, #28]
 8010cc0:	e7fe      	b.n	8010cc0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010cc8:	6850      	ldr	r0, [r2, #4]
 8010cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010ccc:	6892      	ldr	r2, [r2, #8]
 8010cce:	4611      	mov	r1, r2
 8010cd0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	f2c0 80a7 	blt.w	8010e28 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ce0:	695b      	ldr	r3, [r3, #20]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d004      	beq.n	8010cf0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ce8:	3304      	adds	r3, #4
 8010cea:	4618      	mov	r0, r3
 8010cec:	f7fd fe8a 	bl	800ea04 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010cf0:	463b      	mov	r3, r7
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	f7ff ff6c 	bl	8010bd0 <prvSampleTimeNow>
 8010cf8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	2b09      	cmp	r3, #9
 8010cfe:	f200 8094 	bhi.w	8010e2a <prvProcessReceivedCommands+0x196>
 8010d02:	a201      	add	r2, pc, #4	; (adr r2, 8010d08 <prvProcessReceivedCommands+0x74>)
 8010d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d08:	08010d31 	.word	0x08010d31
 8010d0c:	08010d31 	.word	0x08010d31
 8010d10:	08010d31 	.word	0x08010d31
 8010d14:	08010da3 	.word	0x08010da3
 8010d18:	08010db7 	.word	0x08010db7
 8010d1c:	08010dff 	.word	0x08010dff
 8010d20:	08010d31 	.word	0x08010d31
 8010d24:	08010d31 	.word	0x08010d31
 8010d28:	08010da3 	.word	0x08010da3
 8010d2c:	08010db7 	.word	0x08010db7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d36:	f043 0301 	orr.w	r3, r3, #1
 8010d3a:	b2da      	uxtb	r2, r3
 8010d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010d42:	68ba      	ldr	r2, [r7, #8]
 8010d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d46:	699b      	ldr	r3, [r3, #24]
 8010d48:	18d1      	adds	r1, r2, r3
 8010d4a:	68bb      	ldr	r3, [r7, #8]
 8010d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d50:	f7ff ff5e 	bl	8010c10 <prvInsertTimerInActiveList>
 8010d54:	4603      	mov	r3, r0
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d067      	beq.n	8010e2a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d5c:	6a1b      	ldr	r3, [r3, #32]
 8010d5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d60:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d68:	f003 0304 	and.w	r3, r3, #4
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d05c      	beq.n	8010e2a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010d70:	68ba      	ldr	r2, [r7, #8]
 8010d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d74:	699b      	ldr	r3, [r3, #24]
 8010d76:	441a      	add	r2, r3
 8010d78:	2300      	movs	r3, #0
 8010d7a:	9300      	str	r3, [sp, #0]
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	2100      	movs	r1, #0
 8010d80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d82:	f7ff fe09 	bl	8010998 <xTimerGenericCommand>
 8010d86:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010d88:	6a3b      	ldr	r3, [r7, #32]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d14d      	bne.n	8010e2a <prvProcessReceivedCommands+0x196>
 8010d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d92:	f383 8811 	msr	BASEPRI, r3
 8010d96:	f3bf 8f6f 	isb	sy
 8010d9a:	f3bf 8f4f 	dsb	sy
 8010d9e:	61bb      	str	r3, [r7, #24]
 8010da0:	e7fe      	b.n	8010da0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010da4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010da8:	f023 0301 	bic.w	r3, r3, #1
 8010dac:	b2da      	uxtb	r2, r3
 8010dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010db0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010db4:	e039      	b.n	8010e2a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010db8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010dbc:	f043 0301 	orr.w	r3, r3, #1
 8010dc0:	b2da      	uxtb	r2, r3
 8010dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dc4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010dc8:	68ba      	ldr	r2, [r7, #8]
 8010dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dcc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dd0:	699b      	ldr	r3, [r3, #24]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d109      	bne.n	8010dea <prvProcessReceivedCommands+0x156>
 8010dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dda:	f383 8811 	msr	BASEPRI, r3
 8010dde:	f3bf 8f6f 	isb	sy
 8010de2:	f3bf 8f4f 	dsb	sy
 8010de6:	617b      	str	r3, [r7, #20]
 8010de8:	e7fe      	b.n	8010de8 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dec:	699a      	ldr	r2, [r3, #24]
 8010dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df0:	18d1      	adds	r1, r2, r3
 8010df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010df6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010df8:	f7ff ff0a 	bl	8010c10 <prvInsertTimerInActiveList>
					break;
 8010dfc:	e015      	b.n	8010e2a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010e04:	f003 0302 	and.w	r3, r3, #2
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d103      	bne.n	8010e14 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8010e0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e0e:	f000 fbc1 	bl	8011594 <vPortFree>
 8010e12:	e00a      	b.n	8010e2a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010e1a:	f023 0301 	bic.w	r3, r3, #1
 8010e1e:	b2da      	uxtb	r2, r3
 8010e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010e26:	e000      	b.n	8010e2a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010e28:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010e2a:	4b07      	ldr	r3, [pc, #28]	; (8010e48 <prvProcessReceivedCommands+0x1b4>)
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	1d39      	adds	r1, r7, #4
 8010e30:	2200      	movs	r2, #0
 8010e32:	4618      	mov	r0, r3
 8010e34:	f7fe f990 	bl	800f158 <xQueueReceive>
 8010e38:	4603      	mov	r3, r0
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	f47f af2e 	bne.w	8010c9c <prvProcessReceivedCommands+0x8>
	}
}
 8010e40:	bf00      	nop
 8010e42:	3730      	adds	r7, #48	; 0x30
 8010e44:	46bd      	mov	sp, r7
 8010e46:	bd80      	pop	{r7, pc}
 8010e48:	20000e08 	.word	0x20000e08

08010e4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b088      	sub	sp, #32
 8010e50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010e52:	e047      	b.n	8010ee4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010e54:	4b2d      	ldr	r3, [pc, #180]	; (8010f0c <prvSwitchTimerLists+0xc0>)
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	68db      	ldr	r3, [r3, #12]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e5e:	4b2b      	ldr	r3, [pc, #172]	; (8010f0c <prvSwitchTimerLists+0xc0>)
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	68db      	ldr	r3, [r3, #12]
 8010e64:	68db      	ldr	r3, [r3, #12]
 8010e66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	3304      	adds	r3, #4
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	f7fd fdc9 	bl	800ea04 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	6a1b      	ldr	r3, [r3, #32]
 8010e76:	68f8      	ldr	r0, [r7, #12]
 8010e78:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010e80:	f003 0304 	and.w	r3, r3, #4
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d02d      	beq.n	8010ee4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	699b      	ldr	r3, [r3, #24]
 8010e8c:	693a      	ldr	r2, [r7, #16]
 8010e8e:	4413      	add	r3, r2
 8010e90:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010e92:	68ba      	ldr	r2, [r7, #8]
 8010e94:	693b      	ldr	r3, [r7, #16]
 8010e96:	429a      	cmp	r2, r3
 8010e98:	d90e      	bls.n	8010eb8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	68ba      	ldr	r2, [r7, #8]
 8010e9e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	68fa      	ldr	r2, [r7, #12]
 8010ea4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010ea6:	4b19      	ldr	r3, [pc, #100]	; (8010f0c <prvSwitchTimerLists+0xc0>)
 8010ea8:	681a      	ldr	r2, [r3, #0]
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	3304      	adds	r3, #4
 8010eae:	4619      	mov	r1, r3
 8010eb0:	4610      	mov	r0, r2
 8010eb2:	f7fd fd6e 	bl	800e992 <vListInsert>
 8010eb6:	e015      	b.n	8010ee4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010eb8:	2300      	movs	r3, #0
 8010eba:	9300      	str	r3, [sp, #0]
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	693a      	ldr	r2, [r7, #16]
 8010ec0:	2100      	movs	r1, #0
 8010ec2:	68f8      	ldr	r0, [r7, #12]
 8010ec4:	f7ff fd68 	bl	8010998 <xTimerGenericCommand>
 8010ec8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d109      	bne.n	8010ee4 <prvSwitchTimerLists+0x98>
 8010ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ed4:	f383 8811 	msr	BASEPRI, r3
 8010ed8:	f3bf 8f6f 	isb	sy
 8010edc:	f3bf 8f4f 	dsb	sy
 8010ee0:	603b      	str	r3, [r7, #0]
 8010ee2:	e7fe      	b.n	8010ee2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010ee4:	4b09      	ldr	r3, [pc, #36]	; (8010f0c <prvSwitchTimerLists+0xc0>)
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d1b2      	bne.n	8010e54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010eee:	4b07      	ldr	r3, [pc, #28]	; (8010f0c <prvSwitchTimerLists+0xc0>)
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010ef4:	4b06      	ldr	r3, [pc, #24]	; (8010f10 <prvSwitchTimerLists+0xc4>)
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	4a04      	ldr	r2, [pc, #16]	; (8010f0c <prvSwitchTimerLists+0xc0>)
 8010efa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010efc:	4a04      	ldr	r2, [pc, #16]	; (8010f10 <prvSwitchTimerLists+0xc4>)
 8010efe:	697b      	ldr	r3, [r7, #20]
 8010f00:	6013      	str	r3, [r2, #0]
}
 8010f02:	bf00      	nop
 8010f04:	3718      	adds	r7, #24
 8010f06:	46bd      	mov	sp, r7
 8010f08:	bd80      	pop	{r7, pc}
 8010f0a:	bf00      	nop
 8010f0c:	20000e00 	.word	0x20000e00
 8010f10:	20000e04 	.word	0x20000e04

08010f14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b082      	sub	sp, #8
 8010f18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010f1a:	f000 f95f 	bl	80111dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010f1e:	4b15      	ldr	r3, [pc, #84]	; (8010f74 <prvCheckForValidListAndQueue+0x60>)
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d120      	bne.n	8010f68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010f26:	4814      	ldr	r0, [pc, #80]	; (8010f78 <prvCheckForValidListAndQueue+0x64>)
 8010f28:	f7fd fce2 	bl	800e8f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010f2c:	4813      	ldr	r0, [pc, #76]	; (8010f7c <prvCheckForValidListAndQueue+0x68>)
 8010f2e:	f7fd fcdf 	bl	800e8f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010f32:	4b13      	ldr	r3, [pc, #76]	; (8010f80 <prvCheckForValidListAndQueue+0x6c>)
 8010f34:	4a10      	ldr	r2, [pc, #64]	; (8010f78 <prvCheckForValidListAndQueue+0x64>)
 8010f36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010f38:	4b12      	ldr	r3, [pc, #72]	; (8010f84 <prvCheckForValidListAndQueue+0x70>)
 8010f3a:	4a10      	ldr	r2, [pc, #64]	; (8010f7c <prvCheckForValidListAndQueue+0x68>)
 8010f3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010f3e:	2300      	movs	r3, #0
 8010f40:	9300      	str	r3, [sp, #0]
 8010f42:	4b11      	ldr	r3, [pc, #68]	; (8010f88 <prvCheckForValidListAndQueue+0x74>)
 8010f44:	4a11      	ldr	r2, [pc, #68]	; (8010f8c <prvCheckForValidListAndQueue+0x78>)
 8010f46:	2110      	movs	r1, #16
 8010f48:	200a      	movs	r0, #10
 8010f4a:	f7fd fded 	bl	800eb28 <xQueueGenericCreateStatic>
 8010f4e:	4602      	mov	r2, r0
 8010f50:	4b08      	ldr	r3, [pc, #32]	; (8010f74 <prvCheckForValidListAndQueue+0x60>)
 8010f52:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010f54:	4b07      	ldr	r3, [pc, #28]	; (8010f74 <prvCheckForValidListAndQueue+0x60>)
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d005      	beq.n	8010f68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010f5c:	4b05      	ldr	r3, [pc, #20]	; (8010f74 <prvCheckForValidListAndQueue+0x60>)
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	490b      	ldr	r1, [pc, #44]	; (8010f90 <prvCheckForValidListAndQueue+0x7c>)
 8010f62:	4618      	mov	r0, r3
 8010f64:	f7fe fc82 	bl	800f86c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010f68:	f000 f966 	bl	8011238 <vPortExitCritical>
}
 8010f6c:	bf00      	nop
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	bd80      	pop	{r7, pc}
 8010f72:	bf00      	nop
 8010f74:	20000e08 	.word	0x20000e08
 8010f78:	20000dd8 	.word	0x20000dd8
 8010f7c:	20000dec 	.word	0x20000dec
 8010f80:	20000e00 	.word	0x20000e00
 8010f84:	20000e04 	.word	0x20000e04
 8010f88:	20000eb4 	.word	0x20000eb4
 8010f8c:	20000e14 	.word	0x20000e14
 8010f90:	0801211c 	.word	0x0801211c

08010f94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010f94:	b480      	push	{r7}
 8010f96:	b085      	sub	sp, #20
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	60f8      	str	r0, [r7, #12]
 8010f9c:	60b9      	str	r1, [r7, #8]
 8010f9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	3b04      	subs	r3, #4
 8010fa4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010fac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	3b04      	subs	r3, #4
 8010fb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010fb4:	68bb      	ldr	r3, [r7, #8]
 8010fb6:	f023 0201 	bic.w	r2, r3, #1
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	3b04      	subs	r3, #4
 8010fc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010fc4:	4a0c      	ldr	r2, [pc, #48]	; (8010ff8 <pxPortInitialiseStack+0x64>)
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	3b14      	subs	r3, #20
 8010fce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010fd0:	687a      	ldr	r2, [r7, #4]
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	3b04      	subs	r3, #4
 8010fda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	f06f 0202 	mvn.w	r2, #2
 8010fe2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	3b20      	subs	r3, #32
 8010fe8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010fea:	68fb      	ldr	r3, [r7, #12]
}
 8010fec:	4618      	mov	r0, r3
 8010fee:	3714      	adds	r7, #20
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff6:	4770      	bx	lr
 8010ff8:	08010ffd 	.word	0x08010ffd

08010ffc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010ffc:	b480      	push	{r7}
 8010ffe:	b085      	sub	sp, #20
 8011000:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011002:	2300      	movs	r3, #0
 8011004:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011006:	4b11      	ldr	r3, [pc, #68]	; (801104c <prvTaskExitError+0x50>)
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801100e:	d009      	beq.n	8011024 <prvTaskExitError+0x28>
 8011010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011014:	f383 8811 	msr	BASEPRI, r3
 8011018:	f3bf 8f6f 	isb	sy
 801101c:	f3bf 8f4f 	dsb	sy
 8011020:	60fb      	str	r3, [r7, #12]
 8011022:	e7fe      	b.n	8011022 <prvTaskExitError+0x26>
 8011024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011028:	f383 8811 	msr	BASEPRI, r3
 801102c:	f3bf 8f6f 	isb	sy
 8011030:	f3bf 8f4f 	dsb	sy
 8011034:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011036:	bf00      	nop
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d0fc      	beq.n	8011038 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801103e:	bf00      	nop
 8011040:	3714      	adds	r7, #20
 8011042:	46bd      	mov	sp, r7
 8011044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011048:	4770      	bx	lr
 801104a:	bf00      	nop
 801104c:	20000128 	.word	0x20000128

08011050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011050:	4b07      	ldr	r3, [pc, #28]	; (8011070 <pxCurrentTCBConst2>)
 8011052:	6819      	ldr	r1, [r3, #0]
 8011054:	6808      	ldr	r0, [r1, #0]
 8011056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801105a:	f380 8809 	msr	PSP, r0
 801105e:	f3bf 8f6f 	isb	sy
 8011062:	f04f 0000 	mov.w	r0, #0
 8011066:	f380 8811 	msr	BASEPRI, r0
 801106a:	4770      	bx	lr
 801106c:	f3af 8000 	nop.w

08011070 <pxCurrentTCBConst2>:
 8011070:	200008d8 	.word	0x200008d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011074:	bf00      	nop
 8011076:	bf00      	nop

08011078 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011078:	4808      	ldr	r0, [pc, #32]	; (801109c <prvPortStartFirstTask+0x24>)
 801107a:	6800      	ldr	r0, [r0, #0]
 801107c:	6800      	ldr	r0, [r0, #0]
 801107e:	f380 8808 	msr	MSP, r0
 8011082:	f04f 0000 	mov.w	r0, #0
 8011086:	f380 8814 	msr	CONTROL, r0
 801108a:	b662      	cpsie	i
 801108c:	b661      	cpsie	f
 801108e:	f3bf 8f4f 	dsb	sy
 8011092:	f3bf 8f6f 	isb	sy
 8011096:	df00      	svc	0
 8011098:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801109a:	bf00      	nop
 801109c:	e000ed08 	.word	0xe000ed08

080110a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b086      	sub	sp, #24
 80110a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80110a6:	4b44      	ldr	r3, [pc, #272]	; (80111b8 <xPortStartScheduler+0x118>)
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	4a44      	ldr	r2, [pc, #272]	; (80111bc <xPortStartScheduler+0x11c>)
 80110ac:	4293      	cmp	r3, r2
 80110ae:	d109      	bne.n	80110c4 <xPortStartScheduler+0x24>
 80110b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110b4:	f383 8811 	msr	BASEPRI, r3
 80110b8:	f3bf 8f6f 	isb	sy
 80110bc:	f3bf 8f4f 	dsb	sy
 80110c0:	613b      	str	r3, [r7, #16]
 80110c2:	e7fe      	b.n	80110c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80110c4:	4b3c      	ldr	r3, [pc, #240]	; (80111b8 <xPortStartScheduler+0x118>)
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	4a3d      	ldr	r2, [pc, #244]	; (80111c0 <xPortStartScheduler+0x120>)
 80110ca:	4293      	cmp	r3, r2
 80110cc:	d109      	bne.n	80110e2 <xPortStartScheduler+0x42>
 80110ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110d2:	f383 8811 	msr	BASEPRI, r3
 80110d6:	f3bf 8f6f 	isb	sy
 80110da:	f3bf 8f4f 	dsb	sy
 80110de:	60fb      	str	r3, [r7, #12]
 80110e0:	e7fe      	b.n	80110e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80110e2:	4b38      	ldr	r3, [pc, #224]	; (80111c4 <xPortStartScheduler+0x124>)
 80110e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80110e6:	697b      	ldr	r3, [r7, #20]
 80110e8:	781b      	ldrb	r3, [r3, #0]
 80110ea:	b2db      	uxtb	r3, r3
 80110ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80110ee:	697b      	ldr	r3, [r7, #20]
 80110f0:	22ff      	movs	r2, #255	; 0xff
 80110f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80110f4:	697b      	ldr	r3, [r7, #20]
 80110f6:	781b      	ldrb	r3, [r3, #0]
 80110f8:	b2db      	uxtb	r3, r3
 80110fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80110fc:	78fb      	ldrb	r3, [r7, #3]
 80110fe:	b2db      	uxtb	r3, r3
 8011100:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011104:	b2da      	uxtb	r2, r3
 8011106:	4b30      	ldr	r3, [pc, #192]	; (80111c8 <xPortStartScheduler+0x128>)
 8011108:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801110a:	4b30      	ldr	r3, [pc, #192]	; (80111cc <xPortStartScheduler+0x12c>)
 801110c:	2207      	movs	r2, #7
 801110e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011110:	e009      	b.n	8011126 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8011112:	4b2e      	ldr	r3, [pc, #184]	; (80111cc <xPortStartScheduler+0x12c>)
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	3b01      	subs	r3, #1
 8011118:	4a2c      	ldr	r2, [pc, #176]	; (80111cc <xPortStartScheduler+0x12c>)
 801111a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801111c:	78fb      	ldrb	r3, [r7, #3]
 801111e:	b2db      	uxtb	r3, r3
 8011120:	005b      	lsls	r3, r3, #1
 8011122:	b2db      	uxtb	r3, r3
 8011124:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011126:	78fb      	ldrb	r3, [r7, #3]
 8011128:	b2db      	uxtb	r3, r3
 801112a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801112e:	2b80      	cmp	r3, #128	; 0x80
 8011130:	d0ef      	beq.n	8011112 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011132:	4b26      	ldr	r3, [pc, #152]	; (80111cc <xPortStartScheduler+0x12c>)
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	f1c3 0307 	rsb	r3, r3, #7
 801113a:	2b04      	cmp	r3, #4
 801113c:	d009      	beq.n	8011152 <xPortStartScheduler+0xb2>
 801113e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011142:	f383 8811 	msr	BASEPRI, r3
 8011146:	f3bf 8f6f 	isb	sy
 801114a:	f3bf 8f4f 	dsb	sy
 801114e:	60bb      	str	r3, [r7, #8]
 8011150:	e7fe      	b.n	8011150 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011152:	4b1e      	ldr	r3, [pc, #120]	; (80111cc <xPortStartScheduler+0x12c>)
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	021b      	lsls	r3, r3, #8
 8011158:	4a1c      	ldr	r2, [pc, #112]	; (80111cc <xPortStartScheduler+0x12c>)
 801115a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801115c:	4b1b      	ldr	r3, [pc, #108]	; (80111cc <xPortStartScheduler+0x12c>)
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011164:	4a19      	ldr	r2, [pc, #100]	; (80111cc <xPortStartScheduler+0x12c>)
 8011166:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	b2da      	uxtb	r2, r3
 801116c:	697b      	ldr	r3, [r7, #20]
 801116e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011170:	4b17      	ldr	r3, [pc, #92]	; (80111d0 <xPortStartScheduler+0x130>)
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	4a16      	ldr	r2, [pc, #88]	; (80111d0 <xPortStartScheduler+0x130>)
 8011176:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801117a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801117c:	4b14      	ldr	r3, [pc, #80]	; (80111d0 <xPortStartScheduler+0x130>)
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	4a13      	ldr	r2, [pc, #76]	; (80111d0 <xPortStartScheduler+0x130>)
 8011182:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011186:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011188:	f000 f8d6 	bl	8011338 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801118c:	4b11      	ldr	r3, [pc, #68]	; (80111d4 <xPortStartScheduler+0x134>)
 801118e:	2200      	movs	r2, #0
 8011190:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011192:	f000 f8f5 	bl	8011380 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011196:	4b10      	ldr	r3, [pc, #64]	; (80111d8 <xPortStartScheduler+0x138>)
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	4a0f      	ldr	r2, [pc, #60]	; (80111d8 <xPortStartScheduler+0x138>)
 801119c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80111a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80111a2:	f7ff ff69 	bl	8011078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80111a6:	f7fe ff65 	bl	8010074 <vTaskSwitchContext>
	prvTaskExitError();
 80111aa:	f7ff ff27 	bl	8010ffc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80111ae:	2300      	movs	r3, #0
}
 80111b0:	4618      	mov	r0, r3
 80111b2:	3718      	adds	r7, #24
 80111b4:	46bd      	mov	sp, r7
 80111b6:	bd80      	pop	{r7, pc}
 80111b8:	e000ed00 	.word	0xe000ed00
 80111bc:	410fc271 	.word	0x410fc271
 80111c0:	410fc270 	.word	0x410fc270
 80111c4:	e000e400 	.word	0xe000e400
 80111c8:	20000f04 	.word	0x20000f04
 80111cc:	20000f08 	.word	0x20000f08
 80111d0:	e000ed20 	.word	0xe000ed20
 80111d4:	20000128 	.word	0x20000128
 80111d8:	e000ef34 	.word	0xe000ef34

080111dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80111dc:	b480      	push	{r7}
 80111de:	b083      	sub	sp, #12
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111e6:	f383 8811 	msr	BASEPRI, r3
 80111ea:	f3bf 8f6f 	isb	sy
 80111ee:	f3bf 8f4f 	dsb	sy
 80111f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80111f4:	4b0e      	ldr	r3, [pc, #56]	; (8011230 <vPortEnterCritical+0x54>)
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	3301      	adds	r3, #1
 80111fa:	4a0d      	ldr	r2, [pc, #52]	; (8011230 <vPortEnterCritical+0x54>)
 80111fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80111fe:	4b0c      	ldr	r3, [pc, #48]	; (8011230 <vPortEnterCritical+0x54>)
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	2b01      	cmp	r3, #1
 8011204:	d10e      	bne.n	8011224 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011206:	4b0b      	ldr	r3, [pc, #44]	; (8011234 <vPortEnterCritical+0x58>)
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	b2db      	uxtb	r3, r3
 801120c:	2b00      	cmp	r3, #0
 801120e:	d009      	beq.n	8011224 <vPortEnterCritical+0x48>
 8011210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011214:	f383 8811 	msr	BASEPRI, r3
 8011218:	f3bf 8f6f 	isb	sy
 801121c:	f3bf 8f4f 	dsb	sy
 8011220:	603b      	str	r3, [r7, #0]
 8011222:	e7fe      	b.n	8011222 <vPortEnterCritical+0x46>
	}
}
 8011224:	bf00      	nop
 8011226:	370c      	adds	r7, #12
 8011228:	46bd      	mov	sp, r7
 801122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122e:	4770      	bx	lr
 8011230:	20000128 	.word	0x20000128
 8011234:	e000ed04 	.word	0xe000ed04

08011238 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011238:	b480      	push	{r7}
 801123a:	b083      	sub	sp, #12
 801123c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801123e:	4b11      	ldr	r3, [pc, #68]	; (8011284 <vPortExitCritical+0x4c>)
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d109      	bne.n	801125a <vPortExitCritical+0x22>
 8011246:	f04f 0350 	mov.w	r3, #80	; 0x50
 801124a:	f383 8811 	msr	BASEPRI, r3
 801124e:	f3bf 8f6f 	isb	sy
 8011252:	f3bf 8f4f 	dsb	sy
 8011256:	607b      	str	r3, [r7, #4]
 8011258:	e7fe      	b.n	8011258 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801125a:	4b0a      	ldr	r3, [pc, #40]	; (8011284 <vPortExitCritical+0x4c>)
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	3b01      	subs	r3, #1
 8011260:	4a08      	ldr	r2, [pc, #32]	; (8011284 <vPortExitCritical+0x4c>)
 8011262:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011264:	4b07      	ldr	r3, [pc, #28]	; (8011284 <vPortExitCritical+0x4c>)
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d104      	bne.n	8011276 <vPortExitCritical+0x3e>
 801126c:	2300      	movs	r3, #0
 801126e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011270:	683b      	ldr	r3, [r7, #0]
 8011272:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8011276:	bf00      	nop
 8011278:	370c      	adds	r7, #12
 801127a:	46bd      	mov	sp, r7
 801127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011280:	4770      	bx	lr
 8011282:	bf00      	nop
 8011284:	20000128 	.word	0x20000128
	...

08011290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011290:	f3ef 8009 	mrs	r0, PSP
 8011294:	f3bf 8f6f 	isb	sy
 8011298:	4b15      	ldr	r3, [pc, #84]	; (80112f0 <pxCurrentTCBConst>)
 801129a:	681a      	ldr	r2, [r3, #0]
 801129c:	f01e 0f10 	tst.w	lr, #16
 80112a0:	bf08      	it	eq
 80112a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80112a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112aa:	6010      	str	r0, [r2, #0]
 80112ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80112b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80112b4:	f380 8811 	msr	BASEPRI, r0
 80112b8:	f3bf 8f4f 	dsb	sy
 80112bc:	f3bf 8f6f 	isb	sy
 80112c0:	f7fe fed8 	bl	8010074 <vTaskSwitchContext>
 80112c4:	f04f 0000 	mov.w	r0, #0
 80112c8:	f380 8811 	msr	BASEPRI, r0
 80112cc:	bc09      	pop	{r0, r3}
 80112ce:	6819      	ldr	r1, [r3, #0]
 80112d0:	6808      	ldr	r0, [r1, #0]
 80112d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112d6:	f01e 0f10 	tst.w	lr, #16
 80112da:	bf08      	it	eq
 80112dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80112e0:	f380 8809 	msr	PSP, r0
 80112e4:	f3bf 8f6f 	isb	sy
 80112e8:	4770      	bx	lr
 80112ea:	bf00      	nop
 80112ec:	f3af 8000 	nop.w

080112f0 <pxCurrentTCBConst>:
 80112f0:	200008d8 	.word	0x200008d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80112f4:	bf00      	nop
 80112f6:	bf00      	nop

080112f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b082      	sub	sp, #8
 80112fc:	af00      	add	r7, sp, #0
	__asm volatile
 80112fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011302:	f383 8811 	msr	BASEPRI, r3
 8011306:	f3bf 8f6f 	isb	sy
 801130a:	f3bf 8f4f 	dsb	sy
 801130e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011310:	f7fe fdf8 	bl	800ff04 <xTaskIncrementTick>
 8011314:	4603      	mov	r3, r0
 8011316:	2b00      	cmp	r3, #0
 8011318:	d003      	beq.n	8011322 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801131a:	4b06      	ldr	r3, [pc, #24]	; (8011334 <SysTick_Handler+0x3c>)
 801131c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011320:	601a      	str	r2, [r3, #0]
 8011322:	2300      	movs	r3, #0
 8011324:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011326:	683b      	ldr	r3, [r7, #0]
 8011328:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801132c:	bf00      	nop
 801132e:	3708      	adds	r7, #8
 8011330:	46bd      	mov	sp, r7
 8011332:	bd80      	pop	{r7, pc}
 8011334:	e000ed04 	.word	0xe000ed04

08011338 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011338:	b480      	push	{r7}
 801133a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801133c:	4b0b      	ldr	r3, [pc, #44]	; (801136c <vPortSetupTimerInterrupt+0x34>)
 801133e:	2200      	movs	r2, #0
 8011340:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011342:	4b0b      	ldr	r3, [pc, #44]	; (8011370 <vPortSetupTimerInterrupt+0x38>)
 8011344:	2200      	movs	r2, #0
 8011346:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011348:	4b0a      	ldr	r3, [pc, #40]	; (8011374 <vPortSetupTimerInterrupt+0x3c>)
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	4a0a      	ldr	r2, [pc, #40]	; (8011378 <vPortSetupTimerInterrupt+0x40>)
 801134e:	fba2 2303 	umull	r2, r3, r2, r3
 8011352:	099b      	lsrs	r3, r3, #6
 8011354:	4a09      	ldr	r2, [pc, #36]	; (801137c <vPortSetupTimerInterrupt+0x44>)
 8011356:	3b01      	subs	r3, #1
 8011358:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801135a:	4b04      	ldr	r3, [pc, #16]	; (801136c <vPortSetupTimerInterrupt+0x34>)
 801135c:	2207      	movs	r2, #7
 801135e:	601a      	str	r2, [r3, #0]
}
 8011360:	bf00      	nop
 8011362:	46bd      	mov	sp, r7
 8011364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011368:	4770      	bx	lr
 801136a:	bf00      	nop
 801136c:	e000e010 	.word	0xe000e010
 8011370:	e000e018 	.word	0xe000e018
 8011374:	200000a4 	.word	0x200000a4
 8011378:	10624dd3 	.word	0x10624dd3
 801137c:	e000e014 	.word	0xe000e014

08011380 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011380:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011390 <vPortEnableVFP+0x10>
 8011384:	6801      	ldr	r1, [r0, #0]
 8011386:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801138a:	6001      	str	r1, [r0, #0]
 801138c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801138e:	bf00      	nop
 8011390:	e000ed88 	.word	0xe000ed88

08011394 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011394:	b480      	push	{r7}
 8011396:	b085      	sub	sp, #20
 8011398:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801139a:	f3ef 8305 	mrs	r3, IPSR
 801139e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	2b0f      	cmp	r3, #15
 80113a4:	d913      	bls.n	80113ce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80113a6:	4a16      	ldr	r2, [pc, #88]	; (8011400 <vPortValidateInterruptPriority+0x6c>)
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	4413      	add	r3, r2
 80113ac:	781b      	ldrb	r3, [r3, #0]
 80113ae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80113b0:	4b14      	ldr	r3, [pc, #80]	; (8011404 <vPortValidateInterruptPriority+0x70>)
 80113b2:	781b      	ldrb	r3, [r3, #0]
 80113b4:	7afa      	ldrb	r2, [r7, #11]
 80113b6:	429a      	cmp	r2, r3
 80113b8:	d209      	bcs.n	80113ce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80113ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113be:	f383 8811 	msr	BASEPRI, r3
 80113c2:	f3bf 8f6f 	isb	sy
 80113c6:	f3bf 8f4f 	dsb	sy
 80113ca:	607b      	str	r3, [r7, #4]
 80113cc:	e7fe      	b.n	80113cc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80113ce:	4b0e      	ldr	r3, [pc, #56]	; (8011408 <vPortValidateInterruptPriority+0x74>)
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80113d6:	4b0d      	ldr	r3, [pc, #52]	; (801140c <vPortValidateInterruptPriority+0x78>)
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	429a      	cmp	r2, r3
 80113dc:	d909      	bls.n	80113f2 <vPortValidateInterruptPriority+0x5e>
 80113de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113e2:	f383 8811 	msr	BASEPRI, r3
 80113e6:	f3bf 8f6f 	isb	sy
 80113ea:	f3bf 8f4f 	dsb	sy
 80113ee:	603b      	str	r3, [r7, #0]
 80113f0:	e7fe      	b.n	80113f0 <vPortValidateInterruptPriority+0x5c>
	}
 80113f2:	bf00      	nop
 80113f4:	3714      	adds	r7, #20
 80113f6:	46bd      	mov	sp, r7
 80113f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fc:	4770      	bx	lr
 80113fe:	bf00      	nop
 8011400:	e000e3f0 	.word	0xe000e3f0
 8011404:	20000f04 	.word	0x20000f04
 8011408:	e000ed0c 	.word	0xe000ed0c
 801140c:	20000f08 	.word	0x20000f08

08011410 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011410:	b580      	push	{r7, lr}
 8011412:	b08a      	sub	sp, #40	; 0x28
 8011414:	af00      	add	r7, sp, #0
 8011416:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011418:	2300      	movs	r3, #0
 801141a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801141c:	f7fe fcb8 	bl	800fd90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011420:	4b57      	ldr	r3, [pc, #348]	; (8011580 <pvPortMalloc+0x170>)
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d101      	bne.n	801142c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011428:	f000 f90c 	bl	8011644 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801142c:	4b55      	ldr	r3, [pc, #340]	; (8011584 <pvPortMalloc+0x174>)
 801142e:	681a      	ldr	r2, [r3, #0]
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	4013      	ands	r3, r2
 8011434:	2b00      	cmp	r3, #0
 8011436:	f040 808c 	bne.w	8011552 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d01c      	beq.n	801147a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8011440:	2208      	movs	r2, #8
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	4413      	add	r3, r2
 8011446:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	f003 0307 	and.w	r3, r3, #7
 801144e:	2b00      	cmp	r3, #0
 8011450:	d013      	beq.n	801147a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	f023 0307 	bic.w	r3, r3, #7
 8011458:	3308      	adds	r3, #8
 801145a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	f003 0307 	and.w	r3, r3, #7
 8011462:	2b00      	cmp	r3, #0
 8011464:	d009      	beq.n	801147a <pvPortMalloc+0x6a>
 8011466:	f04f 0350 	mov.w	r3, #80	; 0x50
 801146a:	f383 8811 	msr	BASEPRI, r3
 801146e:	f3bf 8f6f 	isb	sy
 8011472:	f3bf 8f4f 	dsb	sy
 8011476:	617b      	str	r3, [r7, #20]
 8011478:	e7fe      	b.n	8011478 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d068      	beq.n	8011552 <pvPortMalloc+0x142>
 8011480:	4b41      	ldr	r3, [pc, #260]	; (8011588 <pvPortMalloc+0x178>)
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	687a      	ldr	r2, [r7, #4]
 8011486:	429a      	cmp	r2, r3
 8011488:	d863      	bhi.n	8011552 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801148a:	4b40      	ldr	r3, [pc, #256]	; (801158c <pvPortMalloc+0x17c>)
 801148c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801148e:	4b3f      	ldr	r3, [pc, #252]	; (801158c <pvPortMalloc+0x17c>)
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011494:	e004      	b.n	80114a0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8011496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011498:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80114a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114a2:	685b      	ldr	r3, [r3, #4]
 80114a4:	687a      	ldr	r2, [r7, #4]
 80114a6:	429a      	cmp	r2, r3
 80114a8:	d903      	bls.n	80114b2 <pvPortMalloc+0xa2>
 80114aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d1f1      	bne.n	8011496 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80114b2:	4b33      	ldr	r3, [pc, #204]	; (8011580 <pvPortMalloc+0x170>)
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80114b8:	429a      	cmp	r2, r3
 80114ba:	d04a      	beq.n	8011552 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80114bc:	6a3b      	ldr	r3, [r7, #32]
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	2208      	movs	r2, #8
 80114c2:	4413      	add	r3, r2
 80114c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80114c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114c8:	681a      	ldr	r2, [r3, #0]
 80114ca:	6a3b      	ldr	r3, [r7, #32]
 80114cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80114ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114d0:	685a      	ldr	r2, [r3, #4]
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	1ad2      	subs	r2, r2, r3
 80114d6:	2308      	movs	r3, #8
 80114d8:	005b      	lsls	r3, r3, #1
 80114da:	429a      	cmp	r2, r3
 80114dc:	d91e      	bls.n	801151c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80114de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	4413      	add	r3, r2
 80114e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80114e6:	69bb      	ldr	r3, [r7, #24]
 80114e8:	f003 0307 	and.w	r3, r3, #7
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d009      	beq.n	8011504 <pvPortMalloc+0xf4>
 80114f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114f4:	f383 8811 	msr	BASEPRI, r3
 80114f8:	f3bf 8f6f 	isb	sy
 80114fc:	f3bf 8f4f 	dsb	sy
 8011500:	613b      	str	r3, [r7, #16]
 8011502:	e7fe      	b.n	8011502 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011506:	685a      	ldr	r2, [r3, #4]
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	1ad2      	subs	r2, r2, r3
 801150c:	69bb      	ldr	r3, [r7, #24]
 801150e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011512:	687a      	ldr	r2, [r7, #4]
 8011514:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011516:	69b8      	ldr	r0, [r7, #24]
 8011518:	f000 f8f6 	bl	8011708 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801151c:	4b1a      	ldr	r3, [pc, #104]	; (8011588 <pvPortMalloc+0x178>)
 801151e:	681a      	ldr	r2, [r3, #0]
 8011520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011522:	685b      	ldr	r3, [r3, #4]
 8011524:	1ad3      	subs	r3, r2, r3
 8011526:	4a18      	ldr	r2, [pc, #96]	; (8011588 <pvPortMalloc+0x178>)
 8011528:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801152a:	4b17      	ldr	r3, [pc, #92]	; (8011588 <pvPortMalloc+0x178>)
 801152c:	681a      	ldr	r2, [r3, #0]
 801152e:	4b18      	ldr	r3, [pc, #96]	; (8011590 <pvPortMalloc+0x180>)
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	429a      	cmp	r2, r3
 8011534:	d203      	bcs.n	801153e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011536:	4b14      	ldr	r3, [pc, #80]	; (8011588 <pvPortMalloc+0x178>)
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	4a15      	ldr	r2, [pc, #84]	; (8011590 <pvPortMalloc+0x180>)
 801153c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011540:	685a      	ldr	r2, [r3, #4]
 8011542:	4b10      	ldr	r3, [pc, #64]	; (8011584 <pvPortMalloc+0x174>)
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	431a      	orrs	r2, r3
 8011548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801154a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801154e:	2200      	movs	r2, #0
 8011550:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011552:	f7fe fc2b 	bl	800fdac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011556:	69fb      	ldr	r3, [r7, #28]
 8011558:	f003 0307 	and.w	r3, r3, #7
 801155c:	2b00      	cmp	r3, #0
 801155e:	d009      	beq.n	8011574 <pvPortMalloc+0x164>
 8011560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011564:	f383 8811 	msr	BASEPRI, r3
 8011568:	f3bf 8f6f 	isb	sy
 801156c:	f3bf 8f4f 	dsb	sy
 8011570:	60fb      	str	r3, [r7, #12]
 8011572:	e7fe      	b.n	8011572 <pvPortMalloc+0x162>
	return pvReturn;
 8011574:	69fb      	ldr	r3, [r7, #28]
}
 8011576:	4618      	mov	r0, r3
 8011578:	3728      	adds	r7, #40	; 0x28
 801157a:	46bd      	mov	sp, r7
 801157c:	bd80      	pop	{r7, pc}
 801157e:	bf00      	nop
 8011580:	20004b14 	.word	0x20004b14
 8011584:	20004b20 	.word	0x20004b20
 8011588:	20004b18 	.word	0x20004b18
 801158c:	20004b0c 	.word	0x20004b0c
 8011590:	20004b1c 	.word	0x20004b1c

08011594 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011594:	b580      	push	{r7, lr}
 8011596:	b086      	sub	sp, #24
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d046      	beq.n	8011634 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80115a6:	2308      	movs	r3, #8
 80115a8:	425b      	negs	r3, r3
 80115aa:	697a      	ldr	r2, [r7, #20]
 80115ac:	4413      	add	r3, r2
 80115ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80115b0:	697b      	ldr	r3, [r7, #20]
 80115b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80115b4:	693b      	ldr	r3, [r7, #16]
 80115b6:	685a      	ldr	r2, [r3, #4]
 80115b8:	4b20      	ldr	r3, [pc, #128]	; (801163c <vPortFree+0xa8>)
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	4013      	ands	r3, r2
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d109      	bne.n	80115d6 <vPortFree+0x42>
 80115c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115c6:	f383 8811 	msr	BASEPRI, r3
 80115ca:	f3bf 8f6f 	isb	sy
 80115ce:	f3bf 8f4f 	dsb	sy
 80115d2:	60fb      	str	r3, [r7, #12]
 80115d4:	e7fe      	b.n	80115d4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80115d6:	693b      	ldr	r3, [r7, #16]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d009      	beq.n	80115f2 <vPortFree+0x5e>
 80115de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115e2:	f383 8811 	msr	BASEPRI, r3
 80115e6:	f3bf 8f6f 	isb	sy
 80115ea:	f3bf 8f4f 	dsb	sy
 80115ee:	60bb      	str	r3, [r7, #8]
 80115f0:	e7fe      	b.n	80115f0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80115f2:	693b      	ldr	r3, [r7, #16]
 80115f4:	685a      	ldr	r2, [r3, #4]
 80115f6:	4b11      	ldr	r3, [pc, #68]	; (801163c <vPortFree+0xa8>)
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	4013      	ands	r3, r2
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d019      	beq.n	8011634 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011600:	693b      	ldr	r3, [r7, #16]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d115      	bne.n	8011634 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011608:	693b      	ldr	r3, [r7, #16]
 801160a:	685a      	ldr	r2, [r3, #4]
 801160c:	4b0b      	ldr	r3, [pc, #44]	; (801163c <vPortFree+0xa8>)
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	43db      	mvns	r3, r3
 8011612:	401a      	ands	r2, r3
 8011614:	693b      	ldr	r3, [r7, #16]
 8011616:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011618:	f7fe fbba 	bl	800fd90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801161c:	693b      	ldr	r3, [r7, #16]
 801161e:	685a      	ldr	r2, [r3, #4]
 8011620:	4b07      	ldr	r3, [pc, #28]	; (8011640 <vPortFree+0xac>)
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	4413      	add	r3, r2
 8011626:	4a06      	ldr	r2, [pc, #24]	; (8011640 <vPortFree+0xac>)
 8011628:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801162a:	6938      	ldr	r0, [r7, #16]
 801162c:	f000 f86c 	bl	8011708 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011630:	f7fe fbbc 	bl	800fdac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011634:	bf00      	nop
 8011636:	3718      	adds	r7, #24
 8011638:	46bd      	mov	sp, r7
 801163a:	bd80      	pop	{r7, pc}
 801163c:	20004b20 	.word	0x20004b20
 8011640:	20004b18 	.word	0x20004b18

08011644 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011644:	b480      	push	{r7}
 8011646:	b085      	sub	sp, #20
 8011648:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801164a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801164e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011650:	4b27      	ldr	r3, [pc, #156]	; (80116f0 <prvHeapInit+0xac>)
 8011652:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	f003 0307 	and.w	r3, r3, #7
 801165a:	2b00      	cmp	r3, #0
 801165c:	d00c      	beq.n	8011678 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	3307      	adds	r3, #7
 8011662:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	f023 0307 	bic.w	r3, r3, #7
 801166a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801166c:	68ba      	ldr	r2, [r7, #8]
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	1ad3      	subs	r3, r2, r3
 8011672:	4a1f      	ldr	r2, [pc, #124]	; (80116f0 <prvHeapInit+0xac>)
 8011674:	4413      	add	r3, r2
 8011676:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801167c:	4a1d      	ldr	r2, [pc, #116]	; (80116f4 <prvHeapInit+0xb0>)
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011682:	4b1c      	ldr	r3, [pc, #112]	; (80116f4 <prvHeapInit+0xb0>)
 8011684:	2200      	movs	r2, #0
 8011686:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	68ba      	ldr	r2, [r7, #8]
 801168c:	4413      	add	r3, r2
 801168e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011690:	2208      	movs	r2, #8
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	1a9b      	subs	r3, r3, r2
 8011696:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	f023 0307 	bic.w	r3, r3, #7
 801169e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	4a15      	ldr	r2, [pc, #84]	; (80116f8 <prvHeapInit+0xb4>)
 80116a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80116a6:	4b14      	ldr	r3, [pc, #80]	; (80116f8 <prvHeapInit+0xb4>)
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	2200      	movs	r2, #0
 80116ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80116ae:	4b12      	ldr	r3, [pc, #72]	; (80116f8 <prvHeapInit+0xb4>)
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	2200      	movs	r2, #0
 80116b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80116ba:	683b      	ldr	r3, [r7, #0]
 80116bc:	68fa      	ldr	r2, [r7, #12]
 80116be:	1ad2      	subs	r2, r2, r3
 80116c0:	683b      	ldr	r3, [r7, #0]
 80116c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80116c4:	4b0c      	ldr	r3, [pc, #48]	; (80116f8 <prvHeapInit+0xb4>)
 80116c6:	681a      	ldr	r2, [r3, #0]
 80116c8:	683b      	ldr	r3, [r7, #0]
 80116ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80116cc:	683b      	ldr	r3, [r7, #0]
 80116ce:	685b      	ldr	r3, [r3, #4]
 80116d0:	4a0a      	ldr	r2, [pc, #40]	; (80116fc <prvHeapInit+0xb8>)
 80116d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80116d4:	683b      	ldr	r3, [r7, #0]
 80116d6:	685b      	ldr	r3, [r3, #4]
 80116d8:	4a09      	ldr	r2, [pc, #36]	; (8011700 <prvHeapInit+0xbc>)
 80116da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80116dc:	4b09      	ldr	r3, [pc, #36]	; (8011704 <prvHeapInit+0xc0>)
 80116de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80116e2:	601a      	str	r2, [r3, #0]
}
 80116e4:	bf00      	nop
 80116e6:	3714      	adds	r7, #20
 80116e8:	46bd      	mov	sp, r7
 80116ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ee:	4770      	bx	lr
 80116f0:	20000f0c 	.word	0x20000f0c
 80116f4:	20004b0c 	.word	0x20004b0c
 80116f8:	20004b14 	.word	0x20004b14
 80116fc:	20004b1c 	.word	0x20004b1c
 8011700:	20004b18 	.word	0x20004b18
 8011704:	20004b20 	.word	0x20004b20

08011708 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011708:	b480      	push	{r7}
 801170a:	b085      	sub	sp, #20
 801170c:	af00      	add	r7, sp, #0
 801170e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011710:	4b28      	ldr	r3, [pc, #160]	; (80117b4 <prvInsertBlockIntoFreeList+0xac>)
 8011712:	60fb      	str	r3, [r7, #12]
 8011714:	e002      	b.n	801171c <prvInsertBlockIntoFreeList+0x14>
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	60fb      	str	r3, [r7, #12]
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	687a      	ldr	r2, [r7, #4]
 8011722:	429a      	cmp	r2, r3
 8011724:	d8f7      	bhi.n	8011716 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	685b      	ldr	r3, [r3, #4]
 801172e:	68ba      	ldr	r2, [r7, #8]
 8011730:	4413      	add	r3, r2
 8011732:	687a      	ldr	r2, [r7, #4]
 8011734:	429a      	cmp	r2, r3
 8011736:	d108      	bne.n	801174a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	685a      	ldr	r2, [r3, #4]
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	685b      	ldr	r3, [r3, #4]
 8011740:	441a      	add	r2, r3
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	685b      	ldr	r3, [r3, #4]
 8011752:	68ba      	ldr	r2, [r7, #8]
 8011754:	441a      	add	r2, r3
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	429a      	cmp	r2, r3
 801175c:	d118      	bne.n	8011790 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	681a      	ldr	r2, [r3, #0]
 8011762:	4b15      	ldr	r3, [pc, #84]	; (80117b8 <prvInsertBlockIntoFreeList+0xb0>)
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	429a      	cmp	r2, r3
 8011768:	d00d      	beq.n	8011786 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	685a      	ldr	r2, [r3, #4]
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	685b      	ldr	r3, [r3, #4]
 8011774:	441a      	add	r2, r3
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	681a      	ldr	r2, [r3, #0]
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	601a      	str	r2, [r3, #0]
 8011784:	e008      	b.n	8011798 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011786:	4b0c      	ldr	r3, [pc, #48]	; (80117b8 <prvInsertBlockIntoFreeList+0xb0>)
 8011788:	681a      	ldr	r2, [r3, #0]
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	601a      	str	r2, [r3, #0]
 801178e:	e003      	b.n	8011798 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	681a      	ldr	r2, [r3, #0]
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011798:	68fa      	ldr	r2, [r7, #12]
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	429a      	cmp	r2, r3
 801179e:	d002      	beq.n	80117a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	687a      	ldr	r2, [r7, #4]
 80117a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80117a6:	bf00      	nop
 80117a8:	3714      	adds	r7, #20
 80117aa:	46bd      	mov	sp, r7
 80117ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b0:	4770      	bx	lr
 80117b2:	bf00      	nop
 80117b4:	20004b0c 	.word	0x20004b0c
 80117b8:	20004b14 	.word	0x20004b14

080117bc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80117bc:	b580      	push	{r7, lr}
 80117be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80117c0:	2201      	movs	r2, #1
 80117c2:	490e      	ldr	r1, [pc, #56]	; (80117fc <MX_USB_HOST_Init+0x40>)
 80117c4:	480e      	ldr	r0, [pc, #56]	; (8011800 <MX_USB_HOST_Init+0x44>)
 80117c6:	f7fa fedb 	bl	800c580 <USBH_Init>
 80117ca:	4603      	mov	r3, r0
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d001      	beq.n	80117d4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80117d0:	f7f0 fa18 	bl	8001c04 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80117d4:	490b      	ldr	r1, [pc, #44]	; (8011804 <MX_USB_HOST_Init+0x48>)
 80117d6:	480a      	ldr	r0, [pc, #40]	; (8011800 <MX_USB_HOST_Init+0x44>)
 80117d8:	f7fa ff82 	bl	800c6e0 <USBH_RegisterClass>
 80117dc:	4603      	mov	r3, r0
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d001      	beq.n	80117e6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80117e2:	f7f0 fa0f 	bl	8001c04 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80117e6:	4806      	ldr	r0, [pc, #24]	; (8011800 <MX_USB_HOST_Init+0x44>)
 80117e8:	f7fb f806 	bl	800c7f8 <USBH_Start>
 80117ec:	4603      	mov	r3, r0
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d001      	beq.n	80117f6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80117f2:	f7f0 fa07 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80117f6:	bf00      	nop
 80117f8:	bd80      	pop	{r7, pc}
 80117fa:	bf00      	nop
 80117fc:	08011809 	.word	0x08011809
 8011800:	20004fe8 	.word	0x20004fe8
 8011804:	20000108 	.word	0x20000108

08011808 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8011808:	b480      	push	{r7}
 801180a:	b083      	sub	sp, #12
 801180c:	af00      	add	r7, sp, #0
 801180e:	6078      	str	r0, [r7, #4]
 8011810:	460b      	mov	r3, r1
 8011812:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8011814:	78fb      	ldrb	r3, [r7, #3]
 8011816:	3b01      	subs	r3, #1
 8011818:	2b04      	cmp	r3, #4
 801181a:	d819      	bhi.n	8011850 <USBH_UserProcess+0x48>
 801181c:	a201      	add	r2, pc, #4	; (adr r2, 8011824 <USBH_UserProcess+0x1c>)
 801181e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011822:	bf00      	nop
 8011824:	08011851 	.word	0x08011851
 8011828:	08011841 	.word	0x08011841
 801182c:	08011851 	.word	0x08011851
 8011830:	08011849 	.word	0x08011849
 8011834:	08011839 	.word	0x08011839
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8011838:	4b09      	ldr	r3, [pc, #36]	; (8011860 <USBH_UserProcess+0x58>)
 801183a:	2203      	movs	r2, #3
 801183c:	701a      	strb	r2, [r3, #0]
  break;
 801183e:	e008      	b.n	8011852 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8011840:	4b07      	ldr	r3, [pc, #28]	; (8011860 <USBH_UserProcess+0x58>)
 8011842:	2202      	movs	r2, #2
 8011844:	701a      	strb	r2, [r3, #0]
  break;
 8011846:	e004      	b.n	8011852 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8011848:	4b05      	ldr	r3, [pc, #20]	; (8011860 <USBH_UserProcess+0x58>)
 801184a:	2201      	movs	r2, #1
 801184c:	701a      	strb	r2, [r3, #0]
  break;
 801184e:	e000      	b.n	8011852 <USBH_UserProcess+0x4a>

  default:
  break;
 8011850:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8011852:	bf00      	nop
 8011854:	370c      	adds	r7, #12
 8011856:	46bd      	mov	sp, r7
 8011858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801185c:	4770      	bx	lr
 801185e:	bf00      	nop
 8011860:	20004b24 	.word	0x20004b24

08011864 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8011864:	b580      	push	{r7, lr}
 8011866:	b08a      	sub	sp, #40	; 0x28
 8011868:	af00      	add	r7, sp, #0
 801186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801186c:	f107 0314 	add.w	r3, r7, #20
 8011870:	2200      	movs	r2, #0
 8011872:	601a      	str	r2, [r3, #0]
 8011874:	605a      	str	r2, [r3, #4]
 8011876:	609a      	str	r2, [r3, #8]
 8011878:	60da      	str	r2, [r3, #12]
 801187a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011884:	d147      	bne.n	8011916 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011886:	2300      	movs	r3, #0
 8011888:	613b      	str	r3, [r7, #16]
 801188a:	4b25      	ldr	r3, [pc, #148]	; (8011920 <HAL_HCD_MspInit+0xbc>)
 801188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801188e:	4a24      	ldr	r2, [pc, #144]	; (8011920 <HAL_HCD_MspInit+0xbc>)
 8011890:	f043 0301 	orr.w	r3, r3, #1
 8011894:	6313      	str	r3, [r2, #48]	; 0x30
 8011896:	4b22      	ldr	r3, [pc, #136]	; (8011920 <HAL_HCD_MspInit+0xbc>)
 8011898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801189a:	f003 0301 	and.w	r3, r3, #1
 801189e:	613b      	str	r3, [r7, #16]
 80118a0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80118a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80118a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80118a8:	2300      	movs	r3, #0
 80118aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80118ac:	2300      	movs	r3, #0
 80118ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80118b0:	f107 0314 	add.w	r3, r7, #20
 80118b4:	4619      	mov	r1, r3
 80118b6:	481b      	ldr	r0, [pc, #108]	; (8011924 <HAL_HCD_MspInit+0xc0>)
 80118b8:	f7f3 fa20 	bl	8004cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80118bc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80118c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80118c2:	2302      	movs	r3, #2
 80118c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80118c6:	2300      	movs	r3, #0
 80118c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80118ca:	2303      	movs	r3, #3
 80118cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80118ce:	230a      	movs	r3, #10
 80118d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80118d2:	f107 0314 	add.w	r3, r7, #20
 80118d6:	4619      	mov	r1, r3
 80118d8:	4812      	ldr	r0, [pc, #72]	; (8011924 <HAL_HCD_MspInit+0xc0>)
 80118da:	f7f3 fa0f 	bl	8004cfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80118de:	4b10      	ldr	r3, [pc, #64]	; (8011920 <HAL_HCD_MspInit+0xbc>)
 80118e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118e2:	4a0f      	ldr	r2, [pc, #60]	; (8011920 <HAL_HCD_MspInit+0xbc>)
 80118e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80118e8:	6353      	str	r3, [r2, #52]	; 0x34
 80118ea:	2300      	movs	r3, #0
 80118ec:	60fb      	str	r3, [r7, #12]
 80118ee:	4b0c      	ldr	r3, [pc, #48]	; (8011920 <HAL_HCD_MspInit+0xbc>)
 80118f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118f2:	4a0b      	ldr	r2, [pc, #44]	; (8011920 <HAL_HCD_MspInit+0xbc>)
 80118f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80118f8:	6453      	str	r3, [r2, #68]	; 0x44
 80118fa:	4b09      	ldr	r3, [pc, #36]	; (8011920 <HAL_HCD_MspInit+0xbc>)
 80118fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011902:	60fb      	str	r3, [r7, #12]
 8011904:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011906:	2200      	movs	r2, #0
 8011908:	2100      	movs	r1, #0
 801190a:	2043      	movs	r0, #67	; 0x43
 801190c:	f7f2 feae 	bl	800466c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011910:	2043      	movs	r0, #67	; 0x43
 8011912:	f7f2 fec7 	bl	80046a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011916:	bf00      	nop
 8011918:	3728      	adds	r7, #40	; 0x28
 801191a:	46bd      	mov	sp, r7
 801191c:	bd80      	pop	{r7, pc}
 801191e:	bf00      	nop
 8011920:	40023800 	.word	0x40023800
 8011924:	40020000 	.word	0x40020000

08011928 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8011928:	b580      	push	{r7, lr}
 801192a:	b082      	sub	sp, #8
 801192c:	af00      	add	r7, sp, #0
 801192e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011936:	4618      	mov	r0, r3
 8011938:	f7fb fc0b 	bl	800d152 <USBH_LL_IncTimer>
}
 801193c:	bf00      	nop
 801193e:	3708      	adds	r7, #8
 8011940:	46bd      	mov	sp, r7
 8011942:	bd80      	pop	{r7, pc}

08011944 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011944:	b580      	push	{r7, lr}
 8011946:	b082      	sub	sp, #8
 8011948:	af00      	add	r7, sp, #0
 801194a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011952:	4618      	mov	r0, r3
 8011954:	f7fb fc4f 	bl	800d1f6 <USBH_LL_Connect>
}
 8011958:	bf00      	nop
 801195a:	3708      	adds	r7, #8
 801195c:	46bd      	mov	sp, r7
 801195e:	bd80      	pop	{r7, pc}

08011960 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011960:	b580      	push	{r7, lr}
 8011962:	b082      	sub	sp, #8
 8011964:	af00      	add	r7, sp, #0
 8011966:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801196e:	4618      	mov	r0, r3
 8011970:	f7fb fc64 	bl	800d23c <USBH_LL_Disconnect>
}
 8011974:	bf00      	nop
 8011976:	3708      	adds	r7, #8
 8011978:	46bd      	mov	sp, r7
 801197a:	bd80      	pop	{r7, pc}

0801197c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801197c:	b580      	push	{r7, lr}
 801197e:	b082      	sub	sp, #8
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]
 8011984:	460b      	mov	r3, r1
 8011986:	70fb      	strb	r3, [r7, #3]
 8011988:	4613      	mov	r3, r2
 801198a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011992:	4618      	mov	r0, r3
 8011994:	f7fb fc9b 	bl	800d2ce <USBH_LL_NotifyURBChange>
#endif
}
 8011998:	bf00      	nop
 801199a:	3708      	adds	r7, #8
 801199c:	46bd      	mov	sp, r7
 801199e:	bd80      	pop	{r7, pc}

080119a0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b082      	sub	sp, #8
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80119ae:	4618      	mov	r0, r3
 80119b0:	f7fb fbf9 	bl	800d1a6 <USBH_LL_PortEnabled>
}
 80119b4:	bf00      	nop
 80119b6:	3708      	adds	r7, #8
 80119b8:	46bd      	mov	sp, r7
 80119ba:	bd80      	pop	{r7, pc}

080119bc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80119bc:	b580      	push	{r7, lr}
 80119be:	b082      	sub	sp, #8
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80119ca:	4618      	mov	r0, r3
 80119cc:	f7fb fc05 	bl	800d1da <USBH_LL_PortDisabled>
}
 80119d0:	bf00      	nop
 80119d2:	3708      	adds	r7, #8
 80119d4:	46bd      	mov	sp, r7
 80119d6:	bd80      	pop	{r7, pc}

080119d8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b082      	sub	sp, #8
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80119e6:	2b01      	cmp	r3, #1
 80119e8:	d12a      	bne.n	8011a40 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80119ea:	4a18      	ldr	r2, [pc, #96]	; (8011a4c <USBH_LL_Init+0x74>)
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	4a15      	ldr	r2, [pc, #84]	; (8011a4c <USBH_LL_Init+0x74>)
 80119f6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80119fa:	4b14      	ldr	r3, [pc, #80]	; (8011a4c <USBH_LL_Init+0x74>)
 80119fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011a00:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8011a02:	4b12      	ldr	r3, [pc, #72]	; (8011a4c <USBH_LL_Init+0x74>)
 8011a04:	220c      	movs	r2, #12
 8011a06:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8011a08:	4b10      	ldr	r3, [pc, #64]	; (8011a4c <USBH_LL_Init+0x74>)
 8011a0a:	2201      	movs	r2, #1
 8011a0c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011a0e:	4b0f      	ldr	r3, [pc, #60]	; (8011a4c <USBH_LL_Init+0x74>)
 8011a10:	2200      	movs	r2, #0
 8011a12:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8011a14:	4b0d      	ldr	r3, [pc, #52]	; (8011a4c <USBH_LL_Init+0x74>)
 8011a16:	2202      	movs	r2, #2
 8011a18:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011a1a:	4b0c      	ldr	r3, [pc, #48]	; (8011a4c <USBH_LL_Init+0x74>)
 8011a1c:	2200      	movs	r2, #0
 8011a1e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8011a20:	480a      	ldr	r0, [pc, #40]	; (8011a4c <USBH_LL_Init+0x74>)
 8011a22:	f7f3 fb52 	bl	80050ca <HAL_HCD_Init>
 8011a26:	4603      	mov	r3, r0
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d001      	beq.n	8011a30 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8011a2c:	f7f0 f8ea 	bl	8001c04 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8011a30:	4806      	ldr	r0, [pc, #24]	; (8011a4c <USBH_LL_Init+0x74>)
 8011a32:	f7f3 ff55 	bl	80058e0 <HAL_HCD_GetCurrentFrame>
 8011a36:	4603      	mov	r3, r0
 8011a38:	4619      	mov	r1, r3
 8011a3a:	6878      	ldr	r0, [r7, #4]
 8011a3c:	f7fb fb7a 	bl	800d134 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8011a40:	2300      	movs	r3, #0
}
 8011a42:	4618      	mov	r0, r3
 8011a44:	3708      	adds	r7, #8
 8011a46:	46bd      	mov	sp, r7
 8011a48:	bd80      	pop	{r7, pc}
 8011a4a:	bf00      	nop
 8011a4c:	200053cc 	.word	0x200053cc

08011a50 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b084      	sub	sp, #16
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a58:	2300      	movs	r3, #0
 8011a5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011a66:	4618      	mov	r0, r3
 8011a68:	f7f3 fec2 	bl	80057f0 <HAL_HCD_Start>
 8011a6c:	4603      	mov	r3, r0
 8011a6e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011a70:	7bfb      	ldrb	r3, [r7, #15]
 8011a72:	4618      	mov	r0, r3
 8011a74:	f000 f95c 	bl	8011d30 <USBH_Get_USB_Status>
 8011a78:	4603      	mov	r3, r0
 8011a7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011a7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8011a7e:	4618      	mov	r0, r3
 8011a80:	3710      	adds	r7, #16
 8011a82:	46bd      	mov	sp, r7
 8011a84:	bd80      	pop	{r7, pc}

08011a86 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8011a86:	b580      	push	{r7, lr}
 8011a88:	b084      	sub	sp, #16
 8011a8a:	af00      	add	r7, sp, #0
 8011a8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a8e:	2300      	movs	r3, #0
 8011a90:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011a92:	2300      	movs	r3, #0
 8011a94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	f7f3 feca 	bl	8005836 <HAL_HCD_Stop>
 8011aa2:	4603      	mov	r3, r0
 8011aa4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011aa6:	7bfb      	ldrb	r3, [r7, #15]
 8011aa8:	4618      	mov	r0, r3
 8011aaa:	f000 f941 	bl	8011d30 <USBH_Get_USB_Status>
 8011aae:	4603      	mov	r3, r0
 8011ab0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011ab2:	7bbb      	ldrb	r3, [r7, #14]
}
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	3710      	adds	r7, #16
 8011ab8:	46bd      	mov	sp, r7
 8011aba:	bd80      	pop	{r7, pc}

08011abc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b084      	sub	sp, #16
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8011ac4:	2301      	movs	r3, #1
 8011ac6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011ace:	4618      	mov	r0, r3
 8011ad0:	f7f3 ff14 	bl	80058fc <HAL_HCD_GetCurrentSpeed>
 8011ad4:	4603      	mov	r3, r0
 8011ad6:	2b01      	cmp	r3, #1
 8011ad8:	d007      	beq.n	8011aea <USBH_LL_GetSpeed+0x2e>
 8011ada:	2b01      	cmp	r3, #1
 8011adc:	d302      	bcc.n	8011ae4 <USBH_LL_GetSpeed+0x28>
 8011ade:	2b02      	cmp	r3, #2
 8011ae0:	d006      	beq.n	8011af0 <USBH_LL_GetSpeed+0x34>
 8011ae2:	e008      	b.n	8011af6 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	73fb      	strb	r3, [r7, #15]
    break;
 8011ae8:	e008      	b.n	8011afc <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8011aea:	2301      	movs	r3, #1
 8011aec:	73fb      	strb	r3, [r7, #15]
    break;
 8011aee:	e005      	b.n	8011afc <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8011af0:	2302      	movs	r3, #2
 8011af2:	73fb      	strb	r3, [r7, #15]
    break;
 8011af4:	e002      	b.n	8011afc <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8011af6:	2301      	movs	r3, #1
 8011af8:	73fb      	strb	r3, [r7, #15]
    break;
 8011afa:	bf00      	nop
  }
  return  speed;
 8011afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011afe:	4618      	mov	r0, r3
 8011b00:	3710      	adds	r7, #16
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bd80      	pop	{r7, pc}

08011b06 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8011b06:	b580      	push	{r7, lr}
 8011b08:	b084      	sub	sp, #16
 8011b0a:	af00      	add	r7, sp, #0
 8011b0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b0e:	2300      	movs	r3, #0
 8011b10:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011b12:	2300      	movs	r3, #0
 8011b14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	f7f3 fea7 	bl	8005870 <HAL_HCD_ResetPort>
 8011b22:	4603      	mov	r3, r0
 8011b24:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011b26:	7bfb      	ldrb	r3, [r7, #15]
 8011b28:	4618      	mov	r0, r3
 8011b2a:	f000 f901 	bl	8011d30 <USBH_Get_USB_Status>
 8011b2e:	4603      	mov	r3, r0
 8011b30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b32:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b34:	4618      	mov	r0, r3
 8011b36:	3710      	adds	r7, #16
 8011b38:	46bd      	mov	sp, r7
 8011b3a:	bd80      	pop	{r7, pc}

08011b3c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011b3c:	b580      	push	{r7, lr}
 8011b3e:	b082      	sub	sp, #8
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	6078      	str	r0, [r7, #4]
 8011b44:	460b      	mov	r3, r1
 8011b46:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011b4e:	78fa      	ldrb	r2, [r7, #3]
 8011b50:	4611      	mov	r1, r2
 8011b52:	4618      	mov	r0, r3
 8011b54:	f7f3 feaf 	bl	80058b6 <HAL_HCD_HC_GetXferCount>
 8011b58:	4603      	mov	r3, r0
}
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	3708      	adds	r7, #8
 8011b5e:	46bd      	mov	sp, r7
 8011b60:	bd80      	pop	{r7, pc}

08011b62 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011b62:	b590      	push	{r4, r7, lr}
 8011b64:	b089      	sub	sp, #36	; 0x24
 8011b66:	af04      	add	r7, sp, #16
 8011b68:	6078      	str	r0, [r7, #4]
 8011b6a:	4608      	mov	r0, r1
 8011b6c:	4611      	mov	r1, r2
 8011b6e:	461a      	mov	r2, r3
 8011b70:	4603      	mov	r3, r0
 8011b72:	70fb      	strb	r3, [r7, #3]
 8011b74:	460b      	mov	r3, r1
 8011b76:	70bb      	strb	r3, [r7, #2]
 8011b78:	4613      	mov	r3, r2
 8011b7a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011b80:	2300      	movs	r3, #0
 8011b82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8011b8a:	787c      	ldrb	r4, [r7, #1]
 8011b8c:	78ba      	ldrb	r2, [r7, #2]
 8011b8e:	78f9      	ldrb	r1, [r7, #3]
 8011b90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011b92:	9302      	str	r3, [sp, #8]
 8011b94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011b98:	9301      	str	r3, [sp, #4]
 8011b9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011b9e:	9300      	str	r3, [sp, #0]
 8011ba0:	4623      	mov	r3, r4
 8011ba2:	f7f3 faf4 	bl	800518e <HAL_HCD_HC_Init>
 8011ba6:	4603      	mov	r3, r0
 8011ba8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8011baa:	7bfb      	ldrb	r3, [r7, #15]
 8011bac:	4618      	mov	r0, r3
 8011bae:	f000 f8bf 	bl	8011d30 <USBH_Get_USB_Status>
 8011bb2:	4603      	mov	r3, r0
 8011bb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011bb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8011bb8:	4618      	mov	r0, r3
 8011bba:	3714      	adds	r7, #20
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	bd90      	pop	{r4, r7, pc}

08011bc0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b084      	sub	sp, #16
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
 8011bc8:	460b      	mov	r3, r1
 8011bca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011bcc:	2300      	movs	r3, #0
 8011bce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011bda:	78fa      	ldrb	r2, [r7, #3]
 8011bdc:	4611      	mov	r1, r2
 8011bde:	4618      	mov	r0, r3
 8011be0:	f7f3 fb6d 	bl	80052be <HAL_HCD_HC_Halt>
 8011be4:	4603      	mov	r3, r0
 8011be6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011be8:	7bfb      	ldrb	r3, [r7, #15]
 8011bea:	4618      	mov	r0, r3
 8011bec:	f000 f8a0 	bl	8011d30 <USBH_Get_USB_Status>
 8011bf0:	4603      	mov	r3, r0
 8011bf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011bf4:	7bbb      	ldrb	r3, [r7, #14]
}
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	3710      	adds	r7, #16
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	bd80      	pop	{r7, pc}

08011bfe <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8011bfe:	b590      	push	{r4, r7, lr}
 8011c00:	b089      	sub	sp, #36	; 0x24
 8011c02:	af04      	add	r7, sp, #16
 8011c04:	6078      	str	r0, [r7, #4]
 8011c06:	4608      	mov	r0, r1
 8011c08:	4611      	mov	r1, r2
 8011c0a:	461a      	mov	r2, r3
 8011c0c:	4603      	mov	r3, r0
 8011c0e:	70fb      	strb	r3, [r7, #3]
 8011c10:	460b      	mov	r3, r1
 8011c12:	70bb      	strb	r3, [r7, #2]
 8011c14:	4613      	mov	r3, r2
 8011c16:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c18:	2300      	movs	r3, #0
 8011c1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8011c26:	787c      	ldrb	r4, [r7, #1]
 8011c28:	78ba      	ldrb	r2, [r7, #2]
 8011c2a:	78f9      	ldrb	r1, [r7, #3]
 8011c2c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011c30:	9303      	str	r3, [sp, #12]
 8011c32:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011c34:	9302      	str	r3, [sp, #8]
 8011c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c38:	9301      	str	r3, [sp, #4]
 8011c3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011c3e:	9300      	str	r3, [sp, #0]
 8011c40:	4623      	mov	r3, r4
 8011c42:	f7f3 fb5f 	bl	8005304 <HAL_HCD_HC_SubmitRequest>
 8011c46:	4603      	mov	r3, r0
 8011c48:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8011c4a:	7bfb      	ldrb	r3, [r7, #15]
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	f000 f86f 	bl	8011d30 <USBH_Get_USB_Status>
 8011c52:	4603      	mov	r3, r0
 8011c54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c56:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c58:	4618      	mov	r0, r3
 8011c5a:	3714      	adds	r7, #20
 8011c5c:	46bd      	mov	sp, r7
 8011c5e:	bd90      	pop	{r4, r7, pc}

08011c60 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011c60:	b580      	push	{r7, lr}
 8011c62:	b082      	sub	sp, #8
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	6078      	str	r0, [r7, #4]
 8011c68:	460b      	mov	r3, r1
 8011c6a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011c72:	78fa      	ldrb	r2, [r7, #3]
 8011c74:	4611      	mov	r1, r2
 8011c76:	4618      	mov	r0, r3
 8011c78:	f7f3 fe08 	bl	800588c <HAL_HCD_HC_GetURBState>
 8011c7c:	4603      	mov	r3, r0
}
 8011c7e:	4618      	mov	r0, r3
 8011c80:	3708      	adds	r7, #8
 8011c82:	46bd      	mov	sp, r7
 8011c84:	bd80      	pop	{r7, pc}

08011c86 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8011c86:	b580      	push	{r7, lr}
 8011c88:	b082      	sub	sp, #8
 8011c8a:	af00      	add	r7, sp, #0
 8011c8c:	6078      	str	r0, [r7, #4]
 8011c8e:	460b      	mov	r3, r1
 8011c90:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8011c98:	2b01      	cmp	r3, #1
 8011c9a:	d103      	bne.n	8011ca4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8011c9c:	78fb      	ldrb	r3, [r7, #3]
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	f000 f872 	bl	8011d88 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8011ca4:	20c8      	movs	r0, #200	; 0xc8
 8011ca6:	f7f2 f995 	bl	8003fd4 <HAL_Delay>
  return USBH_OK;
 8011caa:	2300      	movs	r3, #0
}
 8011cac:	4618      	mov	r0, r3
 8011cae:	3708      	adds	r7, #8
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	bd80      	pop	{r7, pc}

08011cb4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8011cb4:	b480      	push	{r7}
 8011cb6:	b085      	sub	sp, #20
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	6078      	str	r0, [r7, #4]
 8011cbc:	460b      	mov	r3, r1
 8011cbe:	70fb      	strb	r3, [r7, #3]
 8011cc0:	4613      	mov	r3, r2
 8011cc2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011cca:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8011ccc:	78fa      	ldrb	r2, [r7, #3]
 8011cce:	68f9      	ldr	r1, [r7, #12]
 8011cd0:	4613      	mov	r3, r2
 8011cd2:	009b      	lsls	r3, r3, #2
 8011cd4:	4413      	add	r3, r2
 8011cd6:	00db      	lsls	r3, r3, #3
 8011cd8:	440b      	add	r3, r1
 8011cda:	333b      	adds	r3, #59	; 0x3b
 8011cdc:	781b      	ldrb	r3, [r3, #0]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d00a      	beq.n	8011cf8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8011ce2:	78fa      	ldrb	r2, [r7, #3]
 8011ce4:	68f9      	ldr	r1, [r7, #12]
 8011ce6:	4613      	mov	r3, r2
 8011ce8:	009b      	lsls	r3, r3, #2
 8011cea:	4413      	add	r3, r2
 8011cec:	00db      	lsls	r3, r3, #3
 8011cee:	440b      	add	r3, r1
 8011cf0:	3350      	adds	r3, #80	; 0x50
 8011cf2:	78ba      	ldrb	r2, [r7, #2]
 8011cf4:	701a      	strb	r2, [r3, #0]
 8011cf6:	e009      	b.n	8011d0c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8011cf8:	78fa      	ldrb	r2, [r7, #3]
 8011cfa:	68f9      	ldr	r1, [r7, #12]
 8011cfc:	4613      	mov	r3, r2
 8011cfe:	009b      	lsls	r3, r3, #2
 8011d00:	4413      	add	r3, r2
 8011d02:	00db      	lsls	r3, r3, #3
 8011d04:	440b      	add	r3, r1
 8011d06:	3351      	adds	r3, #81	; 0x51
 8011d08:	78ba      	ldrb	r2, [r7, #2]
 8011d0a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8011d0c:	2300      	movs	r3, #0
}
 8011d0e:	4618      	mov	r0, r3
 8011d10:	3714      	adds	r7, #20
 8011d12:	46bd      	mov	sp, r7
 8011d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d18:	4770      	bx	lr

08011d1a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8011d1a:	b580      	push	{r7, lr}
 8011d1c:	b082      	sub	sp, #8
 8011d1e:	af00      	add	r7, sp, #0
 8011d20:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8011d22:	6878      	ldr	r0, [r7, #4]
 8011d24:	f7f2 f956 	bl	8003fd4 <HAL_Delay>
}
 8011d28:	bf00      	nop
 8011d2a:	3708      	adds	r7, #8
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	bd80      	pop	{r7, pc}

08011d30 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011d30:	b480      	push	{r7}
 8011d32:	b085      	sub	sp, #20
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	4603      	mov	r3, r0
 8011d38:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011d3a:	2300      	movs	r3, #0
 8011d3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011d3e:	79fb      	ldrb	r3, [r7, #7]
 8011d40:	2b03      	cmp	r3, #3
 8011d42:	d817      	bhi.n	8011d74 <USBH_Get_USB_Status+0x44>
 8011d44:	a201      	add	r2, pc, #4	; (adr r2, 8011d4c <USBH_Get_USB_Status+0x1c>)
 8011d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d4a:	bf00      	nop
 8011d4c:	08011d5d 	.word	0x08011d5d
 8011d50:	08011d63 	.word	0x08011d63
 8011d54:	08011d69 	.word	0x08011d69
 8011d58:	08011d6f 	.word	0x08011d6f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	73fb      	strb	r3, [r7, #15]
    break;
 8011d60:	e00b      	b.n	8011d7a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8011d62:	2302      	movs	r3, #2
 8011d64:	73fb      	strb	r3, [r7, #15]
    break;
 8011d66:	e008      	b.n	8011d7a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8011d68:	2301      	movs	r3, #1
 8011d6a:	73fb      	strb	r3, [r7, #15]
    break;
 8011d6c:	e005      	b.n	8011d7a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8011d6e:	2302      	movs	r3, #2
 8011d70:	73fb      	strb	r3, [r7, #15]
    break;
 8011d72:	e002      	b.n	8011d7a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8011d74:	2302      	movs	r3, #2
 8011d76:	73fb      	strb	r3, [r7, #15]
    break;
 8011d78:	bf00      	nop
  }
  return usb_status;
 8011d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	3714      	adds	r7, #20
 8011d80:	46bd      	mov	sp, r7
 8011d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d86:	4770      	bx	lr

08011d88 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8011d88:	b580      	push	{r7, lr}
 8011d8a:	b084      	sub	sp, #16
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	4603      	mov	r3, r0
 8011d90:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8011d92:	79fb      	ldrb	r3, [r7, #7]
 8011d94:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8011d96:	79fb      	ldrb	r3, [r7, #7]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d102      	bne.n	8011da2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8011d9c:	2301      	movs	r3, #1
 8011d9e:	73fb      	strb	r3, [r7, #15]
 8011da0:	e001      	b.n	8011da6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8011da2:	2300      	movs	r3, #0
 8011da4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 8011da6:	7bfb      	ldrb	r3, [r7, #15]
 8011da8:	461a      	mov	r2, r3
 8011daa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011dae:	4803      	ldr	r0, [pc, #12]	; (8011dbc <MX_DriverVbusFS+0x34>)
 8011db0:	f7f3 f94e 	bl	8005050 <HAL_GPIO_WritePin>
}
 8011db4:	bf00      	nop
 8011db6:	3710      	adds	r7, #16
 8011db8:	46bd      	mov	sp, r7
 8011dba:	bd80      	pop	{r7, pc}
 8011dbc:	40021800 	.word	0x40021800

08011dc0 <__errno>:
 8011dc0:	4b01      	ldr	r3, [pc, #4]	; (8011dc8 <__errno+0x8>)
 8011dc2:	6818      	ldr	r0, [r3, #0]
 8011dc4:	4770      	bx	lr
 8011dc6:	bf00      	nop
 8011dc8:	2000012c 	.word	0x2000012c

08011dcc <__libc_init_array>:
 8011dcc:	b570      	push	{r4, r5, r6, lr}
 8011dce:	4e0d      	ldr	r6, [pc, #52]	; (8011e04 <__libc_init_array+0x38>)
 8011dd0:	4c0d      	ldr	r4, [pc, #52]	; (8011e08 <__libc_init_array+0x3c>)
 8011dd2:	1ba4      	subs	r4, r4, r6
 8011dd4:	10a4      	asrs	r4, r4, #2
 8011dd6:	2500      	movs	r5, #0
 8011dd8:	42a5      	cmp	r5, r4
 8011dda:	d109      	bne.n	8011df0 <__libc_init_array+0x24>
 8011ddc:	4e0b      	ldr	r6, [pc, #44]	; (8011e0c <__libc_init_array+0x40>)
 8011dde:	4c0c      	ldr	r4, [pc, #48]	; (8011e10 <__libc_init_array+0x44>)
 8011de0:	f000 f94e 	bl	8012080 <_init>
 8011de4:	1ba4      	subs	r4, r4, r6
 8011de6:	10a4      	asrs	r4, r4, #2
 8011de8:	2500      	movs	r5, #0
 8011dea:	42a5      	cmp	r5, r4
 8011dec:	d105      	bne.n	8011dfa <__libc_init_array+0x2e>
 8011dee:	bd70      	pop	{r4, r5, r6, pc}
 8011df0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011df4:	4798      	blx	r3
 8011df6:	3501      	adds	r5, #1
 8011df8:	e7ee      	b.n	8011dd8 <__libc_init_array+0xc>
 8011dfa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011dfe:	4798      	blx	r3
 8011e00:	3501      	adds	r5, #1
 8011e02:	e7f2      	b.n	8011dea <__libc_init_array+0x1e>
 8011e04:	08014d28 	.word	0x08014d28
 8011e08:	08014d28 	.word	0x08014d28
 8011e0c:	08014d28 	.word	0x08014d28
 8011e10:	08014d2c 	.word	0x08014d2c

08011e14 <__itoa>:
 8011e14:	1e93      	subs	r3, r2, #2
 8011e16:	2b22      	cmp	r3, #34	; 0x22
 8011e18:	b510      	push	{r4, lr}
 8011e1a:	460c      	mov	r4, r1
 8011e1c:	d904      	bls.n	8011e28 <__itoa+0x14>
 8011e1e:	2300      	movs	r3, #0
 8011e20:	700b      	strb	r3, [r1, #0]
 8011e22:	461c      	mov	r4, r3
 8011e24:	4620      	mov	r0, r4
 8011e26:	bd10      	pop	{r4, pc}
 8011e28:	2a0a      	cmp	r2, #10
 8011e2a:	d109      	bne.n	8011e40 <__itoa+0x2c>
 8011e2c:	2800      	cmp	r0, #0
 8011e2e:	da07      	bge.n	8011e40 <__itoa+0x2c>
 8011e30:	232d      	movs	r3, #45	; 0x2d
 8011e32:	700b      	strb	r3, [r1, #0]
 8011e34:	4240      	negs	r0, r0
 8011e36:	2101      	movs	r1, #1
 8011e38:	4421      	add	r1, r4
 8011e3a:	f000 f8e1 	bl	8012000 <__utoa>
 8011e3e:	e7f1      	b.n	8011e24 <__itoa+0x10>
 8011e40:	2100      	movs	r1, #0
 8011e42:	e7f9      	b.n	8011e38 <__itoa+0x24>

08011e44 <itoa>:
 8011e44:	f7ff bfe6 	b.w	8011e14 <__itoa>

08011e48 <malloc>:
 8011e48:	4b02      	ldr	r3, [pc, #8]	; (8011e54 <malloc+0xc>)
 8011e4a:	4601      	mov	r1, r0
 8011e4c:	6818      	ldr	r0, [r3, #0]
 8011e4e:	f000 b86d 	b.w	8011f2c <_malloc_r>
 8011e52:	bf00      	nop
 8011e54:	2000012c 	.word	0x2000012c

08011e58 <free>:
 8011e58:	4b02      	ldr	r3, [pc, #8]	; (8011e64 <free+0xc>)
 8011e5a:	4601      	mov	r1, r0
 8011e5c:	6818      	ldr	r0, [r3, #0]
 8011e5e:	f000 b817 	b.w	8011e90 <_free_r>
 8011e62:	bf00      	nop
 8011e64:	2000012c 	.word	0x2000012c

08011e68 <memcpy>:
 8011e68:	b510      	push	{r4, lr}
 8011e6a:	1e43      	subs	r3, r0, #1
 8011e6c:	440a      	add	r2, r1
 8011e6e:	4291      	cmp	r1, r2
 8011e70:	d100      	bne.n	8011e74 <memcpy+0xc>
 8011e72:	bd10      	pop	{r4, pc}
 8011e74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011e78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011e7c:	e7f7      	b.n	8011e6e <memcpy+0x6>

08011e7e <memset>:
 8011e7e:	4402      	add	r2, r0
 8011e80:	4603      	mov	r3, r0
 8011e82:	4293      	cmp	r3, r2
 8011e84:	d100      	bne.n	8011e88 <memset+0xa>
 8011e86:	4770      	bx	lr
 8011e88:	f803 1b01 	strb.w	r1, [r3], #1
 8011e8c:	e7f9      	b.n	8011e82 <memset+0x4>
	...

08011e90 <_free_r>:
 8011e90:	b538      	push	{r3, r4, r5, lr}
 8011e92:	4605      	mov	r5, r0
 8011e94:	2900      	cmp	r1, #0
 8011e96:	d045      	beq.n	8011f24 <_free_r+0x94>
 8011e98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e9c:	1f0c      	subs	r4, r1, #4
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	bfb8      	it	lt
 8011ea2:	18e4      	addlt	r4, r4, r3
 8011ea4:	f000 f8ea 	bl	801207c <__malloc_lock>
 8011ea8:	4a1f      	ldr	r2, [pc, #124]	; (8011f28 <_free_r+0x98>)
 8011eaa:	6813      	ldr	r3, [r2, #0]
 8011eac:	4610      	mov	r0, r2
 8011eae:	b933      	cbnz	r3, 8011ebe <_free_r+0x2e>
 8011eb0:	6063      	str	r3, [r4, #4]
 8011eb2:	6014      	str	r4, [r2, #0]
 8011eb4:	4628      	mov	r0, r5
 8011eb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011eba:	f000 b8e0 	b.w	801207e <__malloc_unlock>
 8011ebe:	42a3      	cmp	r3, r4
 8011ec0:	d90c      	bls.n	8011edc <_free_r+0x4c>
 8011ec2:	6821      	ldr	r1, [r4, #0]
 8011ec4:	1862      	adds	r2, r4, r1
 8011ec6:	4293      	cmp	r3, r2
 8011ec8:	bf04      	itt	eq
 8011eca:	681a      	ldreq	r2, [r3, #0]
 8011ecc:	685b      	ldreq	r3, [r3, #4]
 8011ece:	6063      	str	r3, [r4, #4]
 8011ed0:	bf04      	itt	eq
 8011ed2:	1852      	addeq	r2, r2, r1
 8011ed4:	6022      	streq	r2, [r4, #0]
 8011ed6:	6004      	str	r4, [r0, #0]
 8011ed8:	e7ec      	b.n	8011eb4 <_free_r+0x24>
 8011eda:	4613      	mov	r3, r2
 8011edc:	685a      	ldr	r2, [r3, #4]
 8011ede:	b10a      	cbz	r2, 8011ee4 <_free_r+0x54>
 8011ee0:	42a2      	cmp	r2, r4
 8011ee2:	d9fa      	bls.n	8011eda <_free_r+0x4a>
 8011ee4:	6819      	ldr	r1, [r3, #0]
 8011ee6:	1858      	adds	r0, r3, r1
 8011ee8:	42a0      	cmp	r0, r4
 8011eea:	d10b      	bne.n	8011f04 <_free_r+0x74>
 8011eec:	6820      	ldr	r0, [r4, #0]
 8011eee:	4401      	add	r1, r0
 8011ef0:	1858      	adds	r0, r3, r1
 8011ef2:	4282      	cmp	r2, r0
 8011ef4:	6019      	str	r1, [r3, #0]
 8011ef6:	d1dd      	bne.n	8011eb4 <_free_r+0x24>
 8011ef8:	6810      	ldr	r0, [r2, #0]
 8011efa:	6852      	ldr	r2, [r2, #4]
 8011efc:	605a      	str	r2, [r3, #4]
 8011efe:	4401      	add	r1, r0
 8011f00:	6019      	str	r1, [r3, #0]
 8011f02:	e7d7      	b.n	8011eb4 <_free_r+0x24>
 8011f04:	d902      	bls.n	8011f0c <_free_r+0x7c>
 8011f06:	230c      	movs	r3, #12
 8011f08:	602b      	str	r3, [r5, #0]
 8011f0a:	e7d3      	b.n	8011eb4 <_free_r+0x24>
 8011f0c:	6820      	ldr	r0, [r4, #0]
 8011f0e:	1821      	adds	r1, r4, r0
 8011f10:	428a      	cmp	r2, r1
 8011f12:	bf04      	itt	eq
 8011f14:	6811      	ldreq	r1, [r2, #0]
 8011f16:	6852      	ldreq	r2, [r2, #4]
 8011f18:	6062      	str	r2, [r4, #4]
 8011f1a:	bf04      	itt	eq
 8011f1c:	1809      	addeq	r1, r1, r0
 8011f1e:	6021      	streq	r1, [r4, #0]
 8011f20:	605c      	str	r4, [r3, #4]
 8011f22:	e7c7      	b.n	8011eb4 <_free_r+0x24>
 8011f24:	bd38      	pop	{r3, r4, r5, pc}
 8011f26:	bf00      	nop
 8011f28:	20004b28 	.word	0x20004b28

08011f2c <_malloc_r>:
 8011f2c:	b570      	push	{r4, r5, r6, lr}
 8011f2e:	1ccd      	adds	r5, r1, #3
 8011f30:	f025 0503 	bic.w	r5, r5, #3
 8011f34:	3508      	adds	r5, #8
 8011f36:	2d0c      	cmp	r5, #12
 8011f38:	bf38      	it	cc
 8011f3a:	250c      	movcc	r5, #12
 8011f3c:	2d00      	cmp	r5, #0
 8011f3e:	4606      	mov	r6, r0
 8011f40:	db01      	blt.n	8011f46 <_malloc_r+0x1a>
 8011f42:	42a9      	cmp	r1, r5
 8011f44:	d903      	bls.n	8011f4e <_malloc_r+0x22>
 8011f46:	230c      	movs	r3, #12
 8011f48:	6033      	str	r3, [r6, #0]
 8011f4a:	2000      	movs	r0, #0
 8011f4c:	bd70      	pop	{r4, r5, r6, pc}
 8011f4e:	f000 f895 	bl	801207c <__malloc_lock>
 8011f52:	4a21      	ldr	r2, [pc, #132]	; (8011fd8 <_malloc_r+0xac>)
 8011f54:	6814      	ldr	r4, [r2, #0]
 8011f56:	4621      	mov	r1, r4
 8011f58:	b991      	cbnz	r1, 8011f80 <_malloc_r+0x54>
 8011f5a:	4c20      	ldr	r4, [pc, #128]	; (8011fdc <_malloc_r+0xb0>)
 8011f5c:	6823      	ldr	r3, [r4, #0]
 8011f5e:	b91b      	cbnz	r3, 8011f68 <_malloc_r+0x3c>
 8011f60:	4630      	mov	r0, r6
 8011f62:	f000 f83d 	bl	8011fe0 <_sbrk_r>
 8011f66:	6020      	str	r0, [r4, #0]
 8011f68:	4629      	mov	r1, r5
 8011f6a:	4630      	mov	r0, r6
 8011f6c:	f000 f838 	bl	8011fe0 <_sbrk_r>
 8011f70:	1c43      	adds	r3, r0, #1
 8011f72:	d124      	bne.n	8011fbe <_malloc_r+0x92>
 8011f74:	230c      	movs	r3, #12
 8011f76:	6033      	str	r3, [r6, #0]
 8011f78:	4630      	mov	r0, r6
 8011f7a:	f000 f880 	bl	801207e <__malloc_unlock>
 8011f7e:	e7e4      	b.n	8011f4a <_malloc_r+0x1e>
 8011f80:	680b      	ldr	r3, [r1, #0]
 8011f82:	1b5b      	subs	r3, r3, r5
 8011f84:	d418      	bmi.n	8011fb8 <_malloc_r+0x8c>
 8011f86:	2b0b      	cmp	r3, #11
 8011f88:	d90f      	bls.n	8011faa <_malloc_r+0x7e>
 8011f8a:	600b      	str	r3, [r1, #0]
 8011f8c:	50cd      	str	r5, [r1, r3]
 8011f8e:	18cc      	adds	r4, r1, r3
 8011f90:	4630      	mov	r0, r6
 8011f92:	f000 f874 	bl	801207e <__malloc_unlock>
 8011f96:	f104 000b 	add.w	r0, r4, #11
 8011f9a:	1d23      	adds	r3, r4, #4
 8011f9c:	f020 0007 	bic.w	r0, r0, #7
 8011fa0:	1ac3      	subs	r3, r0, r3
 8011fa2:	d0d3      	beq.n	8011f4c <_malloc_r+0x20>
 8011fa4:	425a      	negs	r2, r3
 8011fa6:	50e2      	str	r2, [r4, r3]
 8011fa8:	e7d0      	b.n	8011f4c <_malloc_r+0x20>
 8011faa:	428c      	cmp	r4, r1
 8011fac:	684b      	ldr	r3, [r1, #4]
 8011fae:	bf16      	itet	ne
 8011fb0:	6063      	strne	r3, [r4, #4]
 8011fb2:	6013      	streq	r3, [r2, #0]
 8011fb4:	460c      	movne	r4, r1
 8011fb6:	e7eb      	b.n	8011f90 <_malloc_r+0x64>
 8011fb8:	460c      	mov	r4, r1
 8011fba:	6849      	ldr	r1, [r1, #4]
 8011fbc:	e7cc      	b.n	8011f58 <_malloc_r+0x2c>
 8011fbe:	1cc4      	adds	r4, r0, #3
 8011fc0:	f024 0403 	bic.w	r4, r4, #3
 8011fc4:	42a0      	cmp	r0, r4
 8011fc6:	d005      	beq.n	8011fd4 <_malloc_r+0xa8>
 8011fc8:	1a21      	subs	r1, r4, r0
 8011fca:	4630      	mov	r0, r6
 8011fcc:	f000 f808 	bl	8011fe0 <_sbrk_r>
 8011fd0:	3001      	adds	r0, #1
 8011fd2:	d0cf      	beq.n	8011f74 <_malloc_r+0x48>
 8011fd4:	6025      	str	r5, [r4, #0]
 8011fd6:	e7db      	b.n	8011f90 <_malloc_r+0x64>
 8011fd8:	20004b28 	.word	0x20004b28
 8011fdc:	20004b2c 	.word	0x20004b2c

08011fe0 <_sbrk_r>:
 8011fe0:	b538      	push	{r3, r4, r5, lr}
 8011fe2:	4c06      	ldr	r4, [pc, #24]	; (8011ffc <_sbrk_r+0x1c>)
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	4605      	mov	r5, r0
 8011fe8:	4608      	mov	r0, r1
 8011fea:	6023      	str	r3, [r4, #0]
 8011fec:	f7f0 fc30 	bl	8002850 <_sbrk>
 8011ff0:	1c43      	adds	r3, r0, #1
 8011ff2:	d102      	bne.n	8011ffa <_sbrk_r+0x1a>
 8011ff4:	6823      	ldr	r3, [r4, #0]
 8011ff6:	b103      	cbz	r3, 8011ffa <_sbrk_r+0x1a>
 8011ff8:	602b      	str	r3, [r5, #0]
 8011ffa:	bd38      	pop	{r3, r4, r5, pc}
 8011ffc:	20005690 	.word	0x20005690

08012000 <__utoa>:
 8012000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012002:	4b1d      	ldr	r3, [pc, #116]	; (8012078 <__utoa+0x78>)
 8012004:	b08b      	sub	sp, #44	; 0x2c
 8012006:	4605      	mov	r5, r0
 8012008:	460c      	mov	r4, r1
 801200a:	466e      	mov	r6, sp
 801200c:	f103 0c20 	add.w	ip, r3, #32
 8012010:	6818      	ldr	r0, [r3, #0]
 8012012:	6859      	ldr	r1, [r3, #4]
 8012014:	4637      	mov	r7, r6
 8012016:	c703      	stmia	r7!, {r0, r1}
 8012018:	3308      	adds	r3, #8
 801201a:	4563      	cmp	r3, ip
 801201c:	463e      	mov	r6, r7
 801201e:	d1f7      	bne.n	8012010 <__utoa+0x10>
 8012020:	6818      	ldr	r0, [r3, #0]
 8012022:	791b      	ldrb	r3, [r3, #4]
 8012024:	713b      	strb	r3, [r7, #4]
 8012026:	1e93      	subs	r3, r2, #2
 8012028:	2b22      	cmp	r3, #34	; 0x22
 801202a:	6038      	str	r0, [r7, #0]
 801202c:	f04f 0300 	mov.w	r3, #0
 8012030:	d904      	bls.n	801203c <__utoa+0x3c>
 8012032:	7023      	strb	r3, [r4, #0]
 8012034:	461c      	mov	r4, r3
 8012036:	4620      	mov	r0, r4
 8012038:	b00b      	add	sp, #44	; 0x2c
 801203a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801203c:	1e66      	subs	r6, r4, #1
 801203e:	fbb5 f0f2 	udiv	r0, r5, r2
 8012042:	af0a      	add	r7, sp, #40	; 0x28
 8012044:	fb02 5510 	mls	r5, r2, r0, r5
 8012048:	443d      	add	r5, r7
 801204a:	1c59      	adds	r1, r3, #1
 801204c:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8012050:	f806 5f01 	strb.w	r5, [r6, #1]!
 8012054:	4605      	mov	r5, r0
 8012056:	b968      	cbnz	r0, 8012074 <__utoa+0x74>
 8012058:	5460      	strb	r0, [r4, r1]
 801205a:	4423      	add	r3, r4
 801205c:	4622      	mov	r2, r4
 801205e:	1b19      	subs	r1, r3, r4
 8012060:	1b10      	subs	r0, r2, r4
 8012062:	4281      	cmp	r1, r0
 8012064:	dde7      	ble.n	8012036 <__utoa+0x36>
 8012066:	7811      	ldrb	r1, [r2, #0]
 8012068:	7818      	ldrb	r0, [r3, #0]
 801206a:	f802 0b01 	strb.w	r0, [r2], #1
 801206e:	f803 1901 	strb.w	r1, [r3], #-1
 8012072:	e7f4      	b.n	801205e <__utoa+0x5e>
 8012074:	460b      	mov	r3, r1
 8012076:	e7e2      	b.n	801203e <__utoa+0x3e>
 8012078:	08014cf8 	.word	0x08014cf8

0801207c <__malloc_lock>:
 801207c:	4770      	bx	lr

0801207e <__malloc_unlock>:
 801207e:	4770      	bx	lr

08012080 <_init>:
 8012080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012082:	bf00      	nop
 8012084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012086:	bc08      	pop	{r3}
 8012088:	469e      	mov	lr, r3
 801208a:	4770      	bx	lr

0801208c <_fini>:
 801208c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801208e:	bf00      	nop
 8012090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012092:	bc08      	pop	{r3}
 8012094:	469e      	mov	lr, r3
 8012096:	4770      	bx	lr
